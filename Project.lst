Microsoft (R) Macro Assembler Version 14.29.30133.0	    08/05/22 00:18:14
<Project 6 - String Primitives and Macros      (Proj6_iwanek  Page 1 - 1


				TITLE Project 6 - String Primitives and Macros      (Proj6_iwanekm.asm)

				;--------------------------------------------------------------------------------------------------------------------------------------------------
				; Author:					Michael Iwanek
				; Last Modified:			08/04/2022
				; OSU email address:		iwanekm@oregonstate.edu
				; Course number/section:	CS271 Section 400
				; Project Number:			06
				; Due Date:					08/07/2022
				;--------------------------------------------------------------------------------------------------------------------------------------------------
				; Description: 
				;--------------------------------------------------------------------------------------------------------------------------------------------------
				;			-This program allows user to enter in a series of numbers as strings.  It then conver

				;--------------------------------------------------------------------------------------------------------------------------------------------------


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 


				; =======================================================================================================================================================
				; Name:				mGetString
				;
				; Description:		-This macro makes use of the ReadString Irvine library procedure to read a number entered by a user in the console as a string. 
				;					 It then updates the string by reference passed to it on the stack.  It also updates the number of characters entered by the user into an
				;					 output variable passed to it by reference on the stack.
				;
				; Preconditions:	-none
				;
				; Postconditions:	-none
				;
				; Receives:			-The temp string output variable by reference, max size of string, and output by reference for the number of characters the user enters. 
				;					 This output of characters this output of characters entered is used to test if the user entered nothing into the console or too large
				;					 of a number for a 32 bit signed register.
				;
				; Returns:			-Returns by reference a string, and the number of characters entered by the user by reference, so that global variable are updated.
				;
				; =======================================================================================================================================================
				mGetString	MACRO	buffer, buffer_size, output_nums_entered, message
					
					PUSH				EDX							; Save EDX register
					PUSH				ECX
					PUSH				EAX
					mDisplayString		message						; Diplay prompt for num
					MOV					EDX,  buffer				; Buffer is where output string by ref is saved to
					MOV					ECX,  [buffer_size]
					CALL				setTextColorGreen	
					CALL				ReadString
					CALL				setTextColorWhite
					MOV					ecx, output_nums_entered
					MOV					[ecx], EAX
					POP					EAX
					POP					ECX							  ; Restore EDX
					POP					EDX							  ; Restore ECX

				ENDM

				; =======================================================================================================================================================
				; Name:				mDisplayString
				;
				; Description:		-This macro makes use of the WriteString Irvine library procedure to write a string to the conosle.  Used by the mGetString macro.
				;
				; Preconditions:	-none
				;
				; Postconditions:	-none
				;
				; Receives:			-Addresses of the string variable to be written needs to be passed as a parameter.
				;
				; Returns:			-nothing
				;
				; =======================================================================================================================================================
				mDisplayString	MACRO	buffer

					PUSH				EDX							  ;Save EDX register
					MOV					EDX, buffer
					CALL				WriteString
					POP					EDX							  ;Restore EDX

				ENDM

				; (insert constant definitions here)

 00000000			.data
 00000000 48 65 6C 6C 6F	program_info_1		BYTE		"Hello!  Welcome to my program:  String Primitives and Macros by Michael Iwanek",13,10,13,10,0
	   21 20 20 57 65
	   6C 63 6F 6D 65
	   20 74 6F 20 6D
	   79 20 70 72 6F
	   67 72 61 6D 3A
	   20 20 53 74 72
	   69 6E 67 20 50
	   72 69 6D 69 74
	   69 76 65 73 20
	   61 6E 64 20 4D
	   61 63 72 6F 73
	   20 62 79 20 4D
	   69 63 68 61 65
	   6C 20 49 77 61
	   6E 65 6B 0D 0A
	   0D 0A 00

 00000053 50 6C 65 61 73	program_info_2		BYTE		"Please enter in 10 signed decimal integers.  This program will then display each number entered, their average value, and sum.",13,10,13,10
	   65 20 65 6E 74
	   65 72 20 69 6E
	   20 31 30 20 73
	   69 67 6E 65 64
	   20 64 65 63 69
	   6D 61 6C 20 69
	   6E 74 65 67 65
	   72 73 2E 20 20
	   54 68 69 73 20
	   70 72 6F 67 72
	   61 6D 20 77 69
	   6C 6C 20 74 68
	   65 6E 20 64 69
	   73 70 6C 61 79
	   20 65 61 63 68
	   20 6E 75 6D 62
	   65 72 20 65 6E
	   74 65 72 65 64
	   2C 20 74 68 65
	   69 72 20 61 76
	   65 72 61 67 65
	   20 76 61 6C 75
	   65 2C 20 61 6E
	   64 20 73 75 6D
	   2E 0D 0A 0D 0A
 000000D5  49 74 20 77 69						BYTE		"It will do this without using any Irvine procedures to read/write numbers, but will instead convert inputted strings to numbers using an algorithm.",13,10,13,10
	   6C 6C 20 64 6F
	   20 74 68 69 73
	   20 77 69 74 68
	   6F 75 74 20 75
	   73 69 6E 67 20
	   61 6E 79 20 49
	   72 76 69 6E 65
	   20 70 72 6F 63
	   65 64 75 72 65
	   73 20 74 6F 20
	   72 65 61 64 2F
	   77 72 69 74 65
	   20 6E 75 6D 62
	   65 72 73 2C 20
	   62 75 74 20 77
	   69 6C 6C 20 69
	   6E 73 74 65 61
	   64 20 63 6F 6E
	   76 65 72 74 20
	   69 6E 70 75 74
	   74 65 64 20 73
	   74 72 69 6E 67
	   73 20 74 6F 20
	   6E 75 6D 62 65
	   72 73 20 75 73
	   69 6E 67 20 61
	   6E 20 61 6C 67
	   6F 72 69 74 68
	   6D 2E 0D 0A 0D
	   0A
 0000016C  41 66 74 65 72						BYTE		"After storing these numbers to an array, it will use another algorithm to convert these numbers back to strings to be displayed to the console.  ",13,10,13,10
	   20 73 74 6F 72
	   69 6E 67 20 74
	   68 65 73 65 20
	   6E 75 6D 62 65
	   72 73 20 74 6F
	   20 61 6E 20 61
	   72 72 61 79 2C
	   20 69 74 20 77
	   69 6C 6C 20 75
	   73 65 20 61 6E
	   6F 74 68 65 72
	   20 61 6C 67 6F
	   72 69 74 68 6D
	   20 74 6F 20 63
	   6F 6E 76 65 72
	   74 20 74 68 65
	   73 65 20 6E 75
	   6D 62 65 72 73
	   20 62 61 63 6B
	   20 74 6F 20 73
	   74 72 69 6E 67
	   73 20 74 6F 20
	   62 65 20 64 69
	   73 70 6C 61 79
	   65 64 20 74 6F
	   20 74 68 65 20
	   63 6F 6E 73 6F
	   6C 65 2E 20 20
	   0D 0A 0D 0A
 00000201  45 61 63 68 20						BYTE		"Each number must be able to fit within a 32 bit register, or be between the values of -2,147,483,647 and 2,147,483,647 inclusive (or +/- 2^31).",13,10,13,10,0
	   6E 75 6D 62 65
	   72 20 6D 75 73
	   74 20 62 65 20
	   61 62 6C 65 20
	   74 6F 20 66 69
	   74 20 77 69 74
	   68 69 6E 20 61
	   20 33 32 20 62
	   69 74 20 72 65
	   67 69 73 74 65
	   72 2C 20 6F 72
	   20 62 65 20 62
	   65 74 77 65 65
	   6E 20 74 68 65
	   20 76 61 6C 75
	   65 73 20 6F 66
	   20 2D 32 2C 31
	   34 37 2C 34 38
	   33 2C 36 34 37
	   20 61 6E 64 20
	   32 2C 31 34 37
	   2C 34 38 33 2C
	   36 34 37 20 69
	   6E 63 6C 75 73
	   69 76 65 20 28
	   6F 72 20 2B 2F
	   2D 20 32 5E 33
	   31 29 2E 0D 0A
	   0D 0A 00

 00000295 00000000		userString_len		DWORD		?
 00000299 00000000		temp_num			SDWORD		?
 0000029D 00000000		temp_num2			SDWORD		?
 000002A1 00000000		rounded_avg			SDWORD		?
 000002A5 00000000		sum_all_nums		SDWORD		?

 000002A9 00000000		IntegerArray_len	DWORD		0				;num elements
 000002AD 00000001		IntegerArray_len2	DWORD		1				;num elements
 000002B1  00000032 [		userString			BYTE		50 DUP(?)		;10 digit string, +1 for + or neg sign; +1 for null terminator
	    00
	   ]
 000002E3  00000020 [		temp_string			BYTE		32 DUP(?)
	    00
	   ]
 00000303  00000020 [		temp_string2		BYTE		32 DUP(?)
	    00
	   ]
 00000323  0000000A [		IntegerArray		SDWORD		10 DUP(?)
	    00000000
	   ]
 0000034B  0000000A [		StringArray			SDWORD		10 DUP(?)
	    00000000
	   ]
 00000373 00000032		userString_max_len	DWORD		LENGTHOF userString

 00000377 50 6C 65 61 73	num_prompt			BYTE		"Please enter a signed number between -2^31 and 2^31: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 20 62
	   65 74 77 65 65
	   6E 20 2D 32 5E
	   33 31 20 61 6E
	   64 20 32 5E 33
	   31 3A 20 00
 000003AD 45 72 72 6F 72	Error_no_input		BYTE		"Error!  You didn't enter in any numbers.",0 
	   21 20 20 59 6F
	   75 20 64 69 64
	   6E 27 74 20 65
	   6E 74 65 72 20
	   69 6E 20 61 6E
	   79 20 6E 75 6D
	   62 65 72 73 2E
	   00
 000003D6 45 72 72 6F 72	Error_char_num		BYTE		"Error!  You can only enter numbers, and the plus or minus sign.",0 
	   21 20 20 59 6F
	   75 20 63 61 6E
	   20 6F 6E 6C 79
	   20 65 6E 74 65
	   72 20 6E 75 6D
	   62 65 72 73 2C
	   20 61 6E 64 20
	   74 68 65 20 70
	   6C 75 73 20 6F
	   72 20 6D 69 6E
	   75 73 20 73 69
	   67 6E 2E 00
 00000416 45 72 72 6F 72	Error_sign_use		BYTE		"Error!  You can only enter the plus or minus sign at the beginning of the number.",0 
	   21 20 20 59 6F
	   75 20 63 61 6E
	   20 6F 6E 6C 79
	   20 65 6E 74 65
	   72 20 74 68 65
	   20 70 6C 75 73
	   20 6F 72 20 6D
	   69 6E 75 73 20
	   73 69 67 6E 20
	   61 74 20 74 68
	   65 20 62 65 67
	   69 6E 6E 69 6E
	   67 20 6F 66 20
	   74 68 65 20 6E
	   75 6D 62 65 72
	   2E 00
 00000468 45 72 72 6F 72	Error_too_large		BYTE		"Error!  Your number must be between the ranges of-2,147,483,647 and 2,147,483,647 inclusive (or +/- 2^31).",0 
	   21 20 20 59 6F
	   75 72 20 6E 75
	   6D 62 65 72 20
	   6D 75 73 74 20
	   62 65 20 62 65
	   74 77 65 65 6E
	   20 74 68 65 20
	   72 61 6E 67 65
	   73 20 6F 66 2D
	   32 2C 31 34 37
	   2C 34 38 33 2C
	   36 34 37 20 61
	   6E 64 20 32 2C
	   31 34 37 2C 34
	   38 33 2C 36 34
	   37 20 69 6E 63
	   6C 75 73 69 76
	   65 20 28 6F 72
	   20 2B 2F 2D 20
	   32 5E 33 31 29
	   2E 00
 000004D3 59 6F 75 20 65	display_1			BYTE		"You entered the following numbers: ",0 
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 20
	   00
 000004F7 54 68 65 20 73	display_2			BYTE		"The sum of all numbers entered is: ",0 
	   75 6D 20 6F 66
	   20 61 6C 6C 20
	   6E 75 6D 62 65
	   72 73 20 65 6E
	   74 65 72 65 64
	   20 69 73 3A 20
	   00
 0000051B 54 68 65 20 74	display_3			BYTE		"The truncated average of all numbers entered is: ",0 
	   72 75 6E 63 61
	   74 65 64 20 61
	   76 65 72 61 67
	   65 20 6F 66 20
	   61 6C 6C 20 6E
	   75 6D 62 65 72
	   73 20 65 6E 74
	   65 72 65 64 20
	   69 73 3A 20 00
 0000054D 54 68 61 6E 6B	goodbye				BYTE		"Thanks for using my program!  Goodbye.",0
	   73 20 66 6F 72
	   20 75 73 69 6E
	   67 20 6D 79 20
	   70 72 6F 67 72
	   61 6D 21 20 20
	   47 6F 6F 64 62
	   79 65 2E 00
 00000574 2C 20 00		comma_string		BYTE		", ",0

 00000000			.code
 00000000			main PROC

					;THIS PROGRAM DOES NOT USE GLOBAL VARIABLES BUT PASSES VARIABLE TO PROCEDURES ON THE STACK
					;VARIABLE USED IN THE PROCEDURES ARE NOT GLOBAL; THEY ARE LOCAL VARIABLES USED FOR PROGRAM READABILITY



					;display program prompts and info to the user using the mDisplayString macro
					mDisplayString		OFFSET program_info_1
 00000000  52		     1		PUSH				EDX							  ;Save EDX register
 00000001  BA 00000000 R     1		MOV					EDX, OFFSET program_info_1
 00000006  E8 00000000 E     1		CALL				WriteString
 0000000B  5A		     1		POP					EDX							  ;Restore EDX
					mDisplayString		OFFSET program_info_2	
 0000000C  52		     1		PUSH				EDX							  ;Save EDX register
 0000000D  BA 00000053 R     1		MOV					EDX, OFFSET program_info_2
 00000012  E8 00000000 E     1		CALL				WriteString
 00000017  5A		     1		POP					EDX							  ;Restore EDX
					


 00000018  B9 0000000A			MOV ECX, 10
					;loop to get 10 numbers from the user as strings, converted to an array of numbers from ASCII manually
 0000001D			_InputNumberLoop:

 0000001D  68 0000029D R		PUSH				OFFSET temp_num2
 00000022  68 00000468 R		PUSH				OFFSET Error_too_large
 00000027  68 000002A9 R		PUSH				OFFSET IntegerArray_len
 0000002C  68 00000323 R		PUSH				OFFSET IntegerArray
 00000031  68 00000299 R		PUSH				OFFSET temp_num
 00000036  68 00000295 R		PUSH				OFFSET userString_len
 0000003B  68 000003AD R		PUSH				OFFSET Error_no_input
 00000040  68 000003D6 R		PUSH				OFFSET Error_char_num
 00000045  68 00000416 R		PUSH				OFFSET Error_sign_use
 0000004A  FF 35 00000373 R		PUSH				userString_max_len
 00000050  68 000002B1 R		PUSH				OFFSET userString
 00000055  68 00000377 R		PUSH				OFFSET num_prompt
 0000005A  E8 00000124			CALL				ReadVal

 0000005F  E2 BC		LOOP _InputNumberLoop

					
					;calc sum
 00000061  68 000002A5 R		PUSH				OFFSET sum_all_nums
 00000066  68 000002A9 R		PUSH				OFFSET IntegerArray_len
 0000006B  68 00000323 R		PUSH				OFFSET IntegerArray
 00000070  E8 00000494			CALL				CalculateSum	

					;calc average
 00000075  68 000002A1 R		PUSH				OFFSET rounded_avg
 0000007A  68 000002A5 R		PUSH				OFFSET sum_all_nums
 0000007F  68 000002A9 R		PUSH				OFFSET IntegerArray_len
 00000084  E8 000004B2			CALL				CalculateAverage	

					;display numbers entered by user
 00000089  E8 00000000 E		CALL				CrLf
					mDisplayString		OFFSET display_1
 0000008E  52		     1		PUSH				EDX							  ;Save EDX register
 0000008F  BA 000004D3 R     1		MOV					EDX, OFFSET display_1
 00000094  E8 00000000 E     1		CALL				WriteString
 00000099  5A		     1		POP					EDX							  ;Restore EDX
 0000009A  E8 00000000 E		CALL				CrLf
 0000009F  E8 0000055D			CALL				setTextColorGreen	
 000000A4  68 00000574 R		PUSH				OFFSET comma_string
 000000A9  68 00000303 R		PUSH				OFFSET temp_string2
 000000AE  68 000002E3 R		PUSH				OFFSET temp_string
 000000B3  68 0000034B R		PUSH				OFFSET StringArray
 000000B8  68 000002A9 R		PUSH				OFFSET IntegerArray_len
 000000BD  68 00000323 R		PUSH				OFFSET IntegerArray
 000000C2  E8 000004A8			CALL				WriteVal
 000000C7  E8 00000528			CALL				setTextColorWhite		

					;display text prompt before sum is displayed
 000000CC  E8 00000000 E		CALL				CrLf
 000000D1  E8 00000000 E		CALL				CrLf
					mDisplayString		OFFSET display_2	
 000000D6  52		     1		PUSH				EDX							  ;Save EDX register
 000000D7  BA 000004F7 R     1		MOV					EDX, OFFSET display_2
 000000DC  E8 00000000 E     1		CALL				WriteString
 000000E1  5A		     1		POP					EDX							  ;Restore EDX
 000000E2  E8 0000051A			CALL				setTextColorGreen	
 000000E7  E8 00000000 E		CALL				CrLf
					
					;display sum of numbers entered by user
 000000EC  68 00000574 R		PUSH				OFFSET comma_string
 000000F1  68 00000303 R		PUSH				OFFSET temp_string2
 000000F6  68 000002E3 R		PUSH				OFFSET temp_string
 000000FB  68 0000034B R		PUSH				OFFSET StringArray
 00000100  68 000002AD R		PUSH				OFFSET IntegerArray_len2
 00000105  68 000002A5 R		PUSH				OFFSET sum_all_nums
 0000010A  E8 00000460			CALL				WriteVal
 0000010F  E8 000004E0			CALL				setTextColorWhite	

					;display text prompt before truncated average is displayed
 00000114  E8 00000000 E		CALL				CrLf
 00000119  E8 00000000 E		CALL				CrLf
					mDisplayString		OFFSET display_3	
 0000011E  52		     1		PUSH				EDX							  ;Save EDX register
 0000011F  BA 0000051B R     1		MOV					EDX, OFFSET display_3
 00000124  E8 00000000 E     1		CALL				WriteString
 00000129  5A		     1		POP					EDX							  ;Restore EDX
 0000012A  E8 000004D2			CALL				setTextColorGreen	
 0000012F  E8 00000000 E		CALL				CrLf

					;display truncated average of numbers entered by user
 00000134  68 00000574 R		PUSH				OFFSET comma_string
 00000139  68 00000303 R		PUSH				OFFSET temp_string2
 0000013E  68 000002E3 R		PUSH				OFFSET temp_string
 00000143  68 0000034B R		PUSH				OFFSET StringArray
 00000148  68 000002AD R		PUSH				OFFSET IntegerArray_len2
 0000014D  68 000002A1 R		PUSH				OFFSET rounded_avg
 00000152  E8 00000418			CALL				WriteVal	
					

					;display the farewell message
 00000157  E8 00000498			CALL				setTextColorWhite	
 0000015C  E8 00000000 E		CALL				CrLf
 00000161  E8 00000000 E		CALL				CrLf
					mDisplayString		OFFSET goodbye	
 00000166  52		     1		PUSH				EDX							  ;Save EDX register
 00000167  BA 0000054D R     1		MOV					EDX, OFFSET goodbye
 0000016C  E8 00000000 E     1		CALL				WriteString
 00000171  5A		     1		POP					EDX							  ;Restore EDX
 00000172  E8 00000000 E		CALL				CrLf
 00000177  E8 00000000 E		CALL				CrLf




					Invoke ExitProcess,0	; exit to operating system
 0000017C  6A 00	   *	    push   +000000000h
 0000017E  E8 00000000 E   *	    call   ExitProcess
 00000183			main ENDP


				; =======================================================================================================================================================
				; Name:				ReadVal
				;
				; Description:		-This procedure invokes the mGetString macro to 
				;
				; Preconditions:	-none
				;
				; Postconditions:	-none
				;
				; Receives:			-The temp string output variable by reference, max size of string, and output by reference for the number of characters the user enters. 
				;					 This output of characters this output of characters entered is used to test if the user entered nothing into the console or too large
				;					 of a number for a 32 bit signed register.
				;
				; Returns:			-Returns by reference a string, and the number of characters entered by the user by reference, so that global variable are updated.
				;
				; =======================================================================================================================================================
 00000183			ReadVal PROC

				;*****************************************************************************************************************************************************
				;	1) Invoke the mGetString macro to get user input in the form of a string of digits	
				;*****************************************************************************************************************************************************

					LOCAL StringMaxLen:DWORD, StringRef:DWORD, NumsEntered:DWORD, sign:DWORD, numTemp:DWORD, returnValueAscii:DWORD, arrayelements:DWORD, messagePrompt:DWORD
 00000183  55		   *	    push   ebp
 00000184  8B EC	   *	    mov    ebp, esp
 00000186  83 C4 E0	   *	    add    esp, 0FFFFFFE0h
 00000189  60				PUSHAD

 0000018A  C7 45 F0			MOV					sign, 1
	   00000001
 00000191  8B 45 0C			MOV					eax, [EBP + 12]
 00000194  89 45 F8			MOV					StringRef, eax
 00000197  8B 45 10			MOV					eax, [EBP + 16]	
 0000019A  89 45 FC			MOV					StringMaxLen, eax		


 0000019D			_PromptUserInput:

 0000019D  8B 55 34			MOV					edx, [EBP + 52]	
 000001A0  89 55 F4			MOV					NumsEntered, edx										   ;output variable to hold nums entered
										
 000001A3  8B 55 08			MOV					edx,[EBP + 8]
 000001A6  89 55 E0			MOV					messagePrompt, edx										   ;prompt num	

				    mGetString			StringRef, StringMaxLen, NumsEntered, messagePrompt 	   ;pass string output by ref, size by value, and nums entered by ref to macro
 000001A9  52		     1		PUSH				EDX							; Save EDX register
 000001AA  51		     1		PUSH				ECX
 000001AB  50		     1		PUSH				EAX
 000001AC  52		     2		PUSH				EDX							  ;Save EDX register
 000001AD  8B 55 E0	     2		MOV					EDX, messagePrompt
 000001B0  E8 00000000 E     2		CALL				WriteString
 000001B5  5A		     2		POP					EDX							  ;Restore EDX
 000001B6  8B 55 F8	     1		MOV					EDX,  StringRef				; Buffer is where output string by ref is saved to
 000001B9  8B 4D FC	     1		MOV					ECX,  [StringMaxLen]
 000001BC  E8 00000440	     1		CALL				setTextColorGreen	
 000001C1  E8 00000000 E     1		CALL				ReadString
 000001C6  E8 00000429	     1		CALL				setTextColorWhite
 000001CB  8B 4D F4	     1		MOV					ecx, NumsEntered
 000001CE  89 01	     1		MOV					[ecx], EAX
 000001D0  58		     1		POP					EAX
 000001D1  59		     1		POP					ECX							  ; Restore EDX
 000001D2  5A		     1		POP					EDX							  ; Restore ECX

 000001D3  8B 55 34			MOV					edx, [EBP + 52]	
 000001D6  8B 12			MOV					edx, [edx]
 000001D8  89 55 F4			MOV					NumsEntered, edx										   ;output variable from macro to local variable





					
				;*****************************************************************************************************************************************************
				;	2) Convert (USING STRING PRIMITIVES) the string of ASCII digits to its numeric value representation (SDWORD).
				;   validating each char is a valid # (not symbol)                                                                
				;*****************************************************************************************************************************************************


 000001DB  8B 4D F4			MOV					ECX, NumsEntered				; test if no nums entered using local variable
 000001DE  83 F9 00			CMP					ECX, 0
 000001E1  0F 84 00000081		jz					_noInputError
 000001E7  83 F9 0B			CMP					ECX, 11
 000001EA  0F 8F 000000F5		jg					_numTooLargeError
 000001F0  8B 75 F8			MOV					ESI, StringRef					; if nums were entered, then start loop
 000001F3  8B 4D FC			MOV					ECX, StringMaxLen				; test if no nums entered using local variable
 000001F6  C7 45 EC			MOV					numTemp, 0
	   00000000


				;==================LOOP TO CONVERT STRING STARTS HERE======================================================================================
 000001FD			_convertString:	
 000001FD  AC				LODSB												; takes ESI and copies to AL, then increment ESI to next element
 000001FE  3C 00			CMP					AL, 0
 00000200  0F 84 000000BC		jz					_FinishedConvertingtoNum
 00000206  3C 30			CMP					AL, 48							; nums are from 48 to 57; + is 43 and - is 45
 00000208  7C 06			jl					_checkifSign	
 0000020A  3C 39			CMP					AL, 57
 0000020C  7F 41			jg					_NotNumError
 0000020E  EB 0A			jmp					_Convert	


 00000210			_checkifSign:
 00000210  3C 2B			CMP					AL, 43							; + sign
 00000212  74 6D			jz					_TestifFirstDigitPlus
 00000214  3C 2D			CMP					AL, 45							; - sign
 00000216  74 7D			jz					_TestifFirstDigitMinus
 00000218  EB 35			jmp					_NotNumError

 0000021A			_Convert:
 0000021A  FF 75 24			PUSH				[EBP + 36]						; temp return variable from ConvertASCIItoNum
 0000021D  50				PUSH				EAX								; this pushes AL and garbage values
 0000021E  E8 00000103			CALL				ConvertASCIItoNum	
					
 00000223  8B 45 EC			MOV					EAX, numTemp					; tempNum to hold digits

 00000226  3D 0CCCCCCC	CMP					EAX, 214748364
 0000022B  0F 8F 000000B4		jg					_numTooLargeError


 00000231  BB 0000000A			MOV					ebx, 10
 00000236  F7 E3			mul					ebx								; multiply by 10 then loop
 00000238  50				push				eax								; save multiplied numTemp

 00000239  8B 5D 24			MOV					ebx, [EBP + 36]		
 0000023C  8B 03			MOV					eax, [ebx]						; return variable from ConvertASCIItoNum
 0000023E  89 45 E8			MOV					returnValueAscii, eax			; save return variable from ConvertASCIItoNum

 00000241  58				pop					eax								; restore multipled value to eax
 00000242  01 45 E8			add					returnValueAscii, eax			; add to return variable
 00000245  8B 45 E8			MOV					eax, returnValueAscii			; move num so far to eax
 00000248  89 45 EC			MOV					numTemp, EAX					; save to numTemp for next loop

 0000024B			_NextLoop:
					
 0000024B  E2 B0			loop				_ConvertString
 0000024D  EB 73			jmp					_FinishedConvertingtoNum
				;==================LOOP TO CONVERT STRING ENDS HERE========================================================================================



				;Errors and testing if + or - if first char
 0000024F			_NotNumError:
					
					mDisplayString		[EBP + 24]				; not num string
 0000024F  52		     1		PUSH				EDX							  ;Save EDX register
 00000250  8B 55 18	     1		MOV					EDX, [EBP + 24]
 00000253  E8 00000000 E     1		CALL				WriteString
 00000258  5A		     1		POP					EDX							  ;Restore EDX
 00000259  E8 00000000 E		call				CrLf
 0000025E  E8 00000000 E		call				CrLF
 00000263  E9 FFFFFF35			jmp					_PromptUserInput


 00000268			_noInputError:
					mDisplayString		[EBP + 28]				; no input string
 00000268  52		     1		PUSH				EDX							  ;Save EDX register
 00000269  8B 55 1C	     1		MOV					EDX, [EBP + 28]
 0000026C  E8 00000000 E     1		CALL				WriteString
 00000271  5A		     1		POP					EDX							  ;Restore EDX
 00000272  E8 00000000 E		call				CrLf
 00000277  E8 00000000 E		call				CrLF
 0000027C  E9 FFFFFF1C			jmp					_PromptUserInput

 00000281			_TestifFirstDigitPlus:
 00000281  83 7D F4 01			CMP					NumsEntered, 1
 00000285  74 E1			jz					_noInputError
 00000287  39 4D FC			CMP					StringMaxLen, ECX
 0000028A  75 1D			jnz					_signNotFirstError
 0000028C  C7 45 F0			MOV					sign, 1	
	   00000001
 00000293  EB B6			jmp					_NextLoop


 00000295			_TestifFirstDigitMinus:
 00000295  83 7D F4 01			CMP					NumsEntered, 1
 00000299  74 CD			jz					_noInputError
 0000029B  39 4D FC			CMP					StringMaxLen, ECX
 0000029E  75 09			jnz					_signNotFirstError
 000002A0  C7 45 F0			MOV					sign, 2					; local variable set as negative
	   00000002
 000002A7  EB A2			jmp					_NextLoop

 000002A9			_signNotFirstError:
					mDisplayString		[EBP + 20]				; prompt num	
 000002A9  52		     1		PUSH				EDX							  ;Save EDX register
 000002AA  8B 55 14	     1		MOV					EDX, [EBP + 20]
 000002AD  E8 00000000 E     1		CALL				WriteString
 000002B2  5A		     1		POP					EDX							  ;Restore EDX
 000002B3  E8 00000000 E		call				CrLf
 000002B8  E8 00000000 E		call				CrLF
 000002BD  E9 FFFFFEDB			jmp					_PromptUserInput




				;*****************************************************************************************************************************************************
				;	3) Store this one value in a memory variable (output paratmeter, by reference).                                                              
				;*****************************************************************************************************************************************************

 000002C2			_FinishedConvertingtoNum:
					
 000002C2  83 7D F0 02			CMP					sign, 2
 000002C6  74 02			jz					_convertNumtoNegative
 000002C8  EB 08			jmp					_testIfNumtooLarge
					

 000002CA			_convertNumtoNegative:
 000002CA  8B 45 E8			MOV					eax, returnValueAscii  
 000002CD  F7 D8			neg					eax
 000002CF  89 45 E8			MOV					returnValueAscii, eax 


 000002D2			_testIfNumtooLarge:
 000002D2  8B 45 E8			MOV					EAX, returnValueAscii	
 000002D5  3D 7FFFFFFF			CMP					EAX, 2147483647
 000002DA  7F 09			jg					_numTooLargeError
 000002DC  3D 80000001			CMP					EAX, -2147483647
 000002E1  7C 02			jl					_numTooLargeError
 000002E3  EB 19			jmp					_storeNumtoArray

 000002E5			_numTooLargeError:
					mDisplayString		[EBP + 48]	
 000002E5  52		     1		PUSH				EDX							  ;Save EDX register
 000002E6  8B 55 30	     1		MOV					EDX, [EBP + 48]
 000002E9  E8 00000000 E     1		CALL				WriteString
 000002EE  5A		     1		POP					EDX							  ;Restore EDX
 000002EF  E8 00000000 E		call				CrLf
 000002F4  E8 00000000 E		call				CrLF
 000002F9  E9 FFFFFE9F			jmp					_PromptUserInput	
					


 000002FE			_storeNumtoArray:

 000002FE  8B 75 28			MOV					ESI, [EBP + 40]				    ; offset of int array		
 00000301  8B 45 2C			MOV					EAX, [EBP + 44]					; offset IntegerArray length variable to track how many elements are in array
 00000304  8B 00			MOV					EAX, [EAX]
 00000306  89 45 E4			MOV					arrayelements, EAX				; local variable
 00000309  BB 00000004			MOV					EBX, 4
 0000030E  F7 E3			mul					EBX	
 00000310  8B 4D E8			MOV					ECX, returnValueAscii
 00000313  89 0C 06			MOV					[ESI + EAX], ECX				; store num in int array + offset to put in the last postion of the array

 00000316  8B 7D 2C			MOV					EDI, [EBP + 44]
 00000319  FF 45 E4			inc					arrayelements
 0000031C  8B 45 E4			MOV					eax, arrayelements
 0000031F  89 07			MOV					[EDI], eax						;store count of array elements


 00000321  61				POPAD
 00000322  C9		   *	    leave  
 00000323  C2 002C			RET 44									


 00000326			ReadVal ENDP



				; =======================================================================================================================================================
				; Name:				ConvertASCIItoNum
				;
				; Description:		-This procedure invokes the mGetString macro to 
				;
				; Preconditions:	-none
				;
				; Postconditions:	-none
				;
				; Receives:			-The t
				;
				; Returns:			-Returns
				;
				; =======================================================================================================================================================
 00000326			ConvertASCIItoNum PROC
					
					LOCAL numText:BYTE 
 00000326  55		   *	    push   ebp
 00000327  8B EC	   *	    mov    ebp, esp
 00000329  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 0000032C  60				PUSHAD

 0000032D  8B 45 08			MOV EAX,			[EBP + 8]			; whole EAX register
 00000330  8B 5D 0C			MOV EBX,			[EBP + 12]			; output variable

 00000333  88 45 FF			MOV					numText, AL			; technically comparing AL here


 00000336  80 7D FF 30			CMP					numText, 48
 0000033A  74 36			jz					_zero
 0000033C  80 7D FF 31			CMP					numText, 49
 00000340  74 37			jz					_one
 00000342  80 7D FF 32			CMP					numText, 50
 00000346  74 38			jz					_two
 00000348  80 7D FF 33			CMP					numText, 51
 0000034C  74 39			jz					_three
 0000034E  80 7D FF 34			CMP					numText, 52
 00000352  74 3A			jz					_four
 00000354  80 7D FF 35			CMP					numText, 53
 00000358  74 3B			jz					_five
 0000035A  80 7D FF 36			CMP					numText, 54
 0000035E  74 3C			jz					_six
 00000360  80 7D FF 37			CMP					numText, 55
 00000364  74 3D			jz					_seven
 00000366  80 7D FF 38			CMP					numText, 56
 0000036A  74 3E			jz					_eight
 0000036C  80 7D FF 39			CMP					numText, 57
 00000370  74 3F			jz					_nine


 00000372			_zero:
 00000372  B8 00000000			MOV					EAX, 0
 00000377  EB 3F			jmp					_return

 00000379			_one:
 00000379  B8 00000001			MOV					EAX, 1
 0000037E  EB 38			jmp					_return

 00000380			_two:
 00000380  B8 00000002			MOV					EAX, 2
 00000385  EB 31			jmp					_return

 00000387			_three:
 00000387  B8 00000003			MOV					EAX, 3
 0000038C  EB 2A			jmp					_return

 0000038E			_four:
 0000038E  B8 00000004			MOV					EAX, 4
 00000393  EB 23			jmp					_return

 00000395			_five:
 00000395  B8 00000005			MOV					EAX, 5
 0000039A  EB 1C			jmp					_return

 0000039C			_six:
 0000039C  B8 00000006			MOV					EAX, 6
 000003A1  EB 15			jmp					_return

 000003A3			_seven:
 000003A3  B8 00000007			MOV					EAX, 7
 000003A8  EB 0E			jmp					_return

 000003AA			_eight:
 000003AA  B8 00000008			MOV					EAX, 8
 000003AF  EB 07			jmp					_return

 000003B1			_nine:
 000003B1  B8 00000009			MOV					EAX, 9
 000003B6  EB 00			jmp					_return



 000003B8			_return:
 000003B8  89 03			MOV					[EBX],EAX	;move result to output variable
					
 000003BA  61				POPAD
 000003BB  C9		   *	    leave  
 000003BC  C2 0008			ret 8

 000003BF			ConvertASCIItoNum ENDP


				; =======================================================================================================================================================
				; Name:				ConvertNumtoASCII
				;
				; Description:		-This procedure invokes the mGetString macro to 
				;
				; Preconditions:	-none
				;
				; Postconditions:	-none
				;
				; Receives:			-The 
				;
				; Returns:			-Returns
				;
				; =======================================================================================================================================================
 000003BF			ConvertNumtoASCII PROC
					
					 ; parameter order:  integer value, temp string 1, tempstring2

					LOCAL num:DWORD, quotient:DWORD, remainder:DWORD, newStringLen:DWORD, negativeFlag:DWORD
 000003BF  55		   *	    push   ebp
 000003C0  8B EC	   *	    mov    ebp, esp
 000003C2  83 C4 EC	   *	    add    esp, 0FFFFFFECh
 000003C5  60				PUSHAD

 000003C6  C7 45 EC			MOV					negativeFlag, 1
	   00000001

 000003CD  B9 00000020			MOV					ecx, 32
 000003D2  8B 7D 0C			MOV					EDI, [EBP + 12]		; temp string1 offset from stack

 000003D5			_ClearString_one:
 000003D5  B8 00000000			MOV					EAX, 0
 000003DA  89 07			MOV					[EDI], EAX
 000003DC  83 C7 01			add					EDI, 1
 000003DF  E2 F4			loop				_ClearString_one


					
 000003E1  B9 00000020			MOV					ecx, 32
 000003E6  8B 7D 10			MOV					EDI, [EBP + 16]		; temp string 2 offset from stack

 000003E9			_ClearString_two:
 000003E9  B8 00000000			MOV					EAX, 0
 000003EE  89 07			MOV					[EDI], EAX
 000003F0  83 C7 01			add					EDI, 1
 000003F3  E2 F4			loop				_ClearString_two




 000003F5  8B 7D 0C			MOV					EDI, [EBP + 12]		; temp string offset from stack
 000003F8  8B 45 08			MOV					EAX, [EBP + 8]		; integer from stack

 000003FB  89 45 FC			MOV					num, EAX
 000003FE  C7 45 F0			MOV					newStringLen, 0
	   00000000

					;test if number is negative, if so we need to reverse it and add a negative sign in front
 00000405  83 F8 00			CMP					EAX, 0
 00000408  7C 0B			jl					_numIsNegativeInvert
 0000040A  83 F8 00			CMP					EAX, 0
 0000040D  0F 84 000000A6		jz					_NumisJustZero
 00000413  EB 0C			jmp					_MainConversionLoop


					;test if number is just zero

 00000415			_numIsNegativeInvert:
 00000415  F7 D8			neg					eax
 00000417  89 45 FC			MOV					num, eax
 0000041A  C7 45 EC			MOV					negativeFlag, 2
	   00000002



 00000421			_MainConversionLoop:
					;need to repeatedly divide by 10, multiply by zeros until no remainder left, then reverse string array created.

 00000421  8B 45 FC			MOV					EAX, num
 00000424  99				CDQ 
 00000425  BB 0000000A			MOV					ebx, 10
 0000042A  F7 FB			IDIV				ebx
 0000042C  89 45 F8			MOV					quotient, EAX
 0000042F  89 55 F4			MOV					remainder, EDX

 00000432  83 7D F4 00			CMP					remainder, 0
 00000436  7F 15			jg					_remainderExists
 00000438  83 7D F8 00			CMP					quotient, 0
 0000043C  7F 05			jg					_Quotient						; if no quotient and remainder
 0000043E  E9 00000095			jmp					_AddTERMINATOR


 00000443			_Quotient:
 00000443  B8 00000000			MOV					EAX, 0
 00000448  89 45 FC			MOV					num, EAX
 0000044B  EB 08			jmp					_startNumConversion

 0000044D			_remainderExists:
 0000044D  8B 45 F4			MOV					EAX, remainder
 00000450  89 45 FC			MOV					num, EAX
 00000453  EB 00			jmp					_startNumConversion


 00000455			_startNumConversion:
 00000455  83 7D FC 00			CMP					num, 0
 00000459  74 36			jz					_zero_num
 0000045B  83 7D FC 01			CMP					num, 1
 0000045F  74 34			jz					_one_num
 00000461  83 7D FC 02			CMP					num, 2
 00000465  74 32			jz					_two_num
 00000467  83 7D FC 03			CMP					num, 3
 0000046B  74 30			jz					_three_num
 0000046D  83 7D FC 04			CMP					num, 4
 00000471  74 2E			jz					_four_num
 00000473  83 7D FC 05			CMP					num, 5
 00000477  74 2C			jz					_five_num
 00000479  83 7D FC 06			CMP					num, 6
 0000047D  74 2A			jz					_six_num
 0000047F  83 7D FC 07			CMP					num, 7
 00000483  74 28			jz					_seven_num
 00000485  83 7D FC 08			CMP					num, 8
 00000489  74 26			jz					_eight_num
 0000048B  83 7D FC 09			CMP					num, 9
 0000048F  74 24			jz					_nine_num


 00000491			_zero_num:
 00000491  B0 30			MOV					AL, 48 
 00000493  EB 30			jmp					add_num_to_string

 00000495			_one_num:
 00000495  B0 31			MOV					AL, 49 
 00000497  EB 2C			jmp					add_num_to_string

 00000499			_two_num:
 00000499  B0 32			MOV					AL, 50 
 0000049B  EB 28			jmp					add_num_to_string

 0000049D			_three_num:
 0000049D  B0 33			MOV					AL, 51 
 0000049F  EB 24			jmp					add_num_to_string

 000004A1			_four_num:
 000004A1  B0 34			MOV					AL, 52
 000004A3  EB 20			jmp					add_num_to_string

 000004A5			_five_num:
 000004A5  B0 35			MOV					AL, 53 
 000004A7  EB 1C			jmp					add_num_to_string

 000004A9			_six_num:
 000004A9  B0 36			MOV					AL, 54 
 000004AB  EB 18			jmp					add_num_to_string

 000004AD			_seven_num:
 000004AD  B0 37			MOV					AL, 55 
 000004AF  EB 14			jmp					add_num_to_string

 000004B1			_eight_num:
 000004B1  B0 38			MOV					AL, 56
 000004B3  EB 10			jmp					add_num_to_string

 000004B5			_nine_num:
 000004B5  B0 39			MOV					AL, 57 
 000004B7  EB 0C			jmp					add_num_to_string

 000004B9			_NumisJustZero:
 000004B9  B0 30			MOV					AL, 48
 000004BB  88 07			MOV					[EDI], AL				; move result to output variable
 000004BD  83 C7 01			add					EDI, 1					; increment
 000004C0  FF 45 F0			inc					newStringLen
 000004C3  EB 13			jmp					_AddTERMINATOR

 000004C5			add_num_to_string:
 000004C5  88 07			MOV					[EDI], AL				; move result to output variable
 000004C7  83 C7 01			add					EDI, 1					; increment
 000004CA  8B 45 F8			MOV					EAX, quotient
 000004CD  89 45 FC			MOV					num, EAX
 000004D0  FF 45 F0			inc					newStringLen
 000004D3  E9 FFFFFF49			jmp					_MainConversionLoop


 000004D8			_AddTERMINATOR:
 000004D8  B0 00			MOV					AL, 0
 000004DA  88 07			MOV					[EDI], AL				; move result to output variable
 000004DC  FF 45 F0			inc					newStringLen


 000004DF			_FinishConvertingNumtoString:

					;NEED TO REVERSE STRING AFTERWARDS
 000004DF  8B 4D F0			MOV					ECX, newStringLen
 000004E2  8B 75 0C			MOV					ESI, [EBP + 12]			; temp string offset from stack
 000004E5  03 F1			add					ESI, ECX				; so source strings starts from end
 000004E7  4E				dec					ESI
 000004E8  4E				dec					ESI
 000004E9  8B 7D 10			MOV					EDI, [EBP + 16]			; temp string offset2 from stack
					
 000004EC  83 7D EC 02			CMP					negativeFlag, 2
 000004F0  74 02			jz					_addNegativeSignBeforeReversal
 000004F2  EB 0A			jmp					_revLoop

 000004F4			_addNegativeSignBeforeReversal:
 000004F4  B8 0000002D			MOV					EAX, 45
 000004F9  89 07			MOV					[EDI], EAX				; temp string offset2 from stack
 000004FB  83 C7 01			add					edi, 1

 000004FE			_revLoop:										;reference StringManipulator.asm from canvas
 000004FE  FD				STD
 000004FF  AC				LODSB
 00000500  FC				CLD
 00000501  AA				STOSB
 00000502  E2 FA			LOOP				_revLoop



 00000504  61				POPAD
 00000505  C9		   *	    leave  
 00000506  C2 000C			ret 12

 00000509			ConvertNumtoASCII ENDP


				; =======================================================================================================================================================
				; Name:				CalculateSum
				;
				; Description:		-This procedure 
				;
				; Preconditions:	-none
				;
				; Postconditions:	-none
				;
				; Receives:			-The 
				;
				; Returns:			-Returns 
				;
				; =======================================================================================================================================================
 00000509			CalculateSum PROC
					LOCAL num:SDWORD 
 00000509  55		   *	    push   ebp
 0000050A  8B EC	   *	    mov    ebp, esp
 0000050C  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 0000050F  60				PUSHAD

 00000510  C7 45 FC			MOV					num, 0
	   00000000

 00000517  8B 4D 0C			MOV					ECX, [EBP + 12]		; OFFSET IntegerArray_len
 0000051A  8B 09			MOV					ECX, [ECX]
 0000051C  8B 7D 08			MOV					EDI, [EBP + 8]		; OFFSET IntegerArray

 0000051F			_SumLoop:	
 0000051F  8B 07			MOV					EAX, [EDI]
 00000521  8B 5D FC			MOV					EBX, num
 00000524  03 C3			add					EAX, EBX
 00000526  89 45 FC			MOV					num, EAX
 00000529  83 C7 04			add					EDI, 4

 0000052C  E2 F1			LOOP				_SumLoop

					
 0000052E  8B 45 10			MOV					EAX, [EBP + 16]		; OFFSET sum_all_nums
 00000531  8B 5D FC			MOV					EBX, num
 00000534  89 18			MOV					[EAX], EBX


 00000536  61				POPAD
 00000537  C9		   *	    leave  
 00000538  C2 000C			ret 12

 0000053B			CalculateSum ENDP


				; =======================================================================================================================================================
				; Name:				CalculateAverage
				;
				; Description:		-This procedure
				;
				; Preconditions:	-none
				;
				; Postconditions:	-none
				;
				; Receives:			-The
				;
				; Returns:			-Returns 
				;
				; =======================================================================================================================================================
 0000053B			CalculateAverage PROC
					LOCAL num:SDWORD, quotient:SDWORD, remainder:SDWORD, divisor:DWORD, dividend: SDWORD ;,doubledRemainder:SDWORD, 
 0000053B  55		   *	    push   ebp
 0000053C  8B EC	   *	    mov    ebp, esp
 0000053E  83 C4 EC	   *	    add    esp, 0FFFFFFECh
 00000541  60				PUSHAD

 00000542  C7 45 FC			MOV					num, 0
	   00000000
 00000549  8B 4D 08			MOV					ECX, [EBP + 8]		; OFFSET IntegerArray_len
 0000054C  8B 09			MOV					ECX, [ECX]
 0000054E  89 4D F0			MOV					divisor, ECX
 00000551  8B 45 0C			MOV					EAX, [EBP + 12]		; OFFSET sum_all_nums
 00000554  8B 00			MOV					EAX, [EAX]
 00000556  89 45 EC			MOV					dividend, EAX
 00000559  99				CDQ
 0000055A  F7 F9			IDIV				ECX

 0000055C  89 45 F8			MOV					quotient, EAX
 0000055F  89 55 F4			MOV					remainder, EDX
				;
				; ***********COMMENTED OUT AS PROJECT INSTRUCTIONS CHANGED FROM ROUNDING TO TRUNCATION - REFERENCE ED DISCUSSION 1661642****************
				;
				;	MOV EAX, remainder
				;	MOV EBX, 2
				;	mul EBX
				;	MOV doubledRemainder, EAX
				;
				;
				;	CMP dividend, 0
				;	jl	_testNegativeRounding
				;	jmp _testPositiveRounding
				;
				;_testNegativeRounding:
				;	CMP EAX, dividend
				;	jle _roundNegativeDown
				;	jmp _saveValue
				;
				;_testPositiveRounding:
				;	CMP EAX, dividend
				;	jge _roundPositiveUp
				;	jmp _saveValue
				;
				;_roundPositiveUp:	
				;	inc quotient
				;	jmp _saveValue
				;
				;_roundNegativeDown:
				;	dec quotient

 00000562			_saveValue:

 00000562  8B 45 10			MOV					EAX, [EBP + 16]		; OFFSET rounded_avg
 00000565  8B 5D F8			MOV					EBX, quotient
 00000568  89 18			MOV					[EAX], ebx	


 0000056A  61				POPAD
 0000056B  C9		   *	    leave  
 0000056C  C2 000C			ret 12

 0000056F			CalculateAverage ENDP


				; =======================================================================================================================================================
				; Name:				WriteVal
				;
				; Description:		-This procedure converts a numeric SDWORD value, input parameter by reference, to a string of ASCII digits manually.  It also 
				;					 invokes the mGetString macro to print the converted value to the console for the user.  It prints out commas if there are multiple values.
				;
				; Preconditions:	-none
				;
				; Postconditions:	-none
				;
				; Receives:			-
				;
				; Returns:			-Returns 
				;
				; =======================================================================================================================================================
 0000056F			WriteVal PROC

					LOCAL num:SDWORD, arrayLengthNum:SDWORD, integerArrayReference:SDWORD
 0000056F  55		   *	    push   ebp
 00000570  8B EC	   *	    mov    ebp, esp
 00000572  83 C4 F4	   *	    add    esp, 0FFFFFFF4h
 00000575  60				PUSHAD

 00000576  8B 4D 0C			MOV					ECX, [EBP + 12]					; OFFSET integer array length from stack for LOOP counter
 00000579  8B 09			MOV					ECX, [ECX]
 0000057B  89 4D F8			MOV					arrayLengthNum, ECX
 0000057E  8B 75 08			MOV					ESI, [EBP + 8]					; OFFSET integer array from stack
 00000581  89 75 F4			MOV					integerArrayReference, ESI


 00000584			_convertLoop:
 00000584  8B 45 18			MOV					EAX, [EBP + 24]					; OFFSET temp_string2 RETURN VARIABLE from stack	
 00000587  50				PUSH				EAX								; push temp_string for ConvertNumtoASCII proc

 00000588  8B 45 14			MOV					EAX, [EBP + 20]					; OFFSET temp_string RETURN VARIABLE from stack	
 0000058B  50				PUSH				EAX								; push temp_string for ConvertNumtoASCII proc

 0000058C  8B 1E			MOV					EBX, [ESI]						; save value in EBX
 0000058E  53				PUSH				EBX								; push int from integer array by value for ConvertNumtoASCII proc

 0000058F  E8 FFFFFE2B			CALL				ConvertNumtoASCII				; parameter order: return string, int by val

 00000594  8B 45 18			MOV					EAX, [EBP + 24]					; access return value from stack that ConvertNumtoASCII used with temp string
					
 00000597  89 45 FC			MOV					num, EAX
					mDisplayString		num
 0000059A  52		     1		PUSH				EDX							  ;Save EDX register
 0000059B  8B 55 FC	     1		MOV					EDX, num
 0000059E  E8 00000000 E     1		CALL				WriteString
 000005A3  5A		     1		POP					EDX							  ;Restore EDX

 000005A4  83 F9 01			CMP					ECX, 1
 000005A7  74 0C			jz					_noComma

 000005A9			_writeComma:	
 000005A9  8B 45 1C			MOV					EAX, [EBP + 28]					;comma string
					mDisplayString		EAX
 000005AC  52		     1		PUSH				EDX							  ;Save EDX register
 000005AD  8B D0	     1		MOV					EDX, EAX
 000005AF  E8 00000000 E     1		CALL				WriteString
 000005B4  5A		     1		POP					EDX							  ;Restore EDX

 000005B5			_noComma:
 000005B5  83 C6 04			add					ESI, 4							; increment int array
 000005B8  E2 CA			LOOP				_convertLoop
					
					
 000005BA  61				POPAD
 000005BB  C9		   *	    leave  
 000005BC  C2 0018			ret 24



 000005BF			WriteVal ENDP


				; =======================================================================================================================================================
				;			*****THIS PROCEDURE IS NOT USED.  THIS WAS BEFORE I REALIZED THAT THE READSTRING IRVINE PROC CAN COUNT THE CHARACTERS ENTERED*******
				;
				; Name:				getStringLen
				;
				; Description:		-This procedure converts a numeric SDWORD value, input parameter by reference, to a string of ASCII digits manually.  It also 
				;					 invokes the mGetString macro to print the converted value to the console for the user.  It prints out commas if there are multiple values.
				;
				; Preconditions:	-none
				;
				; Postconditions:	-none
				;
				; Receives:			-
				;
				; Returns:			-Returns 
				;
				; =======================================================================================================================================================
 000005BF			getStringLen PROC
					
					LOCAL StringLen:DWORD
 000005BF  55		   *	    push   ebp
 000005C0  8B EC	   *	    mov    ebp, esp
 000005C2  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 000005C5  60				PUSHAD

 000005C6  B9 0000001E			MOV					ECX, 30				; max length for counter
 000005CB  8B 75 0C			MOV					ESI, [EBP + 12]		; output ref

 000005CE  C7 45 FC			MOV					StringLen, 0
	   00000000
					
 000005D5			_countLoop:
 000005D5  AC				LODSB	
 000005D6  3C 00			CMP					AL, 0
 000005D8  7E 0D			jle					_end
 000005DA  3C 2B			CMP					AL, 43				; + sign
 000005DC  74 07			jz					_nocount
 000005DE  3C 2D			CMP					AL, 45				; - sign
 000005E0  74 03			jz					_nocount
 000005E2  FF 45 FC			inc					StringLen

 000005E5			_nocount:
 000005E5  E2 EE			loop				_countLoop
					
 000005E7			_end:	
 000005E7  8B 45 FC			MOV					EAX, StringLen		; LOCAL VARIABLE
 000005EA  8B 55 10			MOV					EDX, [EBP + 16] 	; move count to output variable
 000005ED  89 02			MOV					[EDX], EAX 			; move count to output variable
					
 000005EF  61				POPAD
 000005F0  C9		   *	    leave  
 000005F1  C2 000C			ret 12

 000005F4			getStringLen ENDP


				; =======================================================================================================================================================
				; Name:	setTextColorWhite
				; Procedure to change console text to white.  Preserves all general-purpose registers.
				; Preconditions: none
				; Postconditions: none
				; Receives: none
				; Returns:  none
				; =======================================================================================================================================================
 000005F4			setTextColorWhite PROC
 000005F4  60				pushad
 000005F5  B8 0000000F			MOV					eax, white 
 000005FA  E8 00000000 E		call				SetTextColor
 000005FF  61				popad
 00000600  C3				ret
 00000601			setTextColorWhite ENDP


				; =======================================================================================================================================================
				; Name:	setTextColorGreen
				; Procedure to change console text to green. Preserves all general-purpose registers.
				; Preconditions: none
				; Postconditions: none
				; Receives: none
				; Returns:  none
				; =======================================================================================================================================================
 00000601			setTextColorGreen PROC	
 00000601  60				pushad
 00000602  B8 00000002			MOV					eax, green 
 00000607  E8 00000000 E		call				SetTextColor
 0000060C  61				popad
 0000060D  C3				ret
 0000060E			setTextColorGreen ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30133.0	    08/05/22 00:18:14
<Project 6 - String Primitives and Macros      (Proj6_iwanek  Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000577 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000060E Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CalculateAverage . . . . . . . .	P Near	 0000053B _TEXT	Length= 00000034 Public STDCALL
  num  . . . . . . . . . . . . .	DWord	 bp - 00000004
  quotient . . . . . . . . . . .	DWord	 bp - 00000008
  remainder  . . . . . . . . . .	DWord	 bp - 0000000C
  divisor  . . . . . . . . . . .	DWord	 bp - 00000010
  dividend . . . . . . . . . . .	DWord	 bp - 00000014
  _saveValue . . . . . . . . . .	L Near	 00000562 _TEXT	
CalculateSum . . . . . . . . . .	P Near	 00000509 _TEXT	Length= 00000032 Public STDCALL
  num  . . . . . . . . . . . . .	DWord	 bp - 00000004
  _SumLoop . . . . . . . . . . .	L Near	 0000051F _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ConvertASCIItoNum  . . . . . . .	P Near	 00000326 _TEXT	Length= 00000099 Public STDCALL
  numText  . . . . . . . . . . .	Byte	 bp - 00000001
  _zero  . . . . . . . . . . . .	L Near	 00000372 _TEXT	
  _one . . . . . . . . . . . . .	L Near	 00000379 _TEXT	
  _two . . . . . . . . . . . . .	L Near	 00000380 _TEXT	
  _three . . . . . . . . . . . .	L Near	 00000387 _TEXT	
  _four  . . . . . . . . . . . .	L Near	 0000038E _TEXT	
  _five  . . . . . . . . . . . .	L Near	 00000395 _TEXT	
  _six . . . . . . . . . . . . .	L Near	 0000039C _TEXT	
  _seven . . . . . . . . . . . .	L Near	 000003A3 _TEXT	
  _eight . . . . . . . . . . . .	L Near	 000003AA _TEXT	
  _nine  . . . . . . . . . . . .	L Near	 000003B1 _TEXT	
  _return  . . . . . . . . . . .	L Near	 000003B8 _TEXT	
ConvertNumtoASCII  . . . . . . .	P Near	 000003BF _TEXT	Length= 0000014A Public STDCALL
  num  . . . . . . . . . . . . .	DWord	 bp - 00000004
  quotient . . . . . . . . . . .	DWord	 bp - 00000008
  remainder  . . . . . . . . . .	DWord	 bp - 0000000C
  newStringLen . . . . . . . . .	DWord	 bp - 00000010
  negativeFlag . . . . . . . . .	DWord	 bp - 00000014
  _ClearString_one . . . . . . .	L Near	 000003D5 _TEXT	
  _ClearString_two . . . . . . .	L Near	 000003E9 _TEXT	
  _numIsNegativeInvert . . . . .	L Near	 00000415 _TEXT	
  _MainConversionLoop  . . . . .	L Near	 00000421 _TEXT	
  _Quotient  . . . . . . . . . .	L Near	 00000443 _TEXT	
  _remainderExists . . . . . . .	L Near	 0000044D _TEXT	
  _startNumConversion  . . . . .	L Near	 00000455 _TEXT	
  _zero_num  . . . . . . . . . .	L Near	 00000491 _TEXT	
  _one_num . . . . . . . . . . .	L Near	 00000495 _TEXT	
  _two_num . . . . . . . . . . .	L Near	 00000499 _TEXT	
  _three_num . . . . . . . . . .	L Near	 0000049D _TEXT	
  _four_num  . . . . . . . . . .	L Near	 000004A1 _TEXT	
  _five_num  . . . . . . . . . .	L Near	 000004A5 _TEXT	
  _six_num . . . . . . . . . . .	L Near	 000004A9 _TEXT	
  _seven_num . . . . . . . . . .	L Near	 000004AD _TEXT	
  _eight_num . . . . . . . . . .	L Near	 000004B1 _TEXT	
  _nine_num  . . . . . . . . . .	L Near	 000004B5 _TEXT	
  _NumisJustZero . . . . . . . .	L Near	 000004B9 _TEXT	
  add_num_to_string  . . . . . .	L Near	 000004C5 _TEXT	
  _AddTERMINATOR . . . . . . . .	L Near	 000004D8 _TEXT	
  _FinishConvertingNumtoString .	L Near	 000004DF _TEXT	
  _addNegativeSignBeforeReversal .	L Near	 000004F4 _TEXT	
  _revLoop . . . . . . . . . . .	L Near	 000004FE _TEXT	
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000183 _TEXT	Length= 000001A3 Public STDCALL
  StringMaxLen . . . . . . . . .	DWord	 bp - 00000004
  StringRef  . . . . . . . . . .	DWord	 bp - 00000008
  NumsEntered  . . . . . . . . .	DWord	 bp - 0000000C
  sign . . . . . . . . . . . . .	DWord	 bp - 00000010
  numTemp  . . . . . . . . . . .	DWord	 bp - 00000014
  returnValueAscii . . . . . . .	DWord	 bp - 00000018
  arrayelements  . . . . . . . .	DWord	 bp - 0000001C
  messagePrompt  . . . . . . . .	DWord	 bp - 00000020
  _PromptUserInput . . . . . . .	L Near	 0000019D _TEXT	
  _convertString . . . . . . . .	L Near	 000001FD _TEXT	
  _checkifSign . . . . . . . . .	L Near	 00000210 _TEXT	
  _Convert . . . . . . . . . . .	L Near	 0000021A _TEXT	
  _NextLoop  . . . . . . . . . .	L Near	 0000024B _TEXT	
  _NotNumError . . . . . . . . .	L Near	 0000024F _TEXT	
  _noInputError  . . . . . . . .	L Near	 00000268 _TEXT	
  _TestifFirstDigitPlus  . . . .	L Near	 00000281 _TEXT	
  _TestifFirstDigitMinus . . . .	L Near	 00000295 _TEXT	
  _signNotFirstError . . . . . .	L Near	 000002A9 _TEXT	
  _FinishedConvertingtoNum . . .	L Near	 000002C2 _TEXT	
  _convertNumtoNegative  . . . .	L Near	 000002CA _TEXT	
  _testIfNumtooLarge . . . . . .	L Near	 000002D2 _TEXT	
  _numTooLargeError  . . . . . .	L Near	 000002E5 _TEXT	
  _storeNumtoArray . . . . . . .	L Near	 000002FE _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 0000056F _TEXT	Length= 00000050 Public STDCALL
  num  . . . . . . . . . . . . .	DWord	 bp - 00000004
  arrayLengthNum . . . . . . . .	DWord	 bp - 00000008
  integerArrayReference  . . . .	DWord	 bp - 0000000C
  _convertLoop . . . . . . . . .	L Near	 00000584 _TEXT	
  _writeComma  . . . . . . . . .	L Near	 000005A9 _TEXT	
  _noComma . . . . . . . . . . .	L Near	 000005B5 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
getStringLen . . . . . . . . . .	P Near	 000005BF _TEXT	Length= 00000035 Public STDCALL
  StringLen  . . . . . . . . . .	DWord	 bp - 00000004
  _countLoop . . . . . . . . . .	L Near	 000005D5 _TEXT	
  _nocount . . . . . . . . . . .	L Near	 000005E5 _TEXT	
  _end . . . . . . . . . . . . .	L Near	 000005E7 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000183 Public STDCALL
  _InputNumberLoop . . . . . . .	L Near	 0000001D _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
setTextColorGreen  . . . . . . .	P Near	 00000601 _TEXT	Length= 0000000D Public STDCALL
setTextColorWhite  . . . . . . .	P Near	 000005F4 _TEXT	Length= 0000000D Public STDCALL
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
Error_char_num . . . . . . . . .	Byte	 000003D6 _DATA	
Error_no_input . . . . . . . . .	Byte	 000003AD _DATA	
Error_sign_use . . . . . . . . .	Byte	 00000416 _DATA	
Error_too_large  . . . . . . . .	Byte	 00000468 _DATA	
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
IntegerArray_len2  . . . . . . .	DWord	 000002AD _DATA	
IntegerArray_len . . . . . . . .	DWord	 000002A9 _DATA	
IntegerArray . . . . . . . . . .	DWord	 00000323 _DATA	
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
StringArray  . . . . . . . . . .	DWord	 0000034B _DATA	
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
comma_string . . . . . . . . . .	Byte	 00000574 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
display_1  . . . . . . . . . . .	Byte	 000004D3 _DATA	
display_2  . . . . . . . . . . .	Byte	 000004F7 _DATA	
display_3  . . . . . . . . . . .	Byte	 0000051B _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 0000054D _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
num_prompt . . . . . . . . . . .	Byte	 00000377 _DATA	
program_info_1 . . . . . . . . .	Byte	 00000000 _DATA	
program_info_2 . . . . . . . . .	Byte	 00000053 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
rounded_avg  . . . . . . . . . .	DWord	 000002A1 _DATA	
sum_all_nums . . . . . . . . . .	DWord	 000002A5 _DATA	
temp_num2  . . . . . . . . . . .	DWord	 0000029D _DATA	
temp_num . . . . . . . . . . . .	DWord	 00000299 _DATA	
temp_string2 . . . . . . . . . .	Byte	 00000303 _DATA	
temp_string  . . . . . . . . . .	Byte	 000002E3 _DATA	
userString_len . . . . . . . . .	DWord	 00000295 _DATA	
userString_max_len . . . . . . .	DWord	 00000373 _DATA	
userString . . . . . . . . . . .	Byte	 000002B1 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
