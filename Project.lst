Microsoft (R) Macro Assembler Version 14.29.30133.0	    08/07/22 15:31:01
<Project 6 - String Primitives and Macros      (Proj6_iwanek  Page 1 - 1


				TITLE Project 6 - String Primitives and Macros      (Proj6_iwanekm.asm)

				;--------------------------------------------------------------------------------------------------------------------------------------------------
				; Author:					Michael Iwanek
				; Last Modified:			08/04/2022
				; OSU email address:		iwanekm@oregonstate.edu
				; Course number/section:	CS271 Section 400
				; Project Number:			06
				; Due Date:					08/07/2022
				;--------------------------------------------------------------------------------------------------------------------------------------------------
				; Description: 
				;--------------------------------------------------------------------------------------------------------------------------------------------------
				;			
				;			-This program allows numbers to be read/written by the users without Irvine library procedures, using manual conversion of numbers to strings
				;			 and vice versa.
				;
				;			-This program allows user to enter in a series of numbers as strings.  It then converts the string into a number using the ReadVal procedure.
				;			 it accomplishes this without Irvine library procedures, by REPEATEDLY MULTIPLYING each char of the string converted to a number by 10 if necessary,
				;			 building up a number digit by digit.
				;
				;			-After creating the number, it saves it to an array of numbers.  It then calculates the average and sum of these numbers and displays these to the user.
				;
				;			-Finally, it uses the WriteVal function (also used for the sum/average previously) to loop through each SDWORD integer array and convert that number
				;			 back into a string manually wihtout Irvine library procedures.  It does this by REPEATEDLY DIVIDING each number by 10 to build back a string from the
				;			 remainder of each division. From this, it uses string primitve instructions to reverse the string, so that it is in the correct order.
				;
				;			-It also makes use of two macros to get and display strings to the user.
				;
				;--------------------------------------------------------------------------------------------------------------------------------------------------


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 


				; =======================================================================================================================================================
				; Name:				mGetString
				;
				; Description:		-This macro makes use of the ReadString Irvine library procedure to read a number entered by a user in the console as a string. 
				;					 It then updates the string by reference passed to it on the stack.  It also updates the number of characters entered by the user into an
				;					 output variable passed to it by reference on the stack.
				;
				; Preconditions:	-none
				;
				; Postconditions:	-none
				;
				; Receives:			-The temp string output variable by reference, max size of string, and output by reference for the number of characters the user enters. 
				;					 This output of characters this output of characters entered is used to test if the user entered nothing into the console or too large
				;					 of a number for a 32 bit signed register.
				;
				; Returns:			-Returns by reference a string, and the number of characters entered by the user by reference, so that global variable are updated.
				;
				; =======================================================================================================================================================
				mGetString	MACRO	buffer, buffer_size, output_nums_entered, message
					
					PUSH				EDX							; Save EDX register
					PUSH				ECX
					PUSH				EAX
					mDisplayString		message						; Diplay prompt for num
					MOV					EDX,  buffer				; Buffer is where output string by ref is saved to
					MOV					ECX,  [buffer_size]
					CALL				setTextColorGreen	
					CALL				ReadString
					CALL				setTextColorWhite
					MOV					ecx, output_nums_entered
					MOV					[ecx], EAX
					POP					EAX
					POP					ECX							  ; Restore EDX
					POP					EDX							  ; Restore ECX

				ENDM

				; =======================================================================================================================================================
				; Name:				mDisplayString
				;
				; Description:		-This macro makes use of the WriteString Irvine library procedure to write a string to the conosle.  Used by the mGetString macro.
				;
				; Preconditions:	-none
				;
				; Postconditions:	-none
				;
				; Receives:			-Addresses of the string variable to be written needs to be passed as a parameter.
				;
				; Returns:			-nothing
				;
				; =======================================================================================================================================================
				mDisplayString	MACRO	buffer

					PUSH				EDX							  ;Save EDX register
					MOV					EDX, buffer
					CALL				WriteString
					POP					EDX							  ;Restore EDX

				ENDM

				; (insert constant definitions here)

 00000000			.data
 00000000 48 65 6C 6C 6F	program_info_1		BYTE		"Hello!  Welcome to my program:  String Primitives and Macros by Michael Iwanek",13,10,13,10,0
	   21 20 20 57 65
	   6C 63 6F 6D 65
	   20 74 6F 20 6D
	   79 20 70 72 6F
	   67 72 61 6D 3A
	   20 20 53 74 72
	   69 6E 67 20 50
	   72 69 6D 69 74
	   69 76 65 73 20
	   61 6E 64 20 4D
	   61 63 72 6F 73
	   20 62 79 20 4D
	   69 63 68 61 65
	   6C 20 49 77 61
	   6E 65 6B 0D 0A
	   0D 0A 00

 00000053 50 6C 65 61 73	program_info_2		BYTE		"Please enter in 10 signed decimal integers.  This program will then display each number entered, their average value, and sum.",13,10,13,10
	   65 20 65 6E 74
	   65 72 20 69 6E
	   20 31 30 20 73
	   69 67 6E 65 64
	   20 64 65 63 69
	   6D 61 6C 20 69
	   6E 74 65 67 65
	   72 73 2E 20 20
	   54 68 69 73 20
	   70 72 6F 67 72
	   61 6D 20 77 69
	   6C 6C 20 74 68
	   65 6E 20 64 69
	   73 70 6C 61 79
	   20 65 61 63 68
	   20 6E 75 6D 62
	   65 72 20 65 6E
	   74 65 72 65 64
	   2C 20 74 68 65
	   69 72 20 61 76
	   65 72 61 67 65
	   20 76 61 6C 75
	   65 2C 20 61 6E
	   64 20 73 75 6D
	   2E 0D 0A 0D 0A
 000000D5  49 74 20 77 69						BYTE		"It will do this without using any Irvine procedures to read/write numbers, but will instead convert inputted strings to numbers using an algorithm.",13,10,13,10
	   6C 6C 20 64 6F
	   20 74 68 69 73
	   20 77 69 74 68
	   6F 75 74 20 75
	   73 69 6E 67 20
	   61 6E 79 20 49
	   72 76 69 6E 65
	   20 70 72 6F 63
	   65 64 75 72 65
	   73 20 74 6F 20
	   72 65 61 64 2F
	   77 72 69 74 65
	   20 6E 75 6D 62
	   65 72 73 2C 20
	   62 75 74 20 77
	   69 6C 6C 20 69
	   6E 73 74 65 61
	   64 20 63 6F 6E
	   76 65 72 74 20
	   69 6E 70 75 74
	   74 65 64 20 73
	   74 72 69 6E 67
	   73 20 74 6F 20
	   6E 75 6D 62 65
	   72 73 20 75 73
	   69 6E 67 20 61
	   6E 20 61 6C 67
	   6F 72 69 74 68
	   6D 2E 0D 0A 0D
	   0A
 0000016C  41 66 74 65 72						BYTE		"After storing these numbers to an array, it will use another algorithm to convert these numbers back to strings to be displayed to the console.  ",13,10,13,10
	   20 73 74 6F 72
	   69 6E 67 20 74
	   68 65 73 65 20
	   6E 75 6D 62 65
	   72 73 20 74 6F
	   20 61 6E 20 61
	   72 72 61 79 2C
	   20 69 74 20 77
	   69 6C 6C 20 75
	   73 65 20 61 6E
	   6F 74 68 65 72
	   20 61 6C 67 6F
	   72 69 74 68 6D
	   20 74 6F 20 63
	   6F 6E 76 65 72
	   74 20 74 68 65
	   73 65 20 6E 75
	   6D 62 65 72 73
	   20 62 61 63 6B
	   20 74 6F 20 73
	   74 72 69 6E 67
	   73 20 74 6F 20
	   62 65 20 64 69
	   73 70 6C 61 79
	   65 64 20 74 6F
	   20 74 68 65 20
	   63 6F 6E 73 6F
	   6C 65 2E 20 20
	   0D 0A 0D 0A
 00000201  45 61 63 68 20						BYTE		"Each number must be able to fit within a 32 bit register, or be between the values of -2,147,483,648 and 2,147,483,647 inclusive (or -2^31 to 2^31-1).",13,10,13,10,0
	   6E 75 6D 62 65
	   72 20 6D 75 73
	   74 20 62 65 20
	   61 62 6C 65 20
	   74 6F 20 66 69
	   74 20 77 69 74
	   68 69 6E 20 61
	   20 33 32 20 62
	   69 74 20 72 65
	   67 69 73 74 65
	   72 2C 20 6F 72
	   20 62 65 20 62
	   65 74 77 65 65
	   6E 20 74 68 65
	   20 76 61 6C 75
	   65 73 20 6F 66
	   20 2D 32 2C 31
	   34 37 2C 34 38
	   33 2C 36 34 38
	   20 61 6E 64 20
	   32 2C 31 34 37
	   2C 34 38 33 2C
	   36 34 37 20 69
	   6E 63 6C 75 73
	   69 76 65 20 28
	   6F 72 20 2D 32
	   5E 33 31 20 74
	   6F 20 32 5E 33
	   31 2D 31 29 2E
	   0D 0A 0D 0A 00

 0000029C 00000000		userString_len		DWORD		?
 000002A0 00000000		temp_num			SDWORD		?
 000002A4 00000000		temp_num2			SDWORD		?
 000002A8 00000000		rounded_avg			SDWORD		?
 000002AC 00000000		sum_all_nums		SDWORD		?

 000002B0 00000000		IntegerArray_len	DWORD		0				;num elements
 000002B4 00000001		IntegerArray_len2	DWORD		1				;num elements
 000002B8  00000032 [		userString			BYTE		50 DUP(?)		;10 digit string, +1 for + or neg sign; +1 for null terminator
	    00
	   ]
 000002EA  00000020 [		temp_string			BYTE		32 DUP(?)
	    00
	   ]
 0000030A  00000020 [		temp_string2		BYTE		32 DUP(?)
	    00
	   ]
 0000032A  0000000A [		IntegerArray		SDWORD		10 DUP(?)
	    00000000
	   ]
 00000352  0000000A [		StringArray			SDWORD		10 DUP(?)
	    00000000
	   ]
 0000037A 00000032		userString_max_len	DWORD		LENGTHOF userString

 0000037E 50 6C 65 61 73	num_prompt			BYTE		"Please enter a signed number between -2^31 and 2^31-1: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 20 62
	   65 74 77 65 65
	   6E 20 2D 32 5E
	   33 31 20 61 6E
	   64 20 32 5E 33
	   31 2D 31 3A 20
	   00
 000003B6 45 72 72 6F 72	Error_no_input		BYTE		"Error!  You didn't enter in any numbers.",0 
	   21 20 20 59 6F
	   75 20 64 69 64
	   6E 27 74 20 65
	   6E 74 65 72 20
	   69 6E 20 61 6E
	   79 20 6E 75 6D
	   62 65 72 73 2E
	   00
 000003DF 45 72 72 6F 72	Error_char_num		BYTE		"Error!  You can only enter numbers, and the plus or minus sign.",0 
	   21 20 20 59 6F
	   75 20 63 61 6E
	   20 6F 6E 6C 79
	   20 65 6E 74 65
	   72 20 6E 75 6D
	   62 65 72 73 2C
	   20 61 6E 64 20
	   74 68 65 20 70
	   6C 75 73 20 6F
	   72 20 6D 69 6E
	   75 73 20 73 69
	   67 6E 2E 00
 0000041F 45 72 72 6F 72	Error_sign_use		BYTE		"Error!  You can only enter the plus or minus sign at the beginning of the number.",0 
	   21 20 20 59 6F
	   75 20 63 61 6E
	   20 6F 6E 6C 79
	   20 65 6E 74 65
	   72 20 74 68 65
	   20 70 6C 75 73
	   20 6F 72 20 6D
	   69 6E 75 73 20
	   73 69 67 6E 20
	   61 74 20 74 68
	   65 20 62 65 67
	   69 6E 6E 69 6E
	   67 20 6F 66 20
	   74 68 65 20 6E
	   75 6D 62 65 72
	   2E 00
 00000471 45 72 72 6F 72	Error_too_large		BYTE		"Error!  Your number must be between the ranges of-2,147,483,648 and 2,147,483,647 inclusive (or -2^31 and 2^31-1).",0 
	   21 20 20 59 6F
	   75 72 20 6E 75
	   6D 62 65 72 20
	   6D 75 73 74 20
	   62 65 20 62 65
	   74 77 65 65 6E
	   20 74 68 65 20
	   72 61 6E 67 65
	   73 20 6F 66 2D
	   32 2C 31 34 37
	   2C 34 38 33 2C
	   36 34 38 20 61
	   6E 64 20 32 2C
	   31 34 37 2C 34
	   38 33 2C 36 34
	   37 20 69 6E 63
	   6C 75 73 69 76
	   65 20 28 6F 72
	   20 2D 32 5E 33
	   31 20 61 6E 64
	   20 32 5E 33 31
	   2D 31 29 2E 00
 000004E4 59 6F 75 20 65	display_1			BYTE		"You entered the following numbers: ",0 
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 20
	   00
 00000508 54 68 65 20 73	display_2			BYTE		"The sum of all numbers entered is: ",0 
	   75 6D 20 6F 66
	   20 61 6C 6C 20
	   6E 75 6D 62 65
	   72 73 20 65 6E
	   74 65 72 65 64
	   20 69 73 3A 20
	   00
 0000052C 54 68 65 20 74	display_3			BYTE		"The truncated average of all numbers entered is: ",0 
	   72 75 6E 63 61
	   74 65 64 20 61
	   76 65 72 61 67
	   65 20 6F 66 20
	   61 6C 6C 20 6E
	   75 6D 62 65 72
	   73 20 65 6E 74
	   65 72 65 64 20
	   69 73 3A 20 00
 0000055E 54 68 61 6E 6B	goodbye				BYTE		"Thanks for using my program!  Goodbye.",0
	   73 20 66 6F 72
	   20 75 73 69 6E
	   67 20 6D 79 20
	   70 72 6F 67 72
	   61 6D 21 20 20
	   47 6F 6F 64 62
	   79 65 2E 00
 00000585 2C 20 00		comma_string		BYTE		", ",0

 00000000			.code
 00000000			main PROC

					;THIS PROGRAM DOES NOT USE GLOBAL VARIABLES BUT PASSES VARIABLE TO PROCEDURES ON THE STACK
					;VARIABLE USED IN THE PROCEDURES ARE NOT GLOBAL; THEY ARE LOCAL VARIABLES USED FOR PROGRAM READABILITY



					;display program prompts and info to the user using the mDisplayString macro
					mDisplayString		OFFSET program_info_1
 00000000  52		     1		PUSH				EDX							  ;Save EDX register
 00000001  BA 00000000 R     1		MOV					EDX, OFFSET program_info_1
 00000006  E8 00000000 E     1		CALL				WriteString
 0000000B  5A		     1		POP					EDX							  ;Restore EDX
					mDisplayString		OFFSET program_info_2	
 0000000C  52		     1		PUSH				EDX							  ;Save EDX register
 0000000D  BA 00000053 R     1		MOV					EDX, OFFSET program_info_2
 00000012  E8 00000000 E     1		CALL				WriteString
 00000017  5A		     1		POP					EDX							  ;Restore EDX
					


 00000018  B9 0000000A			MOV ECX, 10
					;loop to get 10 numbers from the user as strings, converted to an array of numbers from ASCII manually
 0000001D			_InputNumberLoop:

 0000001D  68 000002A4 R		PUSH				OFFSET temp_num2
 00000022  68 00000471 R		PUSH				OFFSET Error_too_large
 00000027  68 000002B0 R		PUSH				OFFSET IntegerArray_len
 0000002C  68 0000032A R		PUSH				OFFSET IntegerArray
 00000031  68 000002A0 R		PUSH				OFFSET temp_num
 00000036  68 0000029C R		PUSH				OFFSET userString_len
 0000003B  68 000003B6 R		PUSH				OFFSET Error_no_input
 00000040  68 000003DF R		PUSH				OFFSET Error_char_num
 00000045  68 0000041F R		PUSH				OFFSET Error_sign_use
 0000004A  FF 35 0000037A R		PUSH				userString_max_len
 00000050  68 000002B8 R		PUSH				OFFSET userString
 00000055  68 0000037E R		PUSH				OFFSET num_prompt
 0000005A  E8 00000124			CALL				ReadVal

 0000005F  E2 BC		LOOP _InputNumberLoop

					
					;calc sum
 00000061  68 000002AC R		PUSH				OFFSET sum_all_nums
 00000066  68 000002B0 R		PUSH				OFFSET IntegerArray_len
 0000006B  68 0000032A R		PUSH				OFFSET IntegerArray
 00000070  E8 000004CB			CALL				CalculateSum	

					;calc average
 00000075  68 000002A8 R		PUSH				OFFSET rounded_avg
 0000007A  68 000002AC R		PUSH				OFFSET sum_all_nums
 0000007F  68 000002B0 R		PUSH				OFFSET IntegerArray_len
 00000084  E8 000004E9			CALL				CalculateAverage	

					;display numbers entered by user
 00000089  E8 00000000 E		CALL				CrLf
					mDisplayString		OFFSET display_1
 0000008E  52		     1		PUSH				EDX							  ;Save EDX register
 0000008F  BA 000004E4 R     1		MOV					EDX, OFFSET display_1
 00000094  E8 00000000 E     1		CALL				WriteString
 00000099  5A		     1		POP					EDX							  ;Restore EDX
 0000009A  E8 00000000 E		CALL				CrLf
 0000009F  E8 00000594			CALL				setTextColorGreen	
 000000A4  68 00000585 R		PUSH				OFFSET comma_string
 000000A9  68 0000030A R		PUSH				OFFSET temp_string2
 000000AE  68 000002EA R		PUSH				OFFSET temp_string
 000000B3  68 00000352 R		PUSH				OFFSET StringArray
 000000B8  68 000002B0 R		PUSH				OFFSET IntegerArray_len
 000000BD  68 0000032A R		PUSH				OFFSET IntegerArray
 000000C2  E8 000004DF			CALL				WriteVal
 000000C7  E8 0000055F			CALL				setTextColorWhite		

					;display text prompt before sum is displayed
 000000CC  E8 00000000 E		CALL				CrLf
 000000D1  E8 00000000 E		CALL				CrLf
					mDisplayString		OFFSET display_2	
 000000D6  52		     1		PUSH				EDX							  ;Save EDX register
 000000D7  BA 00000508 R     1		MOV					EDX, OFFSET display_2
 000000DC  E8 00000000 E     1		CALL				WriteString
 000000E1  5A		     1		POP					EDX							  ;Restore EDX
 000000E2  E8 00000551			CALL				setTextColorGreen	
 000000E7  E8 00000000 E		CALL				CrLf
					
					;display sum of numbers entered by user
 000000EC  68 00000585 R		PUSH				OFFSET comma_string
 000000F1  68 0000030A R		PUSH				OFFSET temp_string2
 000000F6  68 000002EA R		PUSH				OFFSET temp_string
 000000FB  68 00000352 R		PUSH				OFFSET StringArray
 00000100  68 000002B4 R		PUSH				OFFSET IntegerArray_len2
 00000105  68 000002AC R		PUSH				OFFSET sum_all_nums
 0000010A  E8 00000497			CALL				WriteVal
 0000010F  E8 00000517			CALL				setTextColorWhite	

					;display text prompt before truncated average is displayed
 00000114  E8 00000000 E		CALL				CrLf
 00000119  E8 00000000 E		CALL				CrLf
					mDisplayString		OFFSET display_3	
 0000011E  52		     1		PUSH				EDX							  ;Save EDX register
 0000011F  BA 0000052C R     1		MOV					EDX, OFFSET display_3
 00000124  E8 00000000 E     1		CALL				WriteString
 00000129  5A		     1		POP					EDX							  ;Restore EDX
 0000012A  E8 00000509			CALL				setTextColorGreen	
 0000012F  E8 00000000 E		CALL				CrLf

					;display truncated average of numbers entered by user
 00000134  68 00000585 R		PUSH				OFFSET comma_string
 00000139  68 0000030A R		PUSH				OFFSET temp_string2
 0000013E  68 000002EA R		PUSH				OFFSET temp_string
 00000143  68 00000352 R		PUSH				OFFSET StringArray
 00000148  68 000002B4 R		PUSH				OFFSET IntegerArray_len2
 0000014D  68 000002A8 R		PUSH				OFFSET rounded_avg
 00000152  E8 0000044F			CALL				WriteVal	
					

					;display the farewell message
 00000157  E8 000004CF			CALL				setTextColorWhite	
 0000015C  E8 00000000 E		CALL				CrLf
 00000161  E8 00000000 E		CALL				CrLf
					mDisplayString		OFFSET goodbye	
 00000166  52		     1		PUSH				EDX							  ;Save EDX register
 00000167  BA 0000055E R     1		MOV					EDX, OFFSET goodbye
 0000016C  E8 00000000 E     1		CALL				WriteString
 00000171  5A		     1		POP					EDX							  ;Restore EDX
 00000172  E8 00000000 E		CALL				CrLf
 00000177  E8 00000000 E		CALL				CrLf




					Invoke ExitProcess,0	; exit to operating system
 0000017C  6A 00	   *	    push   +000000000h
 0000017E  E8 00000000 E   *	    call   ExitProcess
 00000183			main ENDP


				; =======================================================================================================================================================
				; Name:				ReadVal
				;
				; Description:		-This procedure invokes the mGetString macro to prompt the user to numbers as strings into the console.  It then has an inner loop that 
				;					 repeatedly calls the ConvertASCIItoNum procedure based on how many characters the user entered.  After receiving on the stack the number
				;					 converted from the string representation the user entered from the ConvertASCIItoNum procedure ,it repeately multiplies the number received
				;					 by 10, to slowly build the actual numerical representation of the string given.  After this, it saves the numerical value into a SDWORD 
				;					 array of integers.  
				;
				; Preconditions:	-none
				;
				; Postconditions:	-none
				;
				; Receives:			-The temp string output variable by reference, max size of string, and output by reference for the number of characters the user enters. 
				;					 This output of characters this output of characters entered is used to test if the user entered nothing into the console or too large
				;					 of a number for a 32 bit signed register.
				;
				; Returns:			-Returns by reference a string, and the number of characters entered by the user by reference, so that global variable are updated.
				;
				; =======================================================================================================================================================
 00000183			ReadVal PROC

				;*****************************************************************************************************************************************************
				;	1) Invoke the mGetString macro to get user input in the form of a string of digits	
				;*****************************************************************************************************************************************************

					LOCAL StringMaxLen:DWORD, StringRef:DWORD, NumsEntered:DWORD, sign:DWORD, numTemp:DWORD, returnValueAscii:SDWORD, arrayelements:DWORD, messagePrompt:DWORD
 00000183  55		   *	    push   ebp
 00000184  8B EC	   *	    mov    ebp, esp
 00000186  83 C4 E0	   *	    add    esp, 0FFFFFFE0h
 00000189  60				PUSHAD

 0000018A  C7 45 F0			MOV					sign, 1
	   00000001
 00000191  8B 45 0C			MOV					eax, [EBP + 12]
 00000194  89 45 F8			MOV					StringRef, eax
 00000197  8B 45 10			MOV					eax, [EBP + 16]	
 0000019A  89 45 FC			MOV					StringMaxLen, eax		


 0000019D			_PromptUserInput:

 0000019D  8B 55 34			MOV					edx, [EBP + 52]	
 000001A0  89 55 F4			MOV					NumsEntered, edx										   ;output variable to hold nums entered
										
 000001A3  8B 55 08			MOV					edx,[EBP + 8]
 000001A6  89 55 E0			MOV					messagePrompt, edx										   ;prompt num	

				    mGetString			StringRef, StringMaxLen, NumsEntered, messagePrompt 	   ;pass string output by ref, size by value, and nums entered by ref to macro
 000001A9  52		     1		PUSH				EDX							; Save EDX register
 000001AA  51		     1		PUSH				ECX
 000001AB  50		     1		PUSH				EAX
 000001AC  52		     2		PUSH				EDX							  ;Save EDX register
 000001AD  8B 55 E0	     2		MOV					EDX, messagePrompt
 000001B0  E8 00000000 E     2		CALL				WriteString
 000001B5  5A		     2		POP					EDX							  ;Restore EDX
 000001B6  8B 55 F8	     1		MOV					EDX,  StringRef				; Buffer is where output string by ref is saved to
 000001B9  8B 4D FC	     1		MOV					ECX,  [StringMaxLen]
 000001BC  E8 00000477	     1		CALL				setTextColorGreen	
 000001C1  E8 00000000 E     1		CALL				ReadString
 000001C6  E8 00000460	     1		CALL				setTextColorWhite
 000001CB  8B 4D F4	     1		MOV					ecx, NumsEntered
 000001CE  89 01	     1		MOV					[ecx], EAX
 000001D0  58		     1		POP					EAX
 000001D1  59		     1		POP					ECX							  ; Restore EDX
 000001D2  5A		     1		POP					EDX							  ; Restore ECX

 000001D3  8B 55 34			MOV					edx, [EBP + 52]	
 000001D6  8B 12			MOV					edx, [edx]
 000001D8  89 55 F4			MOV					NumsEntered, edx										   ;output variable from macro to local variable





					
				;*****************************************************************************************************************************************************
				;	2) Convert (USING STRING PRIMITIVES) the string of ASCII digits to its numeric value representation (SDWORD).
				;   validating each char is a valid # (not symbol)                                                                
				;*****************************************************************************************************************************************************


 000001DB  8B 4D F4			MOV					ECX, NumsEntered				; test if no nums entered using local variable
 000001DE  83 F9 00			CMP					ECX, 0
 000001E1  74 76			jz					_noInputError
 000001E3  83 F9 0B			CMP					ECX, 11
 000001E6  0F 8F 000000FF		jg					_numTooLargeError
 000001EC  8B 75 F8			MOV					ESI, StringRef					; if nums were entered, then start loop
 000001EF  8B 4D FC			MOV					ECX, StringMaxLen				; test if no nums entered using local variable
 000001F2  C7 45 EC			MOV					numTemp, 0
	   00000000


				;==================LOOP TO CONVERT STRING STARTS HERE======================================================================================
 000001F9			_convertString:	
 000001F9  AC				LODSB												; takes ESI and copies to AL, then increment ESI to next element
 000001FA  3C 00			CMP					AL, 0
 000001FC  0F 84 000000B1		jz					_FinishedConvertingtoNum
 00000202  3C 30			CMP					AL, 48							; nums are from 48 to 57; + is 43 and - is 45
 00000204  7C 06			jl					_checkifSign	
 00000206  3C 39			CMP					AL, 57
 00000208  7F 36			jg					_NotNumError
 0000020A  EB 0A			jmp					_Convert	


 0000020C			_checkifSign:
 0000020C  3C 2B			CMP					AL, 43							; + sign
 0000020E  74 62			jz					_TestifFirstDigitPlus
 00000210  3C 2D			CMP					AL, 45							; - sign
 00000212  74 72			jz					_TestifFirstDigitMinus
 00000214  EB 2A			jmp					_NotNumError

 00000216			_Convert:
 00000216  FF 75 24			PUSH				[EBP + 36]						; temp return variable from ConvertASCIItoNum
 00000219  50				PUSH				EAX								; this pushes AL and garbage values
 0000021A  E8 00000114			CALL				ConvertASCIItoNum	
					
 0000021F  8B 45 EC			MOV					EAX, numTemp					; tempNum to hold digits


 00000222			_ConvertResume:

 00000222  BB 0000000A			MOV					ebx, 10							; Multiply the number repeatedly by 10 to build up the number digit by digit from the string
 00000227  F7 E3			mul					ebx								; multiply by 10 then loop
 00000229  50				push				eax								; save multiplied numTemp

 0000022A  8B 5D 24			MOV					ebx, [EBP + 36]		
 0000022D  8B 03			MOV					eax, [ebx]						; return variable from ConvertASCIItoNum
 0000022F  89 45 E8			MOV					returnValueAscii, eax			; save return variable from ConvertASCIItoNum

 00000232  58				pop					eax								; restore multipled value to eax
 00000233  01 45 E8			add					returnValueAscii, eax			; add to return variable

 00000236  8B 45 E8			MOV					eax, returnValueAscii			; move num so far to eax
 00000239  89 45 EC			MOV					numTemp, EAX					; save to numTemp for next loop


 0000023C			_NextLoop:
					
 0000023C  E2 BB			loop				_ConvertString
 0000023E  EB 73			jmp					_FinishedConvertingtoNum
				;==================LOOP TO CONVERT STRING ENDS HERE========================================================================================



				;Errors and testing if + or - if first char
 00000240			_NotNumError:
					
					mDisplayString		[EBP + 24]				; not num string
 00000240  52		     1		PUSH				EDX							  ;Save EDX register
 00000241  8B 55 18	     1		MOV					EDX, [EBP + 24]
 00000244  E8 00000000 E     1		CALL				WriteString
 00000249  5A		     1		POP					EDX							  ;Restore EDX
 0000024A  E8 00000000 E		call				CrLf
 0000024F  E8 00000000 E		call				CrLF
 00000254  E9 FFFFFF44			jmp					_PromptUserInput


 00000259			_noInputError:
					mDisplayString		[EBP + 28]				; no input string
 00000259  52		     1		PUSH				EDX							  ;Save EDX register
 0000025A  8B 55 1C	     1		MOV					EDX, [EBP + 28]
 0000025D  E8 00000000 E     1		CALL				WriteString
 00000262  5A		     1		POP					EDX							  ;Restore EDX
 00000263  E8 00000000 E		call				CrLf
 00000268  E8 00000000 E		call				CrLF
 0000026D  E9 FFFFFF2B			jmp					_PromptUserInput

 00000272			_TestifFirstDigitPlus:
 00000272  83 7D F4 01			CMP					NumsEntered, 1
 00000276  74 E1			jz					_noInputError
 00000278  39 4D FC			CMP					StringMaxLen, ECX
 0000027B  75 1D			jnz					_signNotFirstError
 0000027D  C7 45 F0			MOV					sign, 1	
	   00000001
 00000284  EB B6			jmp					_NextLoop


 00000286			_TestifFirstDigitMinus:
 00000286  83 7D F4 01			CMP					NumsEntered, 1
 0000028A  74 CD			jz					_noInputError
 0000028C  39 4D FC			CMP					StringMaxLen, ECX
 0000028F  75 09			jnz					_signNotFirstError
 00000291  C7 45 F0			MOV					sign, 2					; local variable set as negative
	   00000002
 00000298  EB A2			jmp					_NextLoop

 0000029A			_signNotFirstError:
					mDisplayString		[EBP + 20]				; prompt num	
 0000029A  52		     1		PUSH				EDX							  ;Save EDX register
 0000029B  8B 55 14	     1		MOV					EDX, [EBP + 20]
 0000029E  E8 00000000 E     1		CALL				WriteString
 000002A3  5A		     1		POP					EDX							  ;Restore EDX
 000002A4  E8 00000000 E		call				CrLf
 000002A9  E8 00000000 E		call				CrLF
 000002AE  E9 FFFFFEEA			jmp					_PromptUserInput




				;*****************************************************************************************************************************************************
				;	3) Store this one value in a memory variable (output paratmeter, by reference).                                                              
				;*****************************************************************************************************************************************************

 000002B3			_FinishedConvertingtoNum:
					
 000002B3  83 7D F0 02			CMP					sign, 2
 000002B7  74 13			jz					_testNegativetooLarge
 000002B9  EB 24			jmp					_testPositivetooLarge
					

 000002BB			_convertNumtoNegative:
 000002BB  8B 45 E8			MOV					eax, returnValueAscii  
 000002BE  F7 5D E8			neg					returnValueAscii
 000002C1  8B 45 E8			MOV					eax, returnValueAscii  
 000002C4  89 45 E8			MOV					returnValueAscii, eax 
 000002C7  8B 45 E8			MOV					EAX, returnValueAscii	
 000002CA  EB 3F			jmp					_storeNumtoArray


 000002CC			_testNegativetooLarge:
 000002CC  8B 45 E8			MOV					EAX, returnValueAscii	
 000002CF  3D 80000000			CMP					EAX, 2147483648
 000002D4  77 15			ja					_numTooLargeError
 000002D6  3D 80000000			CMP					EAX, 2147483648
 000002DB  74 2E			jz					_storeNumtoArray	; for edge case if exactly 2,147,483,648 will convert to - automatically due to SDWORD local variable
 000002DD  EB DC			jmp					_convertNumtoNegative


 000002DF			_testPositivetooLarge:
 000002DF  8B 45 E8			MOV					EAX, returnValueAscii	
 000002E2  3D 7FFFFFFF			CMP					EAX, 2147483647
 000002E7  77 02			ja					_numTooLargeError
 000002E9  EB 20			jmp					_storeNumtoArray

 000002EB			_numTooLargeError:
					mDisplayString		[EBP + 48]	
 000002EB  52		     1		PUSH				EDX							  ;Save EDX register
 000002EC  8B 55 30	     1		MOV					EDX, [EBP + 48]
 000002EF  E8 00000000 E     1		CALL				WriteString
 000002F4  5A		     1		POP					EDX							  ;Restore EDX
 000002F5  E8 00000000 E		call				CrLf
 000002FA  E8 00000000 E		call				CrLF
 000002FF  C7 45 F0			mov					sign, 1
	   00000001
 00000306  E9 FFFFFE92			jmp					_PromptUserInput	
					


 0000030B			_storeNumtoArray:

 0000030B  8B 75 28			MOV					ESI, [EBP + 40]				    ; offset of int array		
 0000030E  8B 45 2C			MOV					EAX, [EBP + 44]					; offset IntegerArray length variable to track how many elements are in array
 00000311  8B 00			MOV					EAX, [EAX]
 00000313  89 45 E4			MOV					arrayelements, EAX				; local variable
 00000316  BB 00000004			MOV					EBX, 4
 0000031B  F7 E3			mul					EBX	
 0000031D  8B 4D E8			MOV					ECX, returnValueAscii
 00000320  89 0C 06			MOV					[ESI + EAX], ECX				; store num in int array + offset to put in the last postion of the array

 00000323  8B 7D 2C			MOV					EDI, [EBP + 44]
 00000326  FF 45 E4			inc					arrayelements
 00000329  8B 45 E4			MOV					eax, arrayelements
 0000032C  89 07			MOV					[EDI], eax						;store count of array elements


 0000032E  61				POPAD
 0000032F  C9		   *	    leave  
 00000330  C2 002C			RET 44									


 00000333			ReadVal ENDP



				; =======================================================================================================================================================
				; Name:				ConvertASCIItoNum
				;
				; Description:		-This procedure invokes converts an ASCII character of a number to an actual number.  It then returns it as an output variable.
				;					 It is only called by the ReadVal function.  It is separated from the ReadVal function to modularize the program.  Its parameters
				;					 are passed to it on the stack by the ReadVal function to avoid using globals.
				;
				; Preconditions:	-none
				;
				; Postconditions:	-none
				;
				; Receives:			-The the input string of a num passed to it on the stack.  Also receives the output variable where the actual num will be returned
				;					 to the ReadVal function.
				;
				; Returns:			-Returns
				;
				; =======================================================================================================================================================
 00000333			ConvertASCIItoNum PROC
					
					LOCAL numText:BYTE 
 00000333  55		   *	    push   ebp
 00000334  8B EC	   *	    mov    ebp, esp
 00000336  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 00000339  60				PUSHAD

 0000033A  8B 45 08			MOV EAX,			[EBP + 8]			; input variable - string number passed into the entire EAX register
 0000033D  8B 5D 0C			MOV EBX,			[EBP + 12]			; output variable by reference

 00000340  88 45 FF			MOV					numText, AL			; moves the lower portion (AL) of the EAX register to be used to decide what digit to convert the ASCII to


 00000343  80 7D FF 30			CMP					numText, 48
 00000347  74 36			jz					_zero
 00000349  80 7D FF 31			CMP					numText, 49
 0000034D  74 37			jz					_one
 0000034F  80 7D FF 32			CMP					numText, 50
 00000353  74 38			jz					_two
 00000355  80 7D FF 33			CMP					numText, 51
 00000359  74 39			jz					_three
 0000035B  80 7D FF 34			CMP					numText, 52
 0000035F  74 3A			jz					_four
 00000361  80 7D FF 35			CMP					numText, 53
 00000365  74 3B			jz					_five
 00000367  80 7D FF 36			CMP					numText, 54
 0000036B  74 3C			jz					_six
 0000036D  80 7D FF 37			CMP					numText, 55
 00000371  74 3D			jz					_seven
 00000373  80 7D FF 38			CMP					numText, 56
 00000377  74 3E			jz					_eight
 00000379  80 7D FF 39			CMP					numText, 57
 0000037D  74 3F			jz					_nine


 0000037F			_zero:
 0000037F  B8 00000000			MOV					EAX, 0
 00000384  EB 3F			jmp					_return

 00000386			_one:
 00000386  B8 00000001			MOV					EAX, 1
 0000038B  EB 38			jmp					_return

 0000038D			_two:
 0000038D  B8 00000002			MOV					EAX, 2
 00000392  EB 31			jmp					_return

 00000394			_three:
 00000394  B8 00000003			MOV					EAX, 3
 00000399  EB 2A			jmp					_return

 0000039B			_four:
 0000039B  B8 00000004			MOV					EAX, 4
 000003A0  EB 23			jmp					_return

 000003A2			_five:
 000003A2  B8 00000005			MOV					EAX, 5
 000003A7  EB 1C			jmp					_return

 000003A9			_six:
 000003A9  B8 00000006			MOV					EAX, 6
 000003AE  EB 15			jmp					_return

 000003B0			_seven:
 000003B0  B8 00000007			MOV					EAX, 7
 000003B5  EB 0E			jmp					_return

 000003B7			_eight:
 000003B7  B8 00000008			MOV					EAX, 8
 000003BC  EB 07			jmp					_return

 000003BE			_nine:
 000003BE  B8 00000009			MOV					EAX, 9
 000003C3  EB 00			jmp					_return



 000003C5			_return:
 000003C5  89 03			MOV					[EBX],EAX	; move result to output variable that was stored in EBX above.  Now ASCII num character is an actual num
					
 000003C7  61				POPAD
 000003C8  C9		   *	    leave  
 000003C9  C2 0008			ret 8							; dereference variables so that num can be passed back to the ReadVal function

 000003CC			ConvertASCIItoNum ENDP


				; =======================================================================================================================================================
				; Name:				ConvertNumtoASCII
				;
				; Description:		-This is passed an integer by reference.  It repeatedly divides this integer by 10 to obtain its digits.  It adds each remainder after
				;					 the division by 10 to a string, then adds a null terminator.  It then reverses the string using string primitives so that it is in the
				;					 original order the number was entered in by the user (as a string).
				;
				; Preconditions:	-none
				;
				; Postconditions:	-none
				;
				; Receives:			-Offsets of the two output strings needed by reference.  One to hold the string being created after multiple divisions by 10, the other
				;					 to hold the reversed string.  Also receives the integer by reference to be divided.  Does not receive length, stops when both the quotient
				;					 and the remainder are both zero.  Due to this, has a special case to handle being given a number that is exactly zero.
				;
				; Returns:			-Returns
				;
				; =======================================================================================================================================================
 000003CC			ConvertNumtoASCII PROC
					
					 ; parameter order:  integer value, temp string 1, tempstring2

					LOCAL num:DWORD, quotient:DWORD, remainder:DWORD, newStringLen:DWORD, negativeFlag:DWORD, num2:SDWORD
 000003CC  55		   *	    push   ebp
 000003CD  8B EC	   *	    mov    ebp, esp
 000003CF  83 C4 E8	   *	    add    esp, 0FFFFFFE8h
 000003D2  60				PUSHAD

 000003D3  C7 45 EC			MOV					negativeFlag, 1
	   00000001

 000003DA  B9 00000020			MOV					ecx, 32
 000003DF  8B 7D 0C			MOV					EDI, [EBP + 12]		; temp string1 offset from stack

 000003E2			_ClearString_one:
 000003E2  B8 00000000			MOV					EAX, 0
 000003E7  89 07			MOV					[EDI], EAX
 000003E9  83 C7 01			add					EDI, 1
 000003EC  E2 F4			loop				_ClearString_one


					
 000003EE  B9 00000020			MOV					ecx, 32
 000003F3  8B 7D 10			MOV					EDI, [EBP + 16]		; temp string 2 offset from stack

 000003F6			_ClearString_two:
 000003F6  B8 00000000			MOV					EAX, 0
 000003FB  89 07			MOV					[EDI], EAX
 000003FD  83 C7 01			add					EDI, 1
 00000400  E2 F4			loop				_ClearString_two



 00000402  8B 7D 0C			MOV					EDI, [EBP + 12]		; temp string offset from stack
 00000405  8B 45 08			MOV					EAX, [EBP + 8]		; integer from stack

 00000408  89 45 E8			MOV					num2, EAX
 0000040B  C7 45 F0			MOV					newStringLen, 0
	   00000000

 00000412  3D 80000000			cmp				    EAX, 2147483648		;edge case
 00000417  74 02			jz					_numNegativeinArrayEdgeCase
 00000419  EB 14			jmp					_skipEdgeCase

 0000041B			_numNegativeinArrayEdgeCase:
 0000041B  B8 80000000			mov				    EAX, 2147483648		;edge case
 00000420  89 45 E8			mov					num2, EAX
 00000423  89 45 FC			mov					num, EAX
 00000426  C7 45 EC			MOV					negativeFlag, 2
	   00000002
 0000042D  EB 29		    jmp					_MainConversionLoop

 0000042F			_skipEdgeCase:

					;test if number is negative, if so we need to reverse it and add a negative sign in front
 0000042F  83 F8 00			CMP					EAX, 0
 00000432  7C 11			jl					_numIsNegativeInvert
 00000434  83 F8 00			CMP					EAX, 0
 00000437  0F 84 000000B3		jz					_NumisJustZero
 0000043D  8B 45 E8			mov					eax, num2
 00000440  89 45 FC			mov					num, eax
 00000443  EB 13			jmp					_MainConversionLoop


					;test if number is just zero

 00000445			_numIsNegativeInvert:
					
 00000445  89 45 E8			mov					num2, eax
 00000448  F7 5D E8			neg					num2
 0000044B  8B 45 E8			mov					eax, num2
 0000044E  89 45 FC			mov					num, eax
 00000451  C7 45 EC			MOV					negativeFlag, 2
	   00000002



 00000458			_MainConversionLoop:
					;need to repeatedly divide by 10, multiply by zeros until no remainder left, then reverse string array created.

 00000458  8B 45 FC			MOV					EAX, num
 0000045B  99				CDQ 
 0000045C  BB 0000000A			MOV					ebx, 10
 00000461  F7 FB			IDIV				ebx
 00000463  89 45 F8			MOV					quotient, EAX
 00000466  89 55 F4			MOV					remainder, EDX

 00000469  83 7D F4 00			CMP					remainder, 0
 0000046D  7F 15			jg					_remainderExists
 0000046F  83 7D F8 00			CMP					quotient, 0
 00000473  7F 05			jg					_Quotient						; if no quotient and remainder
 00000475  E9 00000095			jmp					_AddTERMINATOR


 0000047A			_Quotient:
 0000047A  B8 00000000			MOV					EAX, 0
 0000047F  89 45 FC			MOV					num, EAX
 00000482  EB 08			jmp					_startNumConversion

 00000484			_remainderExists:
 00000484  8B 45 F4			MOV					EAX, remainder
 00000487  89 45 FC			MOV					num, EAX
 0000048A  EB 00			jmp					_startNumConversion


 0000048C			_startNumConversion:
 0000048C  83 7D FC 00			CMP					num, 0
 00000490  74 36			jz					_zero_num
 00000492  83 7D FC 01			CMP					num, 1
 00000496  74 34			jz					_one_num
 00000498  83 7D FC 02			CMP					num, 2
 0000049C  74 32			jz					_two_num
 0000049E  83 7D FC 03			CMP					num, 3
 000004A2  74 30			jz					_three_num
 000004A4  83 7D FC 04			CMP					num, 4
 000004A8  74 2E			jz					_four_num
 000004AA  83 7D FC 05			CMP					num, 5
 000004AE  74 2C			jz					_five_num
 000004B0  83 7D FC 06			CMP					num, 6
 000004B4  74 2A			jz					_six_num
 000004B6  83 7D FC 07			CMP					num, 7
 000004BA  74 28			jz					_seven_num
 000004BC  83 7D FC 08			CMP					num, 8
 000004C0  74 26			jz					_eight_num
 000004C2  83 7D FC 09			CMP					num, 9
 000004C6  74 24			jz					_nine_num


 000004C8			_zero_num:
 000004C8  B0 30			MOV					AL, 48 
 000004CA  EB 30			jmp					add_num_to_string

 000004CC			_one_num:
 000004CC  B0 31			MOV					AL, 49 
 000004CE  EB 2C			jmp					add_num_to_string

 000004D0			_two_num:
 000004D0  B0 32			MOV					AL, 50 
 000004D2  EB 28			jmp					add_num_to_string

 000004D4			_three_num:
 000004D4  B0 33			MOV					AL, 51 
 000004D6  EB 24			jmp					add_num_to_string

 000004D8			_four_num:
 000004D8  B0 34			MOV					AL, 52
 000004DA  EB 20			jmp					add_num_to_string

 000004DC			_five_num:
 000004DC  B0 35			MOV					AL, 53 
 000004DE  EB 1C			jmp					add_num_to_string

 000004E0			_six_num:
 000004E0  B0 36			MOV					AL, 54 
 000004E2  EB 18			jmp					add_num_to_string

 000004E4			_seven_num:
 000004E4  B0 37			MOV					AL, 55 
 000004E6  EB 14			jmp					add_num_to_string

 000004E8			_eight_num:
 000004E8  B0 38			MOV					AL, 56
 000004EA  EB 10			jmp					add_num_to_string

 000004EC			_nine_num:
 000004EC  B0 39			MOV					AL, 57 
 000004EE  EB 0C			jmp					add_num_to_string

 000004F0			_NumisJustZero:
 000004F0  B0 30			MOV					AL, 48
 000004F2  88 07			MOV					[EDI], AL				; move result to output variable
 000004F4  83 C7 01			add					EDI, 1					; increment
 000004F7  FF 45 F0			inc					newStringLen
 000004FA  EB 13			jmp					_AddTERMINATOR

 000004FC			add_num_to_string:
 000004FC  88 07			MOV					[EDI], AL				; move result to output variable
 000004FE  83 C7 01			add					EDI, 1					; increment
 00000501  8B 45 F8			MOV					EAX, quotient
 00000504  89 45 FC			MOV					num, EAX
 00000507  FF 45 F0			inc					newStringLen
 0000050A  E9 FFFFFF49			jmp					_MainConversionLoop


 0000050F			_AddTERMINATOR:
 0000050F  B0 00			MOV					AL, 0
 00000511  88 07			MOV					[EDI], AL				; move result to output variable
 00000513  FF 45 F0			inc					newStringLen


 00000516			_FinishConvertingNumtoString:

					;NEED TO REVERSE STRING AFTERWARDS
 00000516  8B 4D F0			MOV					ECX, newStringLen
 00000519  8B 75 0C			MOV					ESI, [EBP + 12]			; temp string offset from stack
 0000051C  03 F1			add					ESI, ECX				; so source strings starts from end
 0000051E  4E				dec					ESI
 0000051F  4E				dec					ESI
 00000520  8B 7D 10			MOV					EDI, [EBP + 16]			; temp string offset2 from stack
					
 00000523  83 7D EC 02			CMP					negativeFlag, 2
 00000527  74 02			jz					_addNegativeSignBeforeReversal
 00000529  EB 0A			jmp					_revLoop

 0000052B			_addNegativeSignBeforeReversal:
 0000052B  B8 0000002D			MOV					EAX, 45
 00000530  89 07			MOV					[EDI], EAX				; temp string offset2 from stack
 00000532  83 C7 01			add					edi, 1

 00000535			_revLoop:										;reference StringManipulator.asm from canvas
 00000535  FD				STD
 00000536  AC				LODSB
 00000537  FC				CLD
 00000538  AA				STOSB
 00000539  E2 FA			LOOP				_revLoop



 0000053B  61				POPAD
 0000053C  C9		   *	    leave  
 0000053D  C2 000C			ret 12

 00000540			ConvertNumtoASCII ENDP


				; =======================================================================================================================================================
				; Name:				CalculateSum
				;
				; Description:		-This procedure calculates the sum of all integers entered by the user in the integer array passed into it by reference.
				;
				; Preconditions:	-none
				;
				; Postconditions:	-none
				;
				; Receives:			-Integer array length, integer array of nums entered by the user by reference, and output variable for the sum by reference.
				;
				; Returns:			-Returns 
				;
				; =======================================================================================================================================================
 00000540			CalculateSum PROC
					LOCAL num:SDWORD 
 00000540  55		   *	    push   ebp
 00000541  8B EC	   *	    mov    ebp, esp
 00000543  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 00000546  60				PUSHAD

 00000547  C7 45 FC			MOV					num, 0
	   00000000

 0000054E  8B 4D 0C			MOV					ECX, [EBP + 12]		; OFFSET IntegerArray_len
 00000551  8B 09			MOV					ECX, [ECX]
 00000553  8B 7D 08			MOV					EDI, [EBP + 8]		; OFFSET IntegerArray

 00000556			_SumLoop:	
 00000556  8B 07			MOV					EAX, [EDI]
 00000558  8B 5D FC			MOV					EBX, num
 0000055B  03 C3			add					EAX, EBX
 0000055D  89 45 FC			MOV					num, EAX
 00000560  83 C7 04			add					EDI, 4

 00000563  E2 F1			LOOP				_SumLoop

					
 00000565  8B 45 10			MOV					EAX, [EBP + 16]		; OFFSET sum_all_nums
 00000568  8B 5D FC			MOV					EBX, num
 0000056B  89 18			MOV					[EAX], EBX


 0000056D  61				POPAD
 0000056E  C9		   *	    leave  
 0000056F  C2 000C			ret 12

 00000572			CalculateSum ENDP


				; =======================================================================================================================================================
				; Name:				CalculateAverage
				;
				; Description:		-This procedure calculates the average of all integers entered by the user.
				;
				; Preconditions:	-none
				;
				; Postconditions:	-none
				;
				; Receives:			-Integer array length, sum of all numbers input variable by reference, and output variable for the average by reference.
				;
				; Returns:			-Returns 
				;
				; =======================================================================================================================================================
 00000572			CalculateAverage PROC
					LOCAL num:SDWORD, quotient:SDWORD, remainder:SDWORD, divisor:DWORD, dividend: SDWORD ;,doubledRemainder:SDWORD, 
 00000572  55		   *	    push   ebp
 00000573  8B EC	   *	    mov    ebp, esp
 00000575  83 C4 EC	   *	    add    esp, 0FFFFFFECh
 00000578  60				PUSHAD

 00000579  C7 45 FC			MOV					num, 0
	   00000000
 00000580  8B 4D 08			MOV					ECX, [EBP + 8]		; OFFSET IntegerArray_len
 00000583  8B 09			MOV					ECX, [ECX]
 00000585  89 4D F0			MOV					divisor, ECX
 00000588  8B 45 0C			MOV					EAX, [EBP + 12]		; OFFSET sum_all_nums
 0000058B  8B 00			MOV					EAX, [EAX]
 0000058D  89 45 EC			MOV					dividend, EAX
 00000590  99				CDQ
 00000591  F7 F9			IDIV				ECX

 00000593  89 45 F8			MOV					quotient, EAX
 00000596  89 55 F4			MOV					remainder, EDX
				;
				; ***********COMMENTED OUT AS PROJECT INSTRUCTIONS CHANGED FROM ROUNDING TO TRUNCATION - REFERENCE ED DISCUSSION 1661642****************
				;
				;	MOV EAX, remainder
				;	MOV EBX, 2
				;	mul EBX
				;	MOV doubledRemainder, EAX
				;
				;
				;	CMP dividend, 0
				;	jl	_testNegativeRounding
				;	jmp _testPositiveRounding
				;
				;_testNegativeRounding:
				;	CMP EAX, dividend
				;	jle _roundNegativeDown
				;	jmp _saveValue
				;
				;_testPositiveRounding:
				;	CMP EAX, dividend
				;	jge _roundPositiveUp
				;	jmp _saveValue
				;
				;_roundPositiveUp:	
				;	inc quotient
				;	jmp _saveValue
				;
				;_roundNegativeDown:
				;	dec quotient

 00000599			_saveValue:

 00000599  8B 45 10			MOV					EAX, [EBP + 16]		; OFFSET rounded_avg
 0000059C  8B 5D F8			MOV					EBX, quotient
 0000059F  89 18			MOV					[EAX], ebx	


 000005A1  61				POPAD
 000005A2  C9		   *	    leave  
 000005A3  C2 000C			ret 12

 000005A6			CalculateAverage ENDP


				; =======================================================================================================================================================
				; Name:				WriteVal
				;
				; Description:		-This procedure converts a numeric SDWORD value, input parameter by reference, to a string of ASCII digits manually.  It also 
				;					 invokes the mGetString macro to print the converted value to the console for the user.  It prints out commas if there are multiple values.
				;
				;					-It calls a procedure called "ConvertNumtoASCII", and passes parameters on the stack to it to modularize the program.  This procedure
				;					 repeatedly divides the number by 10 and adds the reaminder as a string to a string array, then reverses the string.
				;
				; Preconditions:	-none
				;
				; Postconditions:	-none
				;
				; Receives:			-
				;
				; Returns:			-Returns 
				;
				; =======================================================================================================================================================
 000005A6			WriteVal PROC

					LOCAL num:SDWORD, arrayLengthNum:SDWORD, integerArrayReference:SDWORD
 000005A6  55		   *	    push   ebp
 000005A7  8B EC	   *	    mov    ebp, esp
 000005A9  83 C4 F4	   *	    add    esp, 0FFFFFFF4h
 000005AC  60				PUSHAD

 000005AD  8B 4D 0C			MOV					ECX, [EBP + 12]					; OFFSET integer array length from stack for LOOP counter
 000005B0  8B 09			MOV					ECX, [ECX]
 000005B2  89 4D F8			MOV					arrayLengthNum, ECX
 000005B5  8B 75 08			MOV					ESI, [EBP + 8]					; OFFSET integer array from stack
 000005B8  89 75 F4			MOV					integerArrayReference, ESI


 000005BB			_convertLoop:
 000005BB  8B 45 18			MOV					EAX, [EBP + 24]					; OFFSET temp_string2 RETURN VARIABLE from stack	
 000005BE  50				PUSH				EAX								; push temp_string for ConvertNumtoASCII proc

 000005BF  8B 45 14			MOV					EAX, [EBP + 20]					; OFFSET temp_string RETURN VARIABLE from stack	
 000005C2  50				PUSH				EAX								; push temp_string for ConvertNumtoASCII proc

 000005C3  8B 1E			MOV					EBX, [ESI]						; save value in EBX
 000005C5  53				PUSH				EBX								; push int from integer array by value for ConvertNumtoASCII proc

 000005C6  E8 FFFFFE01			CALL				ConvertNumtoASCII				; parameter order: return string, int by val

 000005CB  8B 45 18			MOV					EAX, [EBP + 24]					; access return value from stack that ConvertNumtoASCII used with temp string
					
 000005CE  89 45 FC			MOV					num, EAX
					mDisplayString		num
 000005D1  52		     1		PUSH				EDX							  ;Save EDX register
 000005D2  8B 55 FC	     1		MOV					EDX, num
 000005D5  E8 00000000 E     1		CALL				WriteString
 000005DA  5A		     1		POP					EDX							  ;Restore EDX

 000005DB  83 F9 01			CMP					ECX, 1
 000005DE  74 0C			jz					_noComma

 000005E0			_writeComma:	
 000005E0  8B 45 1C			MOV					EAX, [EBP + 28]					;comma string
					mDisplayString		EAX
 000005E3  52		     1		PUSH				EDX							  ;Save EDX register
 000005E4  8B D0	     1		MOV					EDX, EAX
 000005E6  E8 00000000 E     1		CALL				WriteString
 000005EB  5A		     1		POP					EDX							  ;Restore EDX

 000005EC			_noComma:
 000005EC  83 C6 04			add					ESI, 4							; increment int array
 000005EF  E2 CA			LOOP				_convertLoop
					
					
 000005F1  61				POPAD
 000005F2  C9		   *	    leave  
 000005F3  C2 0018			ret 24



 000005F6			WriteVal ENDP


				; =======================================================================================================================================================
				;			*****THIS PROCEDURE IS NOT USED.  THIS WAS BEFORE I REALIZED THAT THE READSTRING IRVINE PROC CAN COUNT THE CHARACTERS ENTERED*******
				;
				; Name:				getStringLen
				;
				; Description:		-This procedure converts a numeric SDWORD value, input parameter by reference, to a string of ASCII digits manually.  It also 
				;					 invokes the mGetString macro to print the converted value to the console for the user.  It prints out commas if there are multiple values.
				;
				; Preconditions:	-none
				;
				; Postconditions:	-none
				;
				; Receives:			-
				;
				; Returns:			-Returns 
				;
				; =======================================================================================================================================================
 000005F6			getStringLen PROC
					
					LOCAL StringLen:DWORD
 000005F6  55		   *	    push   ebp
 000005F7  8B EC	   *	    mov    ebp, esp
 000005F9  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 000005FC  60				PUSHAD

 000005FD  B9 0000001E			MOV					ECX, 30				; max length for counter
 00000602  8B 75 0C			MOV					ESI, [EBP + 12]		; output ref

 00000605  C7 45 FC			MOV					StringLen, 0
	   00000000
					
 0000060C			_countLoop:
 0000060C  AC				LODSB	
 0000060D  3C 00			CMP					AL, 0
 0000060F  7E 0D			jle					_end
 00000611  3C 2B			CMP					AL, 43				; + sign
 00000613  74 07			jz					_nocount
 00000615  3C 2D			CMP					AL, 45				; - sign
 00000617  74 03			jz					_nocount
 00000619  FF 45 FC			inc					StringLen

 0000061C			_nocount:
 0000061C  E2 EE			loop				_countLoop
					
 0000061E			_end:	
 0000061E  8B 45 FC			MOV					EAX, StringLen		; LOCAL VARIABLE
 00000621  8B 55 10			MOV					EDX, [EBP + 16] 	; move count to output variable
 00000624  89 02			MOV					[EDX], EAX 			; move count to output variable
					
 00000626  61				POPAD
 00000627  C9		   *	    leave  
 00000628  C2 000C			ret 12

 0000062B			getStringLen ENDP


				; =======================================================================================================================================================
				; Name:	setTextColorWhite
				; Procedure to change console text to white.  Preserves all general-purpose registers.
				; Preconditions: none
				; Postconditions: none
				; Receives: none
				; Returns:  none
				; =======================================================================================================================================================
 0000062B			setTextColorWhite PROC
 0000062B  60				pushad
 0000062C  B8 0000000F			MOV					eax, white 
 00000631  E8 00000000 E		call				SetTextColor
 00000636  61				popad
 00000637  C3				ret
 00000638			setTextColorWhite ENDP


				; =======================================================================================================================================================
				; Name:	setTextColorGreen
				; Procedure to change console text to green. Preserves all general-purpose registers.
				; Preconditions: none
				; Postconditions: none
				; Receives: none
				; Returns:  none
				; =======================================================================================================================================================
 00000638			setTextColorGreen PROC	
 00000638  60				pushad
 00000639  B8 00000002			MOV					eax, green 
 0000063E  E8 00000000 E		call				SetTextColor
 00000643  61				popad
 00000644  C3				ret
 00000645			setTextColorGreen ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30133.0	    08/07/22 15:31:01
<Project 6 - String Primitives and Macros      (Proj6_iwanek  Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000588 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000645 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CalculateAverage . . . . . . . .	P Near	 00000572 _TEXT	Length= 00000034 Public STDCALL
  num  . . . . . . . . . . . . .	DWord	 bp - 00000004
  quotient . . . . . . . . . . .	DWord	 bp - 00000008
  remainder  . . . . . . . . . .	DWord	 bp - 0000000C
  divisor  . . . . . . . . . . .	DWord	 bp - 00000010
  dividend . . . . . . . . . . .	DWord	 bp - 00000014
  _saveValue . . . . . . . . . .	L Near	 00000599 _TEXT	
CalculateSum . . . . . . . . . .	P Near	 00000540 _TEXT	Length= 00000032 Public STDCALL
  num  . . . . . . . . . . . . .	DWord	 bp - 00000004
  _SumLoop . . . . . . . . . . .	L Near	 00000556 _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ConvertASCIItoNum  . . . . . . .	P Near	 00000333 _TEXT	Length= 00000099 Public STDCALL
  numText  . . . . . . . . . . .	Byte	 bp - 00000001
  _zero  . . . . . . . . . . . .	L Near	 0000037F _TEXT	
  _one . . . . . . . . . . . . .	L Near	 00000386 _TEXT	
  _two . . . . . . . . . . . . .	L Near	 0000038D _TEXT	
  _three . . . . . . . . . . . .	L Near	 00000394 _TEXT	
  _four  . . . . . . . . . . . .	L Near	 0000039B _TEXT	
  _five  . . . . . . . . . . . .	L Near	 000003A2 _TEXT	
  _six . . . . . . . . . . . . .	L Near	 000003A9 _TEXT	
  _seven . . . . . . . . . . . .	L Near	 000003B0 _TEXT	
  _eight . . . . . . . . . . . .	L Near	 000003B7 _TEXT	
  _nine  . . . . . . . . . . . .	L Near	 000003BE _TEXT	
  _return  . . . . . . . . . . .	L Near	 000003C5 _TEXT	
ConvertNumtoASCII  . . . . . . .	P Near	 000003CC _TEXT	Length= 00000174 Public STDCALL
  num  . . . . . . . . . . . . .	DWord	 bp - 00000004
  quotient . . . . . . . . . . .	DWord	 bp - 00000008
  remainder  . . . . . . . . . .	DWord	 bp - 0000000C
  newStringLen . . . . . . . . .	DWord	 bp - 00000010
  negativeFlag . . . . . . . . .	DWord	 bp - 00000014
  num2 . . . . . . . . . . . . .	DWord	 bp - 00000018
  _ClearString_one . . . . . . .	L Near	 000003E2 _TEXT	
  _ClearString_two . . . . . . .	L Near	 000003F6 _TEXT	
  _numNegativeinArrayEdgeCase  .	L Near	 0000041B _TEXT	
  _skipEdgeCase  . . . . . . . .	L Near	 0000042F _TEXT	
  _numIsNegativeInvert . . . . .	L Near	 00000445 _TEXT	
  _MainConversionLoop  . . . . .	L Near	 00000458 _TEXT	
  _Quotient  . . . . . . . . . .	L Near	 0000047A _TEXT	
  _remainderExists . . . . . . .	L Near	 00000484 _TEXT	
  _startNumConversion  . . . . .	L Near	 0000048C _TEXT	
  _zero_num  . . . . . . . . . .	L Near	 000004C8 _TEXT	
  _one_num . . . . . . . . . . .	L Near	 000004CC _TEXT	
  _two_num . . . . . . . . . . .	L Near	 000004D0 _TEXT	
  _three_num . . . . . . . . . .	L Near	 000004D4 _TEXT	
  _four_num  . . . . . . . . . .	L Near	 000004D8 _TEXT	
  _five_num  . . . . . . . . . .	L Near	 000004DC _TEXT	
  _six_num . . . . . . . . . . .	L Near	 000004E0 _TEXT	
  _seven_num . . . . . . . . . .	L Near	 000004E4 _TEXT	
  _eight_num . . . . . . . . . .	L Near	 000004E8 _TEXT	
  _nine_num  . . . . . . . . . .	L Near	 000004EC _TEXT	
  _NumisJustZero . . . . . . . .	L Near	 000004F0 _TEXT	
  add_num_to_string  . . . . . .	L Near	 000004FC _TEXT	
  _AddTERMINATOR . . . . . . . .	L Near	 0000050F _TEXT	
  _FinishConvertingNumtoString .	L Near	 00000516 _TEXT	
  _addNegativeSignBeforeReversal .	L Near	 0000052B _TEXT	
  _revLoop . . . . . . . . . . .	L Near	 00000535 _TEXT	
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000183 _TEXT	Length= 000001B0 Public STDCALL
  StringMaxLen . . . . . . . . .	DWord	 bp - 00000004
  StringRef  . . . . . . . . . .	DWord	 bp - 00000008
  NumsEntered  . . . . . . . . .	DWord	 bp - 0000000C
  sign . . . . . . . . . . . . .	DWord	 bp - 00000010
  numTemp  . . . . . . . . . . .	DWord	 bp - 00000014
  returnValueAscii . . . . . . .	DWord	 bp - 00000018
  arrayelements  . . . . . . . .	DWord	 bp - 0000001C
  messagePrompt  . . . . . . . .	DWord	 bp - 00000020
  _PromptUserInput . . . . . . .	L Near	 0000019D _TEXT	
  _convertString . . . . . . . .	L Near	 000001F9 _TEXT	
  _checkifSign . . . . . . . . .	L Near	 0000020C _TEXT	
  _Convert . . . . . . . . . . .	L Near	 00000216 _TEXT	
  _ConvertResume . . . . . . . .	L Near	 00000222 _TEXT	
  _NextLoop  . . . . . . . . . .	L Near	 0000023C _TEXT	
  _NotNumError . . . . . . . . .	L Near	 00000240 _TEXT	
  _noInputError  . . . . . . . .	L Near	 00000259 _TEXT	
  _TestifFirstDigitPlus  . . . .	L Near	 00000272 _TEXT	
  _TestifFirstDigitMinus . . . .	L Near	 00000286 _TEXT	
  _signNotFirstError . . . . . .	L Near	 0000029A _TEXT	
  _FinishedConvertingtoNum . . .	L Near	 000002B3 _TEXT	
  _convertNumtoNegative  . . . .	L Near	 000002BB _TEXT	
  _testNegativetooLarge  . . . .	L Near	 000002CC _TEXT	
  _testPositivetooLarge  . . . .	L Near	 000002DF _TEXT	
  _numTooLargeError  . . . . . .	L Near	 000002EB _TEXT	
  _storeNumtoArray . . . . . . .	L Near	 0000030B _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 000005A6 _TEXT	Length= 00000050 Public STDCALL
  num  . . . . . . . . . . . . .	DWord	 bp - 00000004
  arrayLengthNum . . . . . . . .	DWord	 bp - 00000008
  integerArrayReference  . . . .	DWord	 bp - 0000000C
  _convertLoop . . . . . . . . .	L Near	 000005BB _TEXT	
  _writeComma  . . . . . . . . .	L Near	 000005E0 _TEXT	
  _noComma . . . . . . . . . . .	L Near	 000005EC _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
getStringLen . . . . . . . . . .	P Near	 000005F6 _TEXT	Length= 00000035 Public STDCALL
  StringLen  . . . . . . . . . .	DWord	 bp - 00000004
  _countLoop . . . . . . . . . .	L Near	 0000060C _TEXT	
  _nocount . . . . . . . . . . .	L Near	 0000061C _TEXT	
  _end . . . . . . . . . . . . .	L Near	 0000061E _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000183 Public STDCALL
  _InputNumberLoop . . . . . . .	L Near	 0000001D _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
setTextColorGreen  . . . . . . .	P Near	 00000638 _TEXT	Length= 0000000D Public STDCALL
setTextColorWhite  . . . . . . .	P Near	 0000062B _TEXT	Length= 0000000D Public STDCALL
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
Error_char_num . . . . . . . . .	Byte	 000003DF _DATA	
Error_no_input . . . . . . . . .	Byte	 000003B6 _DATA	
Error_sign_use . . . . . . . . .	Byte	 0000041F _DATA	
Error_too_large  . . . . . . . .	Byte	 00000471 _DATA	
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
IntegerArray_len2  . . . . . . .	DWord	 000002B4 _DATA	
IntegerArray_len . . . . . . . .	DWord	 000002B0 _DATA	
IntegerArray . . . . . . . . . .	DWord	 0000032A _DATA	
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
StringArray  . . . . . . . . . .	DWord	 00000352 _DATA	
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
comma_string . . . . . . . . . .	Byte	 00000585 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
display_1  . . . . . . . . . . .	Byte	 000004E4 _DATA	
display_2  . . . . . . . . . . .	Byte	 00000508 _DATA	
display_3  . . . . . . . . . . .	Byte	 0000052C _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 0000055E _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
num_prompt . . . . . . . . . . .	Byte	 0000037E _DATA	
program_info_1 . . . . . . . . .	Byte	 00000000 _DATA	
program_info_2 . . . . . . . . .	Byte	 00000053 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
rounded_avg  . . . . . . . . . .	DWord	 000002A8 _DATA	
sum_all_nums . . . . . . . . . .	DWord	 000002AC _DATA	
temp_num2  . . . . . . . . . . .	DWord	 000002A4 _DATA	
temp_num . . . . . . . . . . . .	DWord	 000002A0 _DATA	
temp_string2 . . . . . . . . . .	Byte	 0000030A _DATA	
temp_string  . . . . . . . . . .	Byte	 000002EA _DATA	
userString_len . . . . . . . . .	DWord	 0000029C _DATA	
userString_max_len . . . . . . .	DWord	 0000037A _DATA	
userString . . . . . . . . . . .	Byte	 000002B8 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
