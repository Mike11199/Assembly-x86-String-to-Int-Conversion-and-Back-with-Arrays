Microsoft (R) Macro Assembler Version 14.29.30133.0	    08/03/22 23:16:58
<Project 6 - String Primitives and Macros      (Proj6_iwanek  Page 1 - 1


				TITLE Project 6 - String Primitives and Macros      (Proj6_iwanekm.asm)

				;--------------------------------------------------------------------------------------------------------------------------------------------------
				; Author:					Michael Iwanek
				; Last Modified:			08/01/2022
				; OSU email address:		iwanekm@oregonstate.edu
				; Course number/section:	CS271 Section 400
				; Project Number:			06
				; Due Date:					08/07/2022
				;--------------------------------------------------------------------------------------------------------------------------------------------------
				; Description: 
				;--------------------------------------------------------------------------------------------------------------------------------------------------
				;			-This program 

				;--------------------------------------------------------------------------------------------------------------------------------------------------


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				mGetString	MACRO	buffer, buffer_size
					PUSH  EDX				;Save EDX register
					PUSH  ECX
					MOV   EDX,  buffer
					MOV   ECX,  [buffer_size]
					CALL  ReadString
					POP   EDX				;Restore EDX
					POP   ECX				;Restore ECX
				ENDM

				mDisplayString	MACRO	buffer
					PUSH  EDX				;Save EDX register
					MOV   EDX, buffer
					CALL  WriteString
					POP   EDX				;Restore EDX
				ENDM

				; (insert constant definitions here)

 00000000			.data
 00000000 48 65 6C 6C 6F	program_info_1		BYTE		"Hello!  Welcome to my program:  String Primitives and Macros by Michael Iwanek",13,10,13,10,0
	   21 20 20 57 65
	   6C 63 6F 6D 65
	   20 74 6F 20 6D
	   79 20 70 72 6F
	   67 72 61 6D 3A
	   20 20 53 74 72
	   69 6E 67 20 50
	   72 69 6D 69 74
	   69 76 65 73 20
	   61 6E 64 20 4D
	   61 63 72 6F 73
	   20 62 79 20 4D
	   69 63 68 61 65
	   6C 20 49 77 61
	   6E 65 6B 0D 0A
	   0D 0A 00
 00000053 50 6C 65 61 73	program_info_2		BYTE		"Please enter in 10 signed decimal integers.  This program will then display each number entered, their average value, and sum.",13,10
	   65 20 65 6E 74
	   65 72 20 69 6E
	   20 31 30 20 73
	   69 67 6E 65 64
	   20 64 65 63 69
	   6D 61 6C 20 69
	   6E 74 65 67 65
	   72 73 2E 20 20
	   54 68 69 73 20
	   70 72 6F 67 72
	   61 6D 20 77 69
	   6C 6C 20 74 68
	   65 6E 20 64 69
	   73 70 6C 61 79
	   20 65 61 63 68
	   20 6E 75 6D 62
	   65 72 20 65 6E
	   74 65 72 65 64
	   2C 20 74 68 65
	   69 72 20 61 76
	   65 72 61 67 65
	   20 76 61 6C 75
	   65 2C 20 61 6E
	   64 20 73 75 6D
	   2E 0D 0A
 000000D3  45 61 63 68 20						BYTE		"Each number must be able to fit within a 32 bit register, or be between the values of -2,147,483,647 and 2,147,483,647 inclusive (or +/- 2^31).",13,10,13,10,0
	   6E 75 6D 62 65
	   72 20 6D 75 73
	   74 20 62 65 20
	   61 62 6C 65 20
	   74 6F 20 66 69
	   74 20 77 69 74
	   68 69 6E 20 61
	   20 33 32 20 62
	   69 74 20 72 65
	   67 69 73 74 65
	   72 2C 20 6F 72
	   20 62 65 20 62
	   65 74 77 65 65
	   6E 20 74 68 65
	   20 76 61 6C 75
	   65 73 20 6F 66
	   20 2D 32 2C 31
	   34 37 2C 34 38
	   33 2C 36 34 37
	   20 61 6E 64 20
	   32 2C 31 34 37
	   2C 34 38 33 2C
	   36 34 37 20 69
	   6E 63 6C 75 73
	   69 76 65 20 28
	   6F 72 20 2B 2F
	   2D 20 32 5E 33
	   31 29 2E 0D 0A
	   0D 0A 00
 00000167  00000032 [		userString			BYTE		50 DUP(?)			;10 digit string, +1 for + or neg sign; +1 for null terminator
	    00
	   ]
 00000199 00000000		userString_len		DWORD		?
 0000019D 00000000		temp_num			SDWORD		?
 000001A1 00000000		temp_string			DWORD		?
 000001A5 00000032		userString_max_len	DWORD		LENGTHOF userString
 000001A9 50 6C 65 61 73	num_prompt			BYTE		"Please enter a signed number between -2^31 and 2^31: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 20 62
	   65 74 77 65 65
	   6E 20 2D 32 5E
	   33 31 20 61 6E
	   64 20 32 5E 33
	   31 3A 20 00
 000001DF  0000000A [		IntegerArray		SDWORD		10 DUP(?)
	    00000000
	   ]
 00000207 00000000		IntegerArray_len	DWORD		0 ;num elements
 0000020B 00000028		IntegerArray_size	DWORD		SIZEOF IntegerArray	   ;num bytes
 0000020F 45 72 72 6F 72	Error_no_input		BYTE		"Error!  You didn't enter in any numbers.",0 
	   21 20 20 59 6F
	   75 20 64 69 64
	   6E 27 74 20 65
	   6E 74 65 72 20
	   69 6E 20 61 6E
	   79 20 6E 75 6D
	   62 65 72 73 2E
	   00
 00000238 45 72 72 6F 72	Error_char_num		BYTE		"Error!  You can only enter numbers, and the plus or minus sign.",0 
	   21 20 20 59 6F
	   75 20 63 61 6E
	   20 6F 6E 6C 79
	   20 65 6E 74 65
	   72 20 6E 75 6D
	   62 65 72 73 2C
	   20 61 6E 64 20
	   74 68 65 20 70
	   6C 75 73 20 6F
	   72 20 6D 69 6E
	   75 73 20 73 69
	   67 6E 2E 00
 00000278 45 72 72 6F 72	Error_sign_use		BYTE		"Error!  You can only enter the plus or minus sign at the beginning of the number.",0 
	   21 20 20 59 6F
	   75 20 63 61 6E
	   20 6F 6E 6C 79
	   20 65 6E 74 65
	   72 20 74 68 65
	   20 70 6C 75 73
	   20 6F 72 20 6D
	   69 6E 75 73 20
	   73 69 67 6E 20
	   61 74 20 74 68
	   65 20 62 65 67
	   69 6E 6E 69 6E
	   67 20 6F 66 20
	   74 68 65 20 6E
	   75 6D 62 65 72
	   2E 00
 000002CA 45 72 72 6F 72	Error_too_large		BYTE		"Error!  Your number must be between the ranges of-2,147,483,647 and 2,147,483,647 inclusive (or +/- 2^31).",0 
	   21 20 20 59 6F
	   75 72 20 6E 75
	   6D 62 65 72 20
	   6D 75 73 74 20
	   62 65 20 62 65
	   74 77 65 65 6E
	   20 74 68 65 20
	   72 61 6E 67 65
	   73 20 6F 66 2D
	   32 2C 31 34 37
	   2C 34 38 33 2C
	   36 34 37 20 61
	   6E 64 20 32 2C
	   31 34 37 2C 34
	   38 33 2C 36 34
	   37 20 69 6E 63
	   6C 75 73 69 76
	   65 20 28 6F 72
	   20 2B 2F 2D 20
	   32 5E 33 31 29
	   2E 00
 00000335 59 6F 75 20 65	display_1			BYTE		"You entered the following numbers: ",0 
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 20
	   00
 00000359 54 68 65 20 73	display_2			BYTE		"The sum offset these numbers is: ",0 
	   75 6D 20 6F 66
	   66 73 65 74 20
	   74 68 65 73 65
	   20 6E 75 6D 62
	   65 72 73 20 69
	   73 3A 20 00
 0000037B 54 68 65 20 72	display_3			BYTE		"The rounded average is: ",0 
	   6F 75 6E 64 65
	   64 20 61 76 65
	   72 61 67 65 20
	   69 73 3A 20 00
 00000394 00000000		rounded_avg			SDWORD		?
 00000398 00000000		sum_all_nums		SDWORD		?


 00000000			.code
 00000000			main PROC

				; (insert executable instructions here)
					
					mDisplayString OFFSET program_info_1
 00000000  52		     1		PUSH  EDX				;Save EDX register
 00000001  BA 00000000 R     1		MOV   EDX, OFFSET program_info_1
 00000006  E8 00000000 E     1		CALL  WriteString
 0000000B  5A		     1		POP   EDX				;Restore EDX
					mDisplayString OFFSET program_info_2	
 0000000C  52		     1		PUSH  EDX				;Save EDX register
 0000000D  BA 00000053 R     1		MOV   EDX, OFFSET program_info_2
 00000012  E8 00000000 E     1		CALL  WriteString
 00000017  5A		     1		POP   EDX				;Restore EDX
					
 00000018  B9 0000000A			mov ECX, 10

 0000001D			_InputNumberLoop:

 0000001D  68 000002CA R		PUSH	OFFSET Error_too_large
 00000022  68 00000207 R		PUSH    OFFSET IntegerArray_len
 00000027  68 000001DF R		PUSH    OFFSET IntegerArray
 0000002C  68 0000019D R		PUSH    OFFSET temp_num
 00000031  68 00000199 R		PUSH    OFFSET userString_len
 00000036  68 0000020F R		PUSH	OFFSET Error_no_input
 0000003B  68 00000238 R		PUSH	OFFSET Error_char_num
 00000040  68 00000278 R		PUSH	OFFSET Error_sign_use
 00000045  FF 35 000001A5 R		PUSH    userString_max_len
 0000004B  68 00000167 R		PUSH	OFFSET userString
 00000050  68 000001A9 R		PUSH	OFFSET num_prompt
 00000055  E8 00000031			CALL	ReadVal

 0000005A  E2 C1		LOOP _InputNumberLoop

 0000005C  68 00000398 R		PUSH    OFFSET sum_all_nums
 00000061  68 00000207 R		PUSH    OFFSET IntegerArray_len
 00000066  68 000001DF R		PUSH    OFFSET IntegerArray
 0000006B  E8 0000030E			CALL CalculateSum	

 00000070  68 00000394 R		PUSH    OFFSET rounded_avg
 00000075  68 00000398 R		PUSH    OFFSET sum_all_nums
 0000007A  68 00000207 R		PUSH    OFFSET IntegerArray_len
 0000007F  E8 0000032C			CALL CalculateAverage	

					Invoke ExitProcess,0	; exit to operating system
 00000084  6A 00	   *	    push   +000000000h
 00000086  E8 00000000 E   *	    call   ExitProcess
 0000008B			main ENDP


 0000008B			ReadVal PROC

					;***************************************************************************************************************************
					;	1) Invoke the mGetString macro to get user input in the form of a string of digits	
					;***************************************************************************************************************************

					LOCAL StringMaxLen:DWORD, StringRef:DWORD, NumsEntered:DWORD, sign:DWORD, numTemp:DWORD, returnValueAscii:DWORD, arrayelements:DWORD
 0000008B  55		   *	    push   ebp
 0000008C  8B EC	   *	    mov    ebp, esp
 0000008E  83 C4 E4	   *	    add    esp, 0FFFFFFE4h
 00000091  60				PUSHAD

 00000092  8B 45 0C			mov eax, [EBP + 12]
 00000095  89 45 F8			mov StringRef, eax
 00000098  8B 45 10			mov eax, [EBP + 16]	
 0000009B  89 45 FC			mov StringMaxLen, eax

 0000009E			_PromptUserInput:

					mDisplayString [EBP + 8]				    ;prompt num	
 0000009E  52		     1		PUSH  EDX				;Save EDX register
 0000009F  8B 55 08	     1		MOV   EDX, [EBP + 8]
 000000A2  E8 00000000 E     1		CALL  WriteString
 000000A7  5A		     1		POP   EDX				;Restore EDX
				    mGetString StringRef, StringMaxLen			;pass (ref, size) to macro to get user string
 000000A8  52		     1		PUSH  EDX				;Save EDX register
 000000A9  51		     1		PUSH  ECX
 000000AA  8B 55 F8	     1		MOV   EDX,  StringRef
 000000AD  8B 4D FC	     1		MOV   ECX,  [StringMaxLen]
 000000B0  E8 00000000 E     1		CALL  ReadString
 000000B5  5A		     1		POP   EDX				;Restore EDX
 000000B6  59		     1		POP   ECX				;Restore ECX

					;======GET HOW MANY NUMBERS THE USER ENTERED=====================
 000000B7  FF 75 20			push [EBP + 32]				;push empty output variable by ref
 000000BA  FF 75 F8			push StringRef				;local variable
 000000BD  FF 75 FC			push StringMaxLen			;local variable
 000000C0  E8 00000152			CALL getStringLen			;get string len
					
 000000C5  8B 45 20			mov eax, [EBP + 32]	
 000000C8  8B 10			mov edx, [eax]
 000000CA  89 55 F4			mov NumsEntered, edx		;local variable to hold nums entered




					
					;***************************************************************************************************************************
					;	2) Convert (USING STRING PRIMITIVES) the string of ASCII digits to its numeric value representation (SDWORD).
					;   validating each char is a valid # (not symbol)                                                                
					;***************************************************************************************************************************

					
					;mov EDX, StringRef				;LOCAL VARIABLE - test delete
					;CALL WriteString				;test delete
					

 000000CD  8B 4D F4			mov ECX, NumsEntered			;test if no nums entered using local variable
 000000D0  83 F9 00			cmp ECX, 0
 000000D3  0F 84 00000081		jz _noInputError
 000000D9  83 F9 0A			cmp ECX, 10
 000000DC  0F 8F 000000E9		jg _numTooLargError
 000000E2  8B 75 F8			mov ESI, StringRef				;if nums were entered, then start loop
 000000E5  8B 4D FC			mov ECX, StringMaxLen			;test if no nums entered using local variable
 000000E8  C7 45 EC			mov numTemp, 0
	   00000000


				;==================LOOP TO CONVERT STRING STARTS HERE=====================================================
 000000EF			_convertString:	
 000000EF  AC				LODSB					;takes ESI and copies to AL, then increment ESI to next element
 000000F0  3C 00			cmp AL, 0
 000000F2  0F 84 000000B0		jz _FinishedConvertingtoNum
 000000F8  3C 30			cmp AL, 48				;nums are from 48 to 57; + is 43 and - is 45
 000000FA  7C 06			jl	_checkifSign	
 000000FC  3C 39			cmp AL, 57
 000000FE  7F 41			jg	_NotNumError
 00000100  EB 0A			jmp _Convert	


 00000102			_checkifSign:
 00000102  3C 2B			cmp AL, 43			; + sign
 00000104  74 6D			jz	_TestifFirstDigitPlus
 00000106  3C 2D			cmp AL, 45			; - sign
 00000108  74 77			jz	_TestifFirstDigitMinus
 0000010A  EB 35			jmp _NotNumError

 0000010C			_Convert:
 0000010C  FF 75 24			PUSH [EBP + 36]			 ;temp return variable from ConvertASCIItoNum
 0000010F  50				PUSH EAX				; this pushes AL and garbage values
 00000110  E8 00000137			CALL ConvertASCIItoNum	
					
 00000115  8B 45 EC			mov EAX, numTemp			; tempNum to hold digits

 00000118  3D 0CCCCCCC			cmp EAX, 214748364
 0000011D  0F 8F 000000A8		jg  _numTooLargError


 00000123  BB 0000000A			mov ebx, 10
 00000128  F7 E3			mul ebx						; multiply by 10 then loop
 0000012A  50				push eax					; save multiplied numTemp

 0000012B  8B 5D 24			mov ebx, [EBP + 36]		
 0000012E  8B 03			mov eax, [ebx]				; return variable from ConvertASCIItoNum
 00000130  89 45 E8			mov returnValueAscii, eax	; save return variable from ConvertASCIItoNum

 00000133  58				pop eax						; restore multipled value to eax
 00000134  01 45 E8			add returnValueAscii, eax	; add to return variable
 00000137  8B 45 E8			mov	eax, returnValueAscii	; move num so far to eax
 0000013A  89 45 EC			mov numTemp, EAX			; save to numTemp for next loop

 0000013D			_NextLoop:
					
 0000013D  E2 B0			loop _ConvertString
 0000013F  EB 67			jmp _FinishedConvertingtoNum
				;==================LOOP TO CONVERT STRING ENDS HERE=====================================================



				;Errors and testing if + or - if first char
 00000141			_NotNumError:
					
					mDisplayString [EBP + 24]				;not num string
 00000141  52		     1		PUSH  EDX				;Save EDX register
 00000142  8B 55 18	     1		MOV   EDX, [EBP + 24]
 00000145  E8 00000000 E     1		CALL  WriteString
 0000014A  5A		     1		POP   EDX				;Restore EDX
 0000014B  E8 00000000 E		call CrLf
 00000150  E8 00000000 E		call CrLF
 00000155  E9 FFFFFF44			jmp _PromptUserInput


 0000015A			_noInputError:
					mDisplayString [EBP + 28]				;no input string
 0000015A  52		     1		PUSH  EDX				;Save EDX register
 0000015B  8B 55 1C	     1		MOV   EDX, [EBP + 28]
 0000015E  E8 00000000 E     1		CALL  WriteString
 00000163  5A		     1		POP   EDX				;Restore EDX
 00000164  E8 00000000 E		call CrLf
 00000169  E8 00000000 E		call CrLF
 0000016E  E9 FFFFFF2B			jmp _PromptUserInput

 00000173			_TestifFirstDigitPlus:
 00000173  39 4D FC			cmp StringMaxLen, ECX
 00000176  75 17			jnz _signNotFirstError
 00000178  C7 45 F0			mov sign, 1	
	   00000001
 0000017F  EB BC			jmp _NextLoop


 00000181			_TestifFirstDigitMinus:
 00000181  39 4D FC			cmp StringMaxLen, ECX
 00000184  75 09			jnz _signNotFirstError
 00000186  C7 45 F0			mov sign, 2							; local variable set as negative
	   00000002
 0000018D  EB AE			jmp _NextLoop

 0000018F			_signNotFirstError:
					mDisplayString [EBP + 20]				;prompt num	
 0000018F  52		     1		PUSH  EDX				;Save EDX register
 00000190  8B 55 14	     1		MOV   EDX, [EBP + 20]
 00000193  E8 00000000 E     1		CALL  WriteString
 00000198  5A		     1		POP   EDX				;Restore EDX
 00000199  E8 00000000 E		call CrLf
 0000019E  E8 00000000 E		call CrLF
 000001A3  E9 FFFFFEF6			jmp _PromptUserInput




					;***************************************************************************************************************************
					;	3) Store this one value in a memory variable (output paratmeter, by reference).                                                              
					;***************************************************************************************************************************

 000001A8			_FinishedConvertingtoNum:
					
 000001A8  83 7D F0 02			cmp sign, 2
 000001AC  74 02			jz _convertNumtoNegative
 000001AE  EB 08			jmp _testIfNumtooLarge
					

 000001B0			_convertNumtoNegative:
 000001B0  8B 45 E8			mov eax, returnValueAscii  
 000001B3  F7 D8			neg eax
 000001B5  89 45 E8			mov returnValueAscii, eax 


 000001B8			_testIfNumtooLarge:
 000001B8  8B 45 E8			mov EAX, returnValueAscii	
 000001BB  3D 7FFFFFFF			cmp EAX, 2147483647
 000001C0  7F 09			jg	_numTooLargError
 000001C2  3D 80000001			cmp EAX, -2147483647
 000001C7  7C 02			jl	_numTooLargError
 000001C9  EB 19			jmp _storeNumtoArray

 000001CB			_numTooLargError:
					mDisplayString [EBP + 48]	
 000001CB  52		     1		PUSH  EDX				;Save EDX register
 000001CC  8B 55 30	     1		MOV   EDX, [EBP + 48]
 000001CF  E8 00000000 E     1		CALL  WriteString
 000001D4  5A		     1		POP   EDX				;Restore EDX
 000001D5  E8 00000000 E		call CrLf
 000001DA  E8 00000000 E		call CrLF
 000001DF  E9 FFFFFEBA			jmp _PromptUserInput	
					


 000001E4			_storeNumtoArray:


 000001E4  8B 45 E8			mov eax, returnValueAscii				; test delete
 000001E7  83 C0 05			add eax, 5								; test delete to add num
 000001EA  E8 00000000 E		call writeint							; test to show added num

 000001EF  8B 75 28			mov     ESI, [EBP + 40]				    ; offset of int array		
 000001F2  8B 45 2C			MOV		EAX, [EBP + 44]					; offset IntegerArray length variable to track how many elements are in array
 000001F5  8B 00			mov		EAX, [EAX]
 000001F7  89 45 E4			mov		arrayelements, EAX				; local variable
 000001FA  BB 00000004			mov		EBX, 4
 000001FF  F7 E3			mul		EBX	
 00000201  8B 4D E8			mov		ECX, returnValueAscii
 00000204  89 0C 06			mov		[ESI + EAX], ECX				; store num in int array + offset to put in the last postion of the array

 00000207  8B 7D 2C			mov		EDI, [EBP + 44]
 0000020A  FF 45 E4			inc		arrayelements
 0000020D  8B 45 E4			mov		eax, arrayelements
 00000210  89 07			MOV	    [EDI], eax				;store count of array elements


 00000212  61				POPAD
 00000213  C9		   *	    leave  
 00000214  C2 002C			RET 44					; dereference passed parameters


 00000217			ReadVal ENDP



 00000217			WriteVal PROC












 00000217			WriteVal ENDP



 00000217			getStringLen PROC
					
					LOCAL StringLen:DWORD
 00000217  55		   *	    push   ebp
 00000218  8B EC	   *	    mov    ebp, esp
 0000021A  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 0000021D  60				PUSHAD

 0000021E  B9 0000001E			mov ECX, 30				;max length for counter
 00000223  8B 75 0C			mov ESI, [EBP + 12]		;output ref

 00000226  C7 45 FC			mov StringLen, 0
	   00000000
					
 0000022D			_countLoop:
 0000022D  AC				LODSB	
 0000022E  3C 00			cmp AL, 0
 00000230  7E 0D			jle _end
 00000232  3C 2B			cmp AL, 43			; + sign
 00000234  74 07			jz _nocount
 00000236  3C 2D			cmp AL, 45			; - sign
 00000238  74 03			jz _nocount
 0000023A  FF 45 FC			inc StringLen

 0000023D			_nocount:
 0000023D  E2 EE			loop _countLoop
					
 0000023F			_end:
					
 0000023F  8B 45 FC			mov EAX, StringLen		;LOCAL VARIABLE
 00000242  8B 55 10			mov EDX, [EBP + 16] 	;move count to output variable
 00000245  89 02			mov [EDX], EAX 			;move count to output variable
					
 00000247  61				POPAD
 00000248  C9		   *	    leave  
 00000249  C2 000C			ret 12

 0000024C			getStringLen ENDP



 0000024C			ConvertASCIItoNum PROC
					
					LOCAL numText:BYTE 
 0000024C  55		   *	    push   ebp
 0000024D  8B EC	   *	    mov    ebp, esp
 0000024F  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 00000252  60				PUSHAD

 00000253  8B 45 08			mov EAX, [EBP + 8]		;whole EAX register
 00000256  8B 5D 0C			mov EBX, [EBP + 12]		;output variable

 00000259  88 45 FF			mov numText, AL		;technically comparing AL here


 0000025C  80 7D FF 30			cmp numText, 48
 00000260  74 36			jz _zero
 00000262  80 7D FF 31			cmp numText, 49
 00000266  74 37			jz _one
 00000268  80 7D FF 32			cmp numText, 50
 0000026C  74 38			jz _two
 0000026E  80 7D FF 33			cmp numText, 51
 00000272  74 39			jz _three
 00000274  80 7D FF 34			cmp numText, 52
 00000278  74 3A			jz _four
 0000027A  80 7D FF 35			cmp numText, 53
 0000027E  74 3B			jz _five
 00000280  80 7D FF 36			cmp numText, 54
 00000284  74 3C			jz _six
 00000286  80 7D FF 37			cmp numText, 55
 0000028A  74 3D			jz _seven
 0000028C  80 7D FF 38			cmp numText, 56
 00000290  74 3E			jz _eight
 00000292  80 7D FF 39			cmp numText, 57
 00000296  74 3F			jz _nine


 00000298			_zero:
 00000298  B8 00000000			mov EAX, 0
 0000029D  EB 3F			jmp _return

 0000029F			_one:
 0000029F  B8 00000001			mov EAX, 1
 000002A4  EB 38			jmp _return

 000002A6			_two:
 000002A6  B8 00000002			mov EAX, 2
 000002AB  EB 31			jmp _return

 000002AD			_three:
 000002AD  B8 00000003			mov EAX, 3
 000002B2  EB 2A			jmp _return

 000002B4			_four:
 000002B4  B8 00000004			mov EAX, 4
 000002B9  EB 23			jmp _return

 000002BB			_five:
 000002BB  B8 00000005			mov EAX, 5
 000002C0  EB 1C			jmp _return

 000002C2			_six:
 000002C2  B8 00000006			mov EAX, 6
 000002C7  EB 15			jmp _return

 000002C9			_seven:
 000002C9  B8 00000007			mov EAX, 7
 000002CE  EB 0E			jmp _return

 000002D0			_eight:
 000002D0  B8 00000008			mov EAX, 8
 000002D5  EB 07			jmp _return

 000002D7			_nine:
 000002D7  B8 00000009			mov EAX, 9
 000002DC  EB 00			jmp _return



 000002DE			_return:
 000002DE  89 03			mov [EBX],EAX	;move result to output variable
					
 000002E0  61				POPAD
 000002E1  C9		   *	    leave  
 000002E2  C2 0008			ret 8

 000002E5			ConvertASCIItoNum ENDP


 000002E5			ConvertNumtoASCII PROC
					
					LOCAL num:DWORD 
 000002E5  55		   *	    push   ebp
 000002E6  8B EC	   *	    mov    ebp, esp
 000002E8  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 000002EB  60				PUSHAD

 000002EC  8B 45 08			mov EAX, [EBP + 8]		;this will be temp string for output
 000002EF  8B 5D 0C			mov EBX, [EBP + 12]		;this will input number

 000002F2  89 5D FC			mov	num, EBX

 000002F5  83 7D FC 00			cmp num, 0
 000002F9  74 36			jz _zero
 000002FB  83 7D FC 01			cmp num, 1
 000002FF  74 37			jz _one
 00000301  83 7D FC 02			cmp num, 2
 00000305  74 38			jz _two
 00000307  83 7D FC 03			cmp num, 3
 0000030B  74 39			jz _three
 0000030D  83 7D FC 04			cmp num, 4
 00000311  74 3A			jz _four
 00000313  83 7D FC 05			cmp num, 5
 00000317  74 3B			jz _five
 00000319  83 7D FC 06			cmp num, 6
 0000031D  74 3C			jz _six
 0000031F  83 7D FC 07			cmp num, 7
 00000323  74 3D			jz _seven
 00000325  83 7D FC 08			cmp num, 8
 00000329  74 3E			jz _eight
 0000032B  83 7D FC 09			cmp num, 9
 0000032F  74 3F			jz _nine


 00000331			_zero:
 00000331  B8 00000030			mov EAX, 48 
 00000336  EB 3F			jmp _return

 00000338			_one:
 00000338  B8 00000031			mov EAX, 49 
 0000033D  EB 38			jmp _return

 0000033F			_two:
 0000033F  B8 00000032			mov EAX, 50 
 00000344  EB 31			jmp _return

 00000346			_three:
 00000346  B8 00000033			mov EAX, 51 
 0000034B  EB 2A			jmp _return

 0000034D			_four:
 0000034D  B8 00000034			mov EAX, 52
 00000352  EB 23			jmp _return

 00000354			_five:
 00000354  B8 00000035			mov EAX, 53 
 00000359  EB 1C			jmp _return

 0000035B			_six:
 0000035B  B8 00000036			mov EAX, 54 
 00000360  EB 15			jmp _return

 00000362			_seven:
 00000362  B8 00000037			mov EAX, 55 
 00000367  EB 0E			jmp _return

 00000369			_eight:
 00000369  B8 00000038			mov EAX, 56
 0000036E  EB 07			jmp _return

 00000370			_nine:
 00000370  B8 00000039			mov EAX, 57 
 00000375  EB 00			jmp _return



 00000377			_return:
 00000377  89 03			mov [EBX],EAX	;move result to output variable
					
 00000379  61				POPAD
 0000037A  C9		   *	    leave  
 0000037B  C2 0008			ret 8

 0000037E			ConvertNumtoASCII ENDP






					;PUSH    OFFSET sum_all_nums
					;PUSH    OFFSET IntegerArray_len
					;PUSH    OFFSET IntegerArray

 0000037E			CalculateSum PROC
					LOCAL num:SDWORD 
 0000037E  55		   *	    push   ebp
 0000037F  8B EC	   *	    mov    ebp, esp
 00000381  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 00000384  60				PUSHAD

 00000385  C7 45 FC			mov num, 0
	   00000000

 0000038C  8B 4D 0C			mov ECX, [EBP + 12]		; OFFSET IntegerArray_len
 0000038F  8B 09			mov ECX, [ECX]
 00000391  8B 7D 08			mov EDI, [EBP + 8]		; OFFSET IntegerArray

 00000394			_SumLoop:	
 00000394  8B 07			mov EAX, [EDI]
 00000396  8B 5D FC			mov EBX, num
 00000399  03 C3			add EAX, EBX
 0000039B  89 45 FC			mov num, EAX
 0000039E  83 C7 04			add EDI, 4

 000003A1  E2 F1			LOOP _SumLoop

					
 000003A3  8B 45 10			mov EAX, [EBP + 16]		; OFFSET sum_all_nums
 000003A6  8B 5D FC			mov EBX, num
 000003A9  89 18			mov [EAX], EBX


 000003AB  61				POPAD
 000003AC  C9		   *	    leave  
 000003AD  C2 000C			ret 12

 000003B0			CalculateSum ENDP


					;PUSH    OFFSET rounded_avg
					;PUSH    OFFSET sum_all_nums
					;PUSH    OFFSET IntegerArray_len

 000003B0			CalculateAverage PROC
					LOCAL num:SDWORD, quotient:SDWORD, remainder:SDWORD, doubledRemainder:SDWORD
 000003B0  55		   *	    push   ebp
 000003B1  8B EC	   *	    mov    ebp, esp
 000003B3  83 C4 F0	   *	    add    esp, 0FFFFFFF0h
 000003B6  60				PUSHAD

 000003B7  C7 45 FC			mov num, 0
	   00000000
 000003BE  8B 4D 08			mov ECX, [EBP + 8]		; OFFSET IntegerArray_len
 000003C1  8B 09			mov ECX, [ECX]
 000003C3  8B 45 0C			mov EAX, [EBP + 12]		; OFFSET sum_all_nums
 000003C6  8B 00			mov EAX, [EAX]
 000003C8  99				CDQ
 000003C9  F7 F9			IDIV ECX

 000003CB  89 45 F8			mov quotient, EAX
 000003CE  89 55 F4			mov remainder, EDX
					
 000003D1  8B 45 F4			mov EAX, remainder
 000003D4  BB 00000002			mov EBX, 2
 000003D9  F7 E3			mul EBX
 000003DB  89 45 F0			mov doubledRemainder, EAX

					;test delete start
 000003DE  8B 45 F8			mov EAX, quotient
 000003E1  E8 00000000 E		CALL WriteInt
 000003E6  8B 45 F4			mov EAX, remainder
 000003E9  E8 00000000 E		CALL WriteInt
 000003EE  8B 45 F0			mov EAX, doubledRemainder
 000003F1  E8 00000000 E		CALL WriteInt
					;test delete end


 000003F6  3B 45 F4			cmp EAX, remainder
 000003F9  7D 02			jge _roundAverageUp
 000003FB  EB 0D			jmp _saveValue

 000003FD			_roundAverageUp:
 000003FD  83 F8 00			cmp EAX, 0
 00000400  7C 05			jl	_roundNegativeDown


 00000402			_roundPositiveUp:	
 00000402  FF 45 F8			inc quotient
 00000405  EB 03			jmp _savevalue

 00000407			_roundNegativeDown:
 00000407  FF 4D F8			dec quotient

 0000040A			_saveValue:

 0000040A  8B 45 10			mov EAX, [EBP + 16]		; OFFSET rounded_avg
 0000040D  8B 5D F8			mov EBX, quotient
 00000410  89 18			mov [EAX], ebx	



					;test delete start
 00000412  8B 45 10			mov EAX, [EBP + 16]		; OFFSET rounded_avg
 00000415  8B 00			mov EAX, [EAX]
 00000417  E8 00000000 E		CALL WriteInt
					;test delete end


 0000041C  61				POPAD
 0000041D  C9		   *	    leave  
 0000041E  C2 000C			ret 12

 00000421			CalculateAverage ENDP



				END main
Microsoft (R) Macro Assembler Version 14.29.30133.0	    08/03/22 23:16:58
<Project 6 - String Primitives and Macros      (Proj6_iwanek  Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000039C Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000421 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CalculateAverage . . . . . . . .	P Near	 000003B0 _TEXT	Length= 00000071 Public STDCALL
  num  . . . . . . . . . . . . .	DWord	 bp - 00000004
  quotient . . . . . . . . . . .	DWord	 bp - 00000008
  remainder  . . . . . . . . . .	DWord	 bp - 0000000C
  doubledRemainder . . . . . . .	DWord	 bp - 00000010
  _roundAverageUp  . . . . . . .	L Near	 000003FD _TEXT	
  _roundPositiveUp . . . . . . .	L Near	 00000402 _TEXT	
  _roundNegativeDown . . . . . .	L Near	 00000407 _TEXT	
  _saveValue . . . . . . . . . .	L Near	 0000040A _TEXT	
CalculateSum . . . . . . . . . .	P Near	 0000037E _TEXT	Length= 00000032 Public STDCALL
  num  . . . . . . . . . . . . .	DWord	 bp - 00000004
  _SumLoop . . . . . . . . . . .	L Near	 00000394 _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ConvertASCIItoNum  . . . . . . .	P Near	 0000024C _TEXT	Length= 00000099 Public STDCALL
  numText  . . . . . . . . . . .	Byte	 bp - 00000001
  _zero  . . . . . . . . . . . .	L Near	 00000298 _TEXT	
  _one . . . . . . . . . . . . .	L Near	 0000029F _TEXT	
  _two . . . . . . . . . . . . .	L Near	 000002A6 _TEXT	
  _three . . . . . . . . . . . .	L Near	 000002AD _TEXT	
  _four  . . . . . . . . . . . .	L Near	 000002B4 _TEXT	
  _five  . . . . . . . . . . . .	L Near	 000002BB _TEXT	
  _six . . . . . . . . . . . . .	L Near	 000002C2 _TEXT	
  _seven . . . . . . . . . . . .	L Near	 000002C9 _TEXT	
  _eight . . . . . . . . . . . .	L Near	 000002D0 _TEXT	
  _nine  . . . . . . . . . . . .	L Near	 000002D7 _TEXT	
  _return  . . . . . . . . . . .	L Near	 000002DE _TEXT	
ConvertNumtoASCII  . . . . . . .	P Near	 000002E5 _TEXT	Length= 00000099 Public STDCALL
  num  . . . . . . . . . . . . .	DWord	 bp - 00000004
  _zero  . . . . . . . . . . . .	L Near	 00000331 _TEXT	
  _one . . . . . . . . . . . . .	L Near	 00000338 _TEXT	
  _two . . . . . . . . . . . . .	L Near	 0000033F _TEXT	
  _three . . . . . . . . . . . .	L Near	 00000346 _TEXT	
  _four  . . . . . . . . . . . .	L Near	 0000034D _TEXT	
  _five  . . . . . . . . . . . .	L Near	 00000354 _TEXT	
  _six . . . . . . . . . . . . .	L Near	 0000035B _TEXT	
  _seven . . . . . . . . . . . .	L Near	 00000362 _TEXT	
  _eight . . . . . . . . . . . .	L Near	 00000369 _TEXT	
  _nine  . . . . . . . . . . . .	L Near	 00000370 _TEXT	
  _return  . . . . . . . . . . .	L Near	 00000377 _TEXT	
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 0000008B _TEXT	Length= 0000018C Public STDCALL
  StringMaxLen . . . . . . . . .	DWord	 bp - 00000004
  StringRef  . . . . . . . . . .	DWord	 bp - 00000008
  NumsEntered  . . . . . . . . .	DWord	 bp - 0000000C
  sign . . . . . . . . . . . . .	DWord	 bp - 00000010
  numTemp  . . . . . . . . . . .	DWord	 bp - 00000014
  returnValueAscii . . . . . . .	DWord	 bp - 00000018
  arrayelements  . . . . . . . .	DWord	 bp - 0000001C
  _PromptUserInput . . . . . . .	L Near	 0000009E _TEXT	
  _convertString . . . . . . . .	L Near	 000000EF _TEXT	
  _checkifSign . . . . . . . . .	L Near	 00000102 _TEXT	
  _Convert . . . . . . . . . . .	L Near	 0000010C _TEXT	
  _NextLoop  . . . . . . . . . .	L Near	 0000013D _TEXT	
  _NotNumError . . . . . . . . .	L Near	 00000141 _TEXT	
  _noInputError  . . . . . . . .	L Near	 0000015A _TEXT	
  _TestifFirstDigitPlus  . . . .	L Near	 00000173 _TEXT	
  _TestifFirstDigitMinus . . . .	L Near	 00000181 _TEXT	
  _signNotFirstError . . . . . .	L Near	 0000018F _TEXT	
  _FinishedConvertingtoNum . . .	L Near	 000001A8 _TEXT	
  _convertNumtoNegative  . . . .	L Near	 000001B0 _TEXT	
  _testIfNumtooLarge . . . . . .	L Near	 000001B8 _TEXT	
  _numTooLargError . . . . . . .	L Near	 000001CB _TEXT	
  _storeNumtoArray . . . . . . .	L Near	 000001E4 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 00000217 _TEXT	Length= 00000000 Public STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
getStringLen . . . . . . . . . .	P Near	 00000217 _TEXT	Length= 00000035 Public STDCALL
  StringLen  . . . . . . . . . .	DWord	 bp - 00000004
  _countLoop . . . . . . . . . .	L Near	 0000022D _TEXT	
  _nocount . . . . . . . . . . .	L Near	 0000023D _TEXT	
  _end . . . . . . . . . . . . .	L Near	 0000023F _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000008B Public STDCALL
  _InputNumberLoop . . . . . . .	L Near	 0000001D _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
Error_char_num . . . . . . . . .	Byte	 00000238 _DATA	
Error_no_input . . . . . . . . .	Byte	 0000020F _DATA	
Error_sign_use . . . . . . . . .	Byte	 00000278 _DATA	
Error_too_large  . . . . . . . .	Byte	 000002CA _DATA	
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
IntegerArray_len . . . . . . . .	DWord	 00000207 _DATA	
IntegerArray_size  . . . . . . .	DWord	 0000020B _DATA	
IntegerArray . . . . . . . . . .	DWord	 000001DF _DATA	
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
display_1  . . . . . . . . . . .	Byte	 00000335 _DATA	
display_2  . . . . . . . . . . .	Byte	 00000359 _DATA	
display_3  . . . . . . . . . . .	Byte	 0000037B _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
num_prompt . . . . . . . . . . .	Byte	 000001A9 _DATA	
program_info_1 . . . . . . . . .	Byte	 00000000 _DATA	
program_info_2 . . . . . . . . .	Byte	 00000053 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
rounded_avg  . . . . . . . . . .	DWord	 00000394 _DATA	
sum_all_nums . . . . . . . . . .	DWord	 00000398 _DATA	
temp_num . . . . . . . . . . . .	DWord	 0000019D _DATA	
temp_string  . . . . . . . . . .	DWord	 000001A1 _DATA	
userString_len . . . . . . . . .	DWord	 00000199 _DATA	
userString_max_len . . . . . . .	DWord	 000001A5 _DATA	
userString . . . . . . . . . . .	Byte	 00000167 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
