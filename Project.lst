Microsoft (R) Macro Assembler Version 14.29.30133.0	    08/04/22 22:33:42
<Project 6 - String Primitives and Macros      (Proj6_iwanek  Page 1 - 1


				TITLE Project 6 - String Primitives and Macros      (Proj6_iwanekm.asm)

				;--------------------------------------------------------------------------------------------------------------------------------------------------
				; Author:					Michael Iwanek
				; Last Modified:			08/01/2022
				; OSU email address:		iwanekm@oregonstate.edu
				; Course number/section:	CS271 Section 400
				; Project Number:			06
				; Due Date:					08/07/2022
				;--------------------------------------------------------------------------------------------------------------------------------------------------
				; Description: 
				;--------------------------------------------------------------------------------------------------------------------------------------------------
				;			-This program allows user to enter in a series of numbers as strings.  It then conver

				;--------------------------------------------------------------------------------------------------------------------------------------------------


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 


				; =======================================================================================================================================================
				; Name:				mGetString
				;
				; Description:		This macro gets 
				;
				; Preconditions:	none
				;
				; Postconditions:	Register EDX is NOT changed since the USES keyword (ALLOWED TO USE PER INSTRUCTIONS) preserves the EDX register.  This is 
				;					similar to pushing EDX in the procedure and then popping it back into EDX before retuning to the calling funciton.
				;
				; Receives:			Addresses of strings program_info_1, program_info_2, program_info_3, program_info_4, program_info_5, and divider that were
				;					declared in the data segment.  As addresses were received, this means the strings were passed by reference.
				;
				; Returns:			nothing
				;
				; =======================================================================================================================================================
				mGetString	MACRO	buffer, buffer_size, output_nums_entered
					PUSH  EDX				;Save EDX register
					PUSH  ECX
					PUSH  EAX
					MOV   EDX,  buffer
					MOV   ECX,  [buffer_size]
					CALL  ReadString
					mov	  ecx, output_nums_entered
					mov	  [ecx], EAX
					POP   EAX
					POP   ECX				;Restore EDX
					POP   EDX				;Restore ECX
				ENDM

				mDisplayString	MACRO	buffer
					PUSH  EDX				;Save EDX register
					MOV   EDX, buffer
					CALL  WriteString
					POP   EDX				;Restore EDX
				ENDM

				; (insert constant definitions here)

 00000000			.data
 00000000 48 65 6C 6C 6F	program_info_1		BYTE		"Hello!  Welcome to my program:  String Primitives and Macros by Michael Iwanek",13,10,13,10,0
	   21 20 20 57 65
	   6C 63 6F 6D 65
	   20 74 6F 20 6D
	   79 20 70 72 6F
	   67 72 61 6D 3A
	   20 20 53 74 72
	   69 6E 67 20 50
	   72 69 6D 69 74
	   69 76 65 73 20
	   61 6E 64 20 4D
	   61 63 72 6F 73
	   20 62 79 20 4D
	   69 63 68 61 65
	   6C 20 49 77 61
	   6E 65 6B 0D 0A
	   0D 0A 00
 00000053 50 6C 65 61 73	program_info_2		BYTE		"Please enter in 10 signed decimal integers.  This program will then display each number entered, their average value, and sum.",13,10,13,10
	   65 20 65 6E 74
	   65 72 20 69 6E
	   20 31 30 20 73
	   69 67 6E 65 64
	   20 64 65 63 69
	   6D 61 6C 20 69
	   6E 74 65 67 65
	   72 73 2E 20 20
	   54 68 69 73 20
	   70 72 6F 67 72
	   61 6D 20 77 69
	   6C 6C 20 74 68
	   65 6E 20 64 69
	   73 70 6C 61 79
	   20 65 61 63 68
	   20 6E 75 6D 62
	   65 72 20 65 6E
	   74 65 72 65 64
	   2C 20 74 68 65
	   69 72 20 61 76
	   65 72 61 67 65
	   20 76 61 6C 75
	   65 2C 20 61 6E
	   64 20 73 75 6D
	   2E 0D 0A 0D 0A
 000000D5  49 74 20 77 69						BYTE		"It will do this without using any Irvine procedures to read/write numbers, but will instead convert inputted strings to numbers using an algorithm.",13,10,13,10
	   6C 6C 20 64 6F
	   20 74 68 69 73
	   20 77 69 74 68
	   6F 75 74 20 75
	   73 69 6E 67 20
	   61 6E 79 20 49
	   72 76 69 6E 65
	   20 70 72 6F 63
	   65 64 75 72 65
	   73 20 74 6F 20
	   72 65 61 64 2F
	   77 72 69 74 65
	   20 6E 75 6D 62
	   65 72 73 2C 20
	   62 75 74 20 77
	   69 6C 6C 20 69
	   6E 73 74 65 61
	   64 20 63 6F 6E
	   76 65 72 74 20
	   69 6E 70 75 74
	   74 65 64 20 73
	   74 72 69 6E 67
	   73 20 74 6F 20
	   6E 75 6D 62 65
	   72 73 20 75 73
	   69 6E 67 20 61
	   6E 20 61 6C 67
	   6F 72 69 74 68
	   6D 2E 0D 0A 0D
	   0A
 0000016C  41 66 74 65 72						BYTE		"After storing these numbers to an array, it will use another algorithm to convert these numbers back to strings to be displayed to the console.  ",13,10,13,10
	   20 73 74 6F 72
	   69 6E 67 20 74
	   68 65 73 65 20
	   6E 75 6D 62 65
	   72 73 20 74 6F
	   20 61 6E 20 61
	   72 72 61 79 2C
	   20 69 74 20 77
	   69 6C 6C 20 75
	   73 65 20 61 6E
	   6F 74 68 65 72
	   20 61 6C 67 6F
	   72 69 74 68 6D
	   20 74 6F 20 63
	   6F 6E 76 65 72
	   74 20 74 68 65
	   73 65 20 6E 75
	   6D 62 65 72 73
	   20 62 61 63 6B
	   20 74 6F 20 73
	   74 72 69 6E 67
	   73 20 74 6F 20
	   62 65 20 64 69
	   73 70 6C 61 79
	   65 64 20 74 6F
	   20 74 68 65 20
	   63 6F 6E 73 6F
	   6C 65 2E 20 20
	   0D 0A 0D 0A
 00000201  45 61 63 68 20						BYTE		"Each number must be able to fit within a 32 bit register, or be between the values of -2,147,483,647 and 2,147,483,647 inclusive (or +/- 2^31).",13,10,13,10,0
	   6E 75 6D 62 65
	   72 20 6D 75 73
	   74 20 62 65 20
	   61 62 6C 65 20
	   74 6F 20 66 69
	   74 20 77 69 74
	   68 69 6E 20 61
	   20 33 32 20 62
	   69 74 20 72 65
	   67 69 73 74 65
	   72 2C 20 6F 72
	   20 62 65 20 62
	   65 74 77 65 65
	   6E 20 74 68 65
	   20 76 61 6C 75
	   65 73 20 6F 66
	   20 2D 32 2C 31
	   34 37 2C 34 38
	   33 2C 36 34 37
	   20 61 6E 64 20
	   32 2C 31 34 37
	   2C 34 38 33 2C
	   36 34 37 20 69
	   6E 63 6C 75 73
	   69 76 65 20 28
	   6F 72 20 2B 2F
	   2D 20 32 5E 33
	   31 29 2E 0D 0A
	   0D 0A 00
 00000295  00000032 [		userString			BYTE		50 DUP(?)			;10 digit string, +1 for + or neg sign; +1 for null terminator
	    00
	   ]
 000002C7 00000000		userString_len		DWORD		?
 000002CB 00000000		temp_num			SDWORD		?
 000002CF 00000000		temp_num2			SDWORD		?
 000002D3  00000020 [		temp_string			BYTE		32 DUP(?)
	    00
	   ]
 000002F3  00000020 [		temp_string2		BYTE		32 DUP(?)
	    00
	   ]
 00000313 00000032		userString_max_len	DWORD		LENGTHOF userString
 00000317 50 6C 65 61 73	num_prompt			BYTE		"Please enter a signed number between -2^31 and 2^31: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 20 62
	   65 74 77 65 65
	   6E 20 2D 32 5E
	   33 31 20 61 6E
	   64 20 32 5E 33
	   31 3A 20 00
 0000034D  0000000A [		IntegerArray		SDWORD		10 DUP(?)
	    00000000
	   ]
 00000375 00000000		IntegerArray_len	DWORD		0 ;num elements
 00000379 00000001		IntegerArray_len2	DWORD		1 ;num elements
 0000037D  0000000A [		StringArray			SDWORD		10 DUP(?)
	    00000000
	   ]
 000003A5 45 72 72 6F 72	Error_no_input		BYTE		"Error!  You didn't enter in any numbers.",0 
	   21 20 20 59 6F
	   75 20 64 69 64
	   6E 27 74 20 65
	   6E 74 65 72 20
	   69 6E 20 61 6E
	   79 20 6E 75 6D
	   62 65 72 73 2E
	   00
 000003CE 45 72 72 6F 72	Error_char_num		BYTE		"Error!  You can only enter numbers, and the plus or minus sign.",0 
	   21 20 20 59 6F
	   75 20 63 61 6E
	   20 6F 6E 6C 79
	   20 65 6E 74 65
	   72 20 6E 75 6D
	   62 65 72 73 2C
	   20 61 6E 64 20
	   74 68 65 20 70
	   6C 75 73 20 6F
	   72 20 6D 69 6E
	   75 73 20 73 69
	   67 6E 2E 00
 0000040E 45 72 72 6F 72	Error_sign_use		BYTE		"Error!  You can only enter the plus or minus sign at the beginning of the number.",0 
	   21 20 20 59 6F
	   75 20 63 61 6E
	   20 6F 6E 6C 79
	   20 65 6E 74 65
	   72 20 74 68 65
	   20 70 6C 75 73
	   20 6F 72 20 6D
	   69 6E 75 73 20
	   73 69 67 6E 20
	   61 74 20 74 68
	   65 20 62 65 67
	   69 6E 6E 69 6E
	   67 20 6F 66 20
	   74 68 65 20 6E
	   75 6D 62 65 72
	   2E 00
 00000460 45 72 72 6F 72	Error_too_large		BYTE		"Error!  Your number must be between the ranges of-2,147,483,647 and 2,147,483,647 inclusive (or +/- 2^31).",0 
	   21 20 20 59 6F
	   75 72 20 6E 75
	   6D 62 65 72 20
	   6D 75 73 74 20
	   62 65 20 62 65
	   74 77 65 65 6E
	   20 74 68 65 20
	   72 61 6E 67 65
	   73 20 6F 66 2D
	   32 2C 31 34 37
	   2C 34 38 33 2C
	   36 34 37 20 61
	   6E 64 20 32 2C
	   31 34 37 2C 34
	   38 33 2C 36 34
	   37 20 69 6E 63
	   6C 75 73 69 76
	   65 20 28 6F 72
	   20 2B 2F 2D 20
	   32 5E 33 31 29
	   2E 00
 000004CB 59 6F 75 20 65	display_1			BYTE		"You entered the following numbers: ",0 
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 20
	   00
 000004EF 54 68 65 20 73	display_2			BYTE		"The sum of all numbers entered is: ",0 
	   75 6D 20 6F 66
	   20 61 6C 6C 20
	   6E 75 6D 62 65
	   72 73 20 65 6E
	   74 65 72 65 64
	   20 69 73 3A 20
	   00
 00000513 54 68 65 20 74	display_3			BYTE		"The truncated average of all numbers entered is: ",0 
	   72 75 6E 63 61
	   74 65 64 20 61
	   76 65 72 61 67
	   65 20 6F 66 20
	   61 6C 6C 20 6E
	   75 6D 62 65 72
	   73 20 65 6E 74
	   65 72 65 64 20
	   69 73 3A 20 00
 00000545 00000000		rounded_avg			SDWORD		?
 00000549 00000000		sum_all_nums		SDWORD		?
 0000054D 2C 20 00		comma_string		BYTE		", ",0
 00000550 54 68 61 6E 6B	goodbye				BYTE		"Thanks for using my program!  Goodbye.",0
	   73 20 66 6F 72
	   20 75 73 69 6E
	   67 20 6D 79 20
	   70 72 6F 67 72
	   61 6D 21 20 20
	   47 6F 6F 64 62
	   79 65 2E 00

 00000000			.code
 00000000			main PROC


					;display program prompts and info to the user using the mDisplayString macro
					mDisplayString OFFSET program_info_1
 00000000  52		     1		PUSH  EDX				;Save EDX register
 00000001  BA 00000000 R     1		MOV   EDX, OFFSET program_info_1
 00000006  E8 00000000 E     1		CALL  WriteString
 0000000B  5A		     1		POP   EDX				;Restore EDX
					mDisplayString OFFSET program_info_2	
 0000000C  52		     1		PUSH  EDX				;Save EDX register
 0000000D  BA 00000053 R     1		MOV   EDX, OFFSET program_info_2
 00000012  E8 00000000 E     1		CALL  WriteString
 00000017  5A		     1		POP   EDX				;Restore EDX
					
 00000018  B9 0000000A			mov ECX, 10

					;loop to get 10 numbers from the user as strings, converted to an array of numbers from ASCII manually
 0000001D			_InputNumberLoop:

 0000001D  68 000002CF R		PUSH    OFFSET temp_num2
 00000022  68 00000460 R		PUSH	OFFSET Error_too_large
 00000027  68 00000375 R		PUSH    OFFSET IntegerArray_len
 0000002C  68 0000034D R		PUSH    OFFSET IntegerArray
 00000031  68 000002CB R		PUSH    OFFSET temp_num
 00000036  68 000002C7 R		PUSH    OFFSET userString_len
 0000003B  68 000003A5 R		PUSH	OFFSET Error_no_input
 00000040  68 000003CE R		PUSH	OFFSET Error_char_num
 00000045  68 0000040E R		PUSH	OFFSET Error_sign_use
 0000004A  FF 35 00000313 R		PUSH    userString_max_len
 00000050  68 00000295 R		PUSH	OFFSET userString
 00000055  68 00000317 R		PUSH	OFFSET num_prompt
 0000005A  E8 00000124			CALL	ReadVal

 0000005F  E2 BC		LOOP _InputNumberLoop

					
					;calc sum
 00000061  68 00000549 R		PUSH    OFFSET sum_all_nums
 00000066  68 00000375 R		PUSH    OFFSET IntegerArray_len
 0000006B  68 0000034D R		PUSH    OFFSET IntegerArray
 00000070  E8 000004AD			CALL	CalculateSum	

					;calc average
 00000075  68 00000545 R		PUSH    OFFSET rounded_avg
 0000007A  68 00000549 R		PUSH    OFFSET sum_all_nums
 0000007F  68 00000375 R		PUSH    OFFSET IntegerArray_len
 00000084  E8 000004CB			CALL	CalculateAverage	

					;display numbers entered by user
 00000089  E8 00000000 E		CALL	CrLf
					mDisplayString OFFSET display_1
 0000008E  52		     1		PUSH  EDX				;Save EDX register
 0000008F  BA 000004CB R     1		MOV   EDX, OFFSET display_1
 00000094  E8 00000000 E     1		CALL  WriteString
 00000099  5A		     1		POP   EDX				;Restore EDX
 0000009A  E8 00000000 E		CALL	CrLf
 0000009F  E8 0000053F			CALL	setTextColorGreen	
 000000A4  68 0000054D R		PUSH    OFFSET comma_string
 000000A9  68 000002F3 R		PUSH    OFFSET temp_string2
 000000AE  68 000002D3 R		PUSH    OFFSET temp_string
 000000B3  68 0000037D R		PUSH    OFFSET StringArray
 000000B8  68 00000375 R		PUSH    OFFSET IntegerArray_len
 000000BD  68 0000034D R		PUSH    OFFSET IntegerArray
 000000C2  E8 000004C1			CALL	WriteVal
 000000C7  E8 0000050C			CALL	setTextColorWhite		

					;display text prompt before sum is displayed
 000000CC  E8 00000000 E		CALL	CrLf
 000000D1  E8 00000000 E		CALL	CrLf
					mDisplayString OFFSET display_2	
 000000D6  52		     1		PUSH  EDX				;Save EDX register
 000000D7  BA 000004EF R     1		MOV   EDX, OFFSET display_2
 000000DC  E8 00000000 E     1		CALL  WriteString
 000000E1  5A		     1		POP   EDX				;Restore EDX
 000000E2  E8 000004FC			CALL	setTextColorGreen	
 000000E7  E8 00000000 E		CALL	CrLf
					
					;display sum of numbers entered by user
 000000EC  68 0000054D R		PUSH    OFFSET comma_string
 000000F1  68 000002F3 R		PUSH    OFFSET temp_string2
 000000F6  68 000002D3 R		PUSH    OFFSET temp_string
 000000FB  68 0000037D R		PUSH    OFFSET StringArray
 00000100  68 00000379 R		PUSH    OFFSET IntegerArray_len2
 00000105  68 00000549 R		PUSH    OFFSET sum_all_nums
 0000010A  E8 00000479			CALL	WriteVal
 0000010F  E8 000004C4			CALL	setTextColorWhite	

					;display text prompt before truncated average is displayed
 00000114  E8 00000000 E		CALL	CrLf
 00000119  E8 00000000 E		CALL	CrLf
					mDisplayString OFFSET display_3	
 0000011E  52		     1		PUSH  EDX				;Save EDX register
 0000011F  BA 00000513 R     1		MOV   EDX, OFFSET display_3
 00000124  E8 00000000 E     1		CALL  WriteString
 00000129  5A		     1		POP   EDX				;Restore EDX
 0000012A  E8 000004B4			CALL	setTextColorGreen	
 0000012F  E8 00000000 E		CALL	CrLf

					;display truncated average of numbers entered by user
 00000134  68 0000054D R		PUSH    OFFSET comma_string
 00000139  68 000002F3 R		PUSH    OFFSET temp_string2
 0000013E  68 000002D3 R		PUSH    OFFSET temp_string
 00000143  68 0000037D R		PUSH    OFFSET StringArray
 00000148  68 00000379 R		PUSH    OFFSET IntegerArray_len2
 0000014D  68 00000545 R		PUSH    OFFSET rounded_avg
 00000152  E8 00000431			CALL	WriteVal	
					

					;display the farewell message
 00000157  E8 0000047C			CALL	setTextColorWhite	
 0000015C  E8 00000000 E		CALL	CrLf
 00000161  E8 00000000 E		CALL	CrLf
					mDisplayString OFFSET goodbye	
 00000166  52		     1		PUSH  EDX				;Save EDX register
 00000167  BA 00000550 R     1		MOV   EDX, OFFSET goodbye
 0000016C  E8 00000000 E     1		CALL  WriteString
 00000171  5A		     1		POP   EDX				;Restore EDX
 00000172  E8 00000000 E		CALL	CrLf
 00000177  E8 00000000 E		CALL	CrLf




					Invoke ExitProcess,0	; exit to operating system
 0000017C  6A 00	   *	    push   +000000000h
 0000017E  E8 00000000 E   *	    call   ExitProcess
 00000183			main ENDP


 00000183			ReadVal PROC

					;***************************************************************************************************************************
					;	1) Invoke the mGetString macro to get user input in the form of a string of digits	
					;***************************************************************************************************************************

					LOCAL StringMaxLen:DWORD, StringRef:DWORD, NumsEntered:DWORD, sign:DWORD, numTemp:DWORD, returnValueAscii:DWORD, arrayelements:DWORD
 00000183  55		   *	    push   ebp
 00000184  8B EC	   *	    mov    ebp, esp
 00000186  83 C4 E4	   *	    add    esp, 0FFFFFFE4h
 00000189  60				PUSHAD

 0000018A  C7 45 F0			mov sign, 1
	   00000001
 00000191  8B 45 0C			mov eax, [EBP + 12]
 00000194  89 45 F8			mov StringRef, eax
 00000197  8B 45 10			mov eax, [EBP + 16]	
 0000019A  89 45 FC			mov StringMaxLen, eax		


 0000019D			_PromptUserInput:

 0000019D  8B 55 34			mov edx, [EBP + 52]	
 000001A0  89 55 F4			mov NumsEntered, edx		;output variable to hold nums entered

					mDisplayString [EBP + 8]									;prompt num	
 000001A3  52		     1		PUSH  EDX				;Save EDX register
 000001A4  8B 55 08	     1		MOV   EDX, [EBP + 8]
 000001A7  E8 00000000 E     1		CALL  WriteString
 000001AC  5A		     1		POP   EDX				;Restore EDX
				    mGetString StringRef, StringMaxLen, NumsEntered 			;pass string output by ref, size by value, and nums entered by ref to macro
 000001AD  52		     1		PUSH  EDX				;Save EDX register
 000001AE  51		     1		PUSH  ECX
 000001AF  50		     1		PUSH  EAX
 000001B0  8B 55 F8	     1		MOV   EDX,  StringRef
 000001B3  8B 4D FC	     1		MOV   ECX,  [StringMaxLen]
 000001B6  E8 00000000 E     1		CALL  ReadString
 000001BB  8B 4D F4	     1		mov	  ecx, NumsEntered
 000001BE  89 01	     1		mov	  [ecx], EAX
 000001C0  58		     1		POP   EAX
 000001C1  59		     1		POP   ECX				;Restore EDX
 000001C2  5A		     1		POP   EDX				;Restore ECX

 000001C3  8B 55 34			mov edx, [EBP + 52]	
 000001C6  8B 12			mov edx, [edx]
 000001C8  89 55 F4			mov NumsEntered, edx		;output variable from macro to local variable





					
					;***************************************************************************************************************************
					;	2) Convert (USING STRING PRIMITIVES) the string of ASCII digits to its numeric value representation (SDWORD).
					;   validating each char is a valid # (not symbol)                                                                
					;***************************************************************************************************************************

					
					;mov EDX, StringRef				;LOCAL VARIABLE - test delete
					;CALL WriteString				;test delete
					

 000001CB  8B 4D F4			mov ECX, NumsEntered			;test if no nums entered using local variable
 000001CE  83 F9 00			cmp ECX, 0
 000001D1  0F 84 00000081		jz _noInputError
 000001D7  83 F9 0B			cmp ECX, 11
 000001DA  0F 8F 000000E9		jg _numTooLargeError
 000001E0  8B 75 F8			mov ESI, StringRef				;if nums were entered, then start loop
 000001E3  8B 4D FC			mov ECX, StringMaxLen			;test if no nums entered using local variable
 000001E6  C7 45 EC			mov numTemp, 0
	   00000000


				;==================LOOP TO CONVERT STRING STARTS HERE=====================================================
 000001ED			_convertString:	
 000001ED  AC				LODSB						;takes ESI and copies to AL, then increment ESI to next element
 000001EE  3C 00			cmp AL, 0
 000001F0  0F 84 000000B0		jz _FinishedConvertingtoNum
 000001F6  3C 30			cmp AL, 48					;nums are from 48 to 57; + is 43 and - is 45
 000001F8  7C 06			jl	_checkifSign	
 000001FA  3C 39			cmp AL, 57
 000001FC  7F 41			jg	_NotNumError
 000001FE  EB 0A			jmp _Convert	


 00000200			_checkifSign:
 00000200  3C 2B			cmp AL, 43					; + sign
 00000202  74 6D			jz	_TestifFirstDigitPlus
 00000204  3C 2D			cmp AL, 45					; - sign
 00000206  74 77			jz	_TestifFirstDigitMinus
 00000208  EB 35			jmp _NotNumError

 0000020A			_Convert:
 0000020A  FF 75 24			PUSH [EBP + 36]			    ; temp return variable from ConvertASCIItoNum
 0000020D  50				PUSH EAX					; this pushes AL and garbage values
 0000020E  E8 0000012C			CALL ConvertASCIItoNum	
					
 00000213  8B 45 EC			mov EAX, numTemp			; tempNum to hold digits

 00000216  3D 0CCCCCCC			cmp EAX, 214748364
 0000021B  0F 8F 000000A8		jg  _numTooLargeError


 00000221  BB 0000000A			mov ebx, 10
 00000226  F7 E3			mul ebx						; multiply by 10 then loop
 00000228  50				push eax					; save multiplied numTemp

 00000229  8B 5D 24			mov ebx, [EBP + 36]		
 0000022C  8B 03			mov eax, [ebx]				; return variable from ConvertASCIItoNum
 0000022E  89 45 E8			mov returnValueAscii, eax	; save return variable from ConvertASCIItoNum

 00000231  58				pop eax						; restore multipled value to eax
 00000232  01 45 E8			add returnValueAscii, eax	; add to return variable
 00000235  8B 45 E8			mov	eax, returnValueAscii	; move num so far to eax
 00000238  89 45 EC			mov numTemp, EAX			; save to numTemp for next loop

 0000023B			_NextLoop:
					
 0000023B  E2 B0			loop _ConvertString
 0000023D  EB 67			jmp _FinishedConvertingtoNum
				;==================LOOP TO CONVERT STRING ENDS HERE=====================================================



				;Errors and testing if + or - if first char
 0000023F			_NotNumError:
					
					mDisplayString [EBP + 24]				; not num string
 0000023F  52		     1		PUSH  EDX				;Save EDX register
 00000240  8B 55 18	     1		MOV   EDX, [EBP + 24]
 00000243  E8 00000000 E     1		CALL  WriteString
 00000248  5A		     1		POP   EDX				;Restore EDX
 00000249  E8 00000000 E		call CrLf
 0000024E  E8 00000000 E		call CrLF
 00000253  E9 FFFFFF45			jmp _PromptUserInput


 00000258			_noInputError:
					mDisplayString [EBP + 28]				; no input string
 00000258  52		     1		PUSH  EDX				;Save EDX register
 00000259  8B 55 1C	     1		MOV   EDX, [EBP + 28]
 0000025C  E8 00000000 E     1		CALL  WriteString
 00000261  5A		     1		POP   EDX				;Restore EDX
 00000262  E8 00000000 E		call CrLf
 00000267  E8 00000000 E		call CrLF
 0000026C  E9 FFFFFF2C			jmp _PromptUserInput

 00000271			_TestifFirstDigitPlus:
 00000271  39 4D FC			cmp StringMaxLen, ECX
 00000274  75 17			jnz _signNotFirstError
 00000276  C7 45 F0			mov sign, 1	
	   00000001
 0000027D  EB BC			jmp _NextLoop


 0000027F			_TestifFirstDigitMinus:
 0000027F  39 4D FC			cmp StringMaxLen, ECX
 00000282  75 09			jnz _signNotFirstError
 00000284  C7 45 F0			mov sign, 2							    ; local variable set as negative
	   00000002
 0000028B  EB AE			jmp _NextLoop

 0000028D			_signNotFirstError:
					mDisplayString [EBP + 20]				; prompt num	
 0000028D  52		     1		PUSH  EDX				;Save EDX register
 0000028E  8B 55 14	     1		MOV   EDX, [EBP + 20]
 00000291  E8 00000000 E     1		CALL  WriteString
 00000296  5A		     1		POP   EDX				;Restore EDX
 00000297  E8 00000000 E		call CrLf
 0000029C  E8 00000000 E		call CrLF
 000002A1  E9 FFFFFEF7			jmp _PromptUserInput




					;***************************************************************************************************************************
					;	3) Store this one value in a memory variable (output paratmeter, by reference).                                                              
					;***************************************************************************************************************************

 000002A6			_FinishedConvertingtoNum:
					
 000002A6  83 7D F0 02			cmp sign, 2
 000002AA  74 02			jz _convertNumtoNegative
 000002AC  EB 08			jmp _testIfNumtooLarge
					

 000002AE			_convertNumtoNegative:
 000002AE  8B 45 E8			mov eax, returnValueAscii  
 000002B1  F7 D8			neg eax
 000002B3  89 45 E8			mov returnValueAscii, eax 


 000002B6			_testIfNumtooLarge:
 000002B6  8B 45 E8			mov EAX, returnValueAscii	
 000002B9  3D 7FFFFFFF			cmp EAX, 2147483647
 000002BE  7F 09			jg	_numTooLargeError
 000002C0  3D 80000001			cmp EAX, -2147483647
 000002C5  7C 02			jl	_numTooLargeError
 000002C7  EB 19			jmp _storeNumtoArray

 000002C9			_numTooLargeError:
					mDisplayString [EBP + 48]	
 000002C9  52		     1		PUSH  EDX				;Save EDX register
 000002CA  8B 55 30	     1		MOV   EDX, [EBP + 48]
 000002CD  E8 00000000 E     1		CALL  WriteString
 000002D2  5A		     1		POP   EDX				;Restore EDX
 000002D3  E8 00000000 E		call CrLf
 000002D8  E8 00000000 E		call CrLF
 000002DD  E9 FFFFFEBB			jmp _PromptUserInput	
					


 000002E2			_storeNumtoArray:

 000002E2  8B 75 28			mov     ESI, [EBP + 40]				    ; offset of int array		
 000002E5  8B 45 2C			MOV		EAX, [EBP + 44]					; offset IntegerArray length variable to track how many elements are in array
 000002E8  8B 00			mov		EAX, [EAX]
 000002EA  89 45 E4			mov		arrayelements, EAX				; local variable
 000002ED  BB 00000004			mov		EBX, 4
 000002F2  F7 E3			mul		EBX	
 000002F4  8B 4D E8			mov		ECX, returnValueAscii
 000002F7  89 0C 06			mov		[ESI + EAX], ECX				; store num in int array + offset to put in the last postion of the array

 000002FA  8B 7D 2C			mov		EDI, [EBP + 44]
 000002FD  FF 45 E4			inc		arrayelements
 00000300  8B 45 E4			mov		eax, arrayelements
 00000303  89 07			MOV	    [EDI], eax						;store count of array elements


 00000305  61				POPAD
 00000306  C9		   *	    leave  
 00000307  C2 002C			RET 44									; dereference passed parameters


 0000030A			ReadVal ENDP


 0000030A			getStringLen PROC
					
					LOCAL StringLen:DWORD
 0000030A  55		   *	    push   ebp
 0000030B  8B EC	   *	    mov    ebp, esp
 0000030D  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 00000310  60				PUSHAD

 00000311  B9 0000001E			mov ECX, 30				;max length for counter
 00000316  8B 75 0C			mov ESI, [EBP + 12]		;output ref

 00000319  C7 45 FC			mov StringLen, 0
	   00000000
					
 00000320			_countLoop:
 00000320  AC				LODSB	
 00000321  3C 00			cmp AL, 0
 00000323  7E 0D			jle _end
 00000325  3C 2B			cmp AL, 43			; + sign
 00000327  74 07			jz _nocount
 00000329  3C 2D			cmp AL, 45			; - sign
 0000032B  74 03			jz _nocount
 0000032D  FF 45 FC			inc StringLen

 00000330			_nocount:
 00000330  E2 EE			loop _countLoop
					
 00000332			_end:
					
 00000332  8B 45 FC			mov EAX, StringLen		;LOCAL VARIABLE
 00000335  8B 55 10			mov EDX, [EBP + 16] 	;move count to output variable
 00000338  89 02			mov [EDX], EAX 			;move count to output variable
					
 0000033A  61				POPAD
 0000033B  C9		   *	    leave  
 0000033C  C2 000C			ret 12

 0000033F			getStringLen ENDP



 0000033F			ConvertASCIItoNum PROC
					
					LOCAL numText:BYTE 
 0000033F  55		   *	    push   ebp
 00000340  8B EC	   *	    mov    ebp, esp
 00000342  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 00000345  60				PUSHAD

 00000346  8B 45 08			mov EAX, [EBP + 8]		;whole EAX register
 00000349  8B 5D 0C			mov EBX, [EBP + 12]		;output variable

 0000034C  88 45 FF			mov numText, AL		;technically comparing AL here


 0000034F  80 7D FF 30			cmp numText, 48
 00000353  74 36			jz _zero
 00000355  80 7D FF 31			cmp numText, 49
 00000359  74 37			jz _one
 0000035B  80 7D FF 32			cmp numText, 50
 0000035F  74 38			jz _two
 00000361  80 7D FF 33			cmp numText, 51
 00000365  74 39			jz _three
 00000367  80 7D FF 34			cmp numText, 52
 0000036B  74 3A			jz _four
 0000036D  80 7D FF 35			cmp numText, 53
 00000371  74 3B			jz _five
 00000373  80 7D FF 36			cmp numText, 54
 00000377  74 3C			jz _six
 00000379  80 7D FF 37			cmp numText, 55
 0000037D  74 3D			jz _seven
 0000037F  80 7D FF 38			cmp numText, 56
 00000383  74 3E			jz _eight
 00000385  80 7D FF 39			cmp numText, 57
 00000389  74 3F			jz _nine


 0000038B			_zero:
 0000038B  B8 00000000			mov EAX, 0
 00000390  EB 3F			jmp _return

 00000392			_one:
 00000392  B8 00000001			mov EAX, 1
 00000397  EB 38			jmp _return

 00000399			_two:
 00000399  B8 00000002			mov EAX, 2
 0000039E  EB 31			jmp _return

 000003A0			_three:
 000003A0  B8 00000003			mov EAX, 3
 000003A5  EB 2A			jmp _return

 000003A7			_four:
 000003A7  B8 00000004			mov EAX, 4
 000003AC  EB 23			jmp _return

 000003AE			_five:
 000003AE  B8 00000005			mov EAX, 5
 000003B3  EB 1C			jmp _return

 000003B5			_six:
 000003B5  B8 00000006			mov EAX, 6
 000003BA  EB 15			jmp _return

 000003BC			_seven:
 000003BC  B8 00000007			mov EAX, 7
 000003C1  EB 0E			jmp _return

 000003C3			_eight:
 000003C3  B8 00000008			mov EAX, 8
 000003C8  EB 07			jmp _return

 000003CA			_nine:
 000003CA  B8 00000009			mov EAX, 9
 000003CF  EB 00			jmp _return



 000003D1			_return:
 000003D1  89 03			mov [EBX],EAX	;move result to output variable
					
 000003D3  61				POPAD
 000003D4  C9		   *	    leave  
 000003D5  C2 0008			ret 8

 000003D8			ConvertASCIItoNum ENDP


 000003D8			ConvertNumtoASCII PROC
					
					 ; parameter order:  integer value, temp string 1, tempstring2

					LOCAL num:DWORD, quotient:DWORD, remainder:DWORD, newStringLen:DWORD, negativeFlag:DWORD
 000003D8  55		   *	    push   ebp
 000003D9  8B EC	   *	    mov    ebp, esp
 000003DB  83 C4 EC	   *	    add    esp, 0FFFFFFECh
 000003DE  60				PUSHAD

 000003DF  C7 45 EC			mov negativeFlag, 1
	   00000001

 000003E6  B9 00000020			mov ecx, 32
 000003EB  8B 7D 0C			mov EDI, [EBP + 12]		; temp string1 offset from stack

 000003EE			_ClearString_one:
 000003EE  B8 00000000			mov EAX, 0
 000003F3  89 07			mov [EDI], EAX
 000003F5  83 C7 01			add EDI, 1
 000003F8  E2 F4			loop _ClearString_one


					
 000003FA  B9 00000020		mov ecx, 32
 000003FF  8B 7D 10		mov EDI, [EBP + 16]		; temp string 2 offset from stack

 00000402			_ClearString_two:
 00000402  B8 00000000			mov EAX, 0
 00000407  89 07			mov [EDI], EAX
 00000409  83 C7 01			add EDI, 1
 0000040C  E2 F4			loop _ClearString_two





 0000040E  8B 7D 0C			mov EDI, [EBP + 12]		; temp string offset from stack
 00000411  8B 45 08			mov EAX, [EBP + 8]		; integer from stack

 00000414  89 45 FC			mov	num, EAX
 00000417  C7 45 F0			mov newStringLen, 0
	   00000000

					;test if number is negative, if so we need to reverse it and add a negative sign in front
 0000041E  83 F8 00			cmp EAX, 0
 00000421  7C 0B			jl	_numIsNegativeInvert
 00000423  83 F8 00			cmp EAX, 0
 00000426  0F 84 000000A6		jz _NumisJustZero
 0000042C  EB 0C			jmp _MainConversionLoop


					;test if number is just zero

 0000042E			_numIsNegativeInvert:
 0000042E  F7 D8			neg eax
 00000430  89 45 FC			mov num, eax
 00000433  C7 45 EC			mov negativeFlag, 2
	   00000002



 0000043A			_MainConversionLoop:
					;need to repeatedly divide by 10, multiply by zeros until no remainder left, then reverse string array created.

 0000043A  8B 45 FC			mov EAX, num
 0000043D  99				CDQ 
 0000043E  BB 0000000A			mov ebx, 10
 00000443  F7 FB			IDIV ebx
 00000445  89 45 F8			mov quotient, EAX
 00000448  89 55 F4			mov remainder, EDX

 0000044B  83 7D F4 00			cmp remainder, 0
 0000044F  7F 15			jg _remainderExists
 00000451  83 7D F8 00			cmp quotient, 0
 00000455  7F 05			jg _Quotient						; if no quotient and remainder
 00000457  E9 00000095			jmp _AddTERMINATOR


 0000045C			_Quotient:
 0000045C  B8 00000000			mov EAX, 0
 00000461  89 45 FC			mov num, EAX
 00000464  EB 08			jmp _startNumConversion

 00000466			_remainderExists:
 00000466  8B 45 F4			mov EAX, remainder
 00000469  89 45 FC			mov num, EAX
 0000046C  EB 00			jmp _startNumConversion


 0000046E			_startNumConversion:
 0000046E  83 7D FC 00			cmp num, 0
 00000472  74 36			jz _zero_num
 00000474  83 7D FC 01			cmp num, 1
 00000478  74 34			jz _one_num
 0000047A  83 7D FC 02			cmp num, 2
 0000047E  74 32			jz _two_num
 00000480  83 7D FC 03			cmp num, 3
 00000484  74 30			jz _three_num
 00000486  83 7D FC 04			cmp num, 4
 0000048A  74 2E			jz _four_num
 0000048C  83 7D FC 05			cmp num, 5
 00000490  74 2C			jz _five_num
 00000492  83 7D FC 06			cmp num, 6
 00000496  74 2A			jz _six_num
 00000498  83 7D FC 07			cmp num, 7
 0000049C  74 28			jz _seven_num
 0000049E  83 7D FC 08			cmp num, 8
 000004A2  74 26			jz _eight_num
 000004A4  83 7D FC 09			cmp num, 9
 000004A8  74 24			jz _nine_num


 000004AA			_zero_num:
 000004AA  B0 30			mov AL, 48 
 000004AC  EB 30			jmp add_num_to_string

 000004AE			_one_num:
 000004AE  B0 31			mov AL, 49 
 000004B0  EB 2C			jmp add_num_to_string

 000004B2			_two_num:
 000004B2  B0 32			mov AL, 50 
 000004B4  EB 28			jmp add_num_to_string

 000004B6			_three_num:
 000004B6  B0 33			mov AL, 51 
 000004B8  EB 24			jmp add_num_to_string

 000004BA			_four_num:
 000004BA  B0 34			mov AL, 52
 000004BC  EB 20			jmp add_num_to_string

 000004BE			_five_num:
 000004BE  B0 35			mov AL, 53 
 000004C0  EB 1C			jmp add_num_to_string

 000004C2			_six_num:
 000004C2  B0 36			mov AL, 54 
 000004C4  EB 18			jmp add_num_to_string

 000004C6			_seven_num:
 000004C6  B0 37			mov AL, 55 
 000004C8  EB 14			jmp add_num_to_string

 000004CA			_eight_num:
 000004CA  B0 38			mov AL, 56
 000004CC  EB 10			jmp add_num_to_string

 000004CE			_nine_num:
 000004CE  B0 39			mov AL, 57 
 000004D0  EB 0C			jmp add_num_to_string

 000004D2			_NumisJustZero:
 000004D2  B0 30			mov AL, 48
 000004D4  88 07			mov [EDI], AL	;move result to output variable
 000004D6  83 C7 01			add EDI, 1		;increment
 000004D9  FF 45 F0			inc newStringLen
 000004DC  EB 13			jmp _AddTERMINATOR

 000004DE			add_num_to_string:
 000004DE  88 07			mov [EDI], AL	;move result to output variable
 000004E0  83 C7 01			add EDI, 1		;increment
 000004E3  8B 45 F8			mov EAX, quotient
 000004E6  89 45 FC			mov num, EAX
 000004E9  FF 45 F0			inc newStringLen
 000004EC  E9 FFFFFF49			jmp _MainConversionLoop


 000004F1			_AddTERMINATOR:
 000004F1  B0 00			mov	AL, 0
 000004F3  88 07			mov [EDI], AL	;move result to output variable
 000004F5  FF 45 F0			inc newStringLen


 000004F8			_FinishConvertingNumtoString:

					;NEED TO REVERSE STRING AFTERWARDS
 000004F8  8B 4D F0			mov ECX, newStringLen
 000004FB  8B 75 0C			mov ESI, [EBP + 12]		; temp string offset from stack
 000004FE  03 F1			add ESI, ECX			; so source strings starts from end
 00000500  4E				dec ESI
 00000501  4E				dec ESI
 00000502  8B 7D 10			mov EDI, [EBP + 16]		; temp string offset2 from stack
					
 00000505  83 7D EC 02			cmp negativeFlag, 2
 00000509  74 02			jz _addNegativeSignBeforeReversal
 0000050B  EB 0A			jmp _revLoop

 0000050D			_addNegativeSignBeforeReversal:
 0000050D  B8 0000002D			mov EAX, 45
 00000512  89 07			mov [EDI], EAX		; temp string offset2 from stack
 00000514  83 C7 01			add edi, 1

 00000517			_revLoop: ;reference StringManipulator.asm from canvas
 00000517  FD				STD
 00000518  AC				LODSB
 00000519  FC				CLD
 0000051A  AA				STOSB
 0000051B  E2 FA			LOOP _revLoop



 0000051D  61				POPAD
 0000051E  C9		   *	    leave  
 0000051F  C2 000C			ret 12

 00000522			ConvertNumtoASCII ENDP






					;PUSH    OFFSET sum_all_nums
					;PUSH    OFFSET IntegerArray_len
					;PUSH    OFFSET IntegerArray

 00000522			CalculateSum PROC
					LOCAL num:SDWORD 
 00000522  55		   *	    push   ebp
 00000523  8B EC	   *	    mov    ebp, esp
 00000525  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 00000528  60				PUSHAD

 00000529  C7 45 FC			mov num, 0
	   00000000

 00000530  8B 4D 0C			mov ECX, [EBP + 12]		; OFFSET IntegerArray_len
 00000533  8B 09			mov ECX, [ECX]
 00000535  8B 7D 08			mov EDI, [EBP + 8]		; OFFSET IntegerArray

 00000538			_SumLoop:	
 00000538  8B 07			mov EAX, [EDI]
 0000053A  8B 5D FC			mov EBX, num
 0000053D  03 C3			add EAX, EBX
 0000053F  89 45 FC			mov num, EAX
 00000542  83 C7 04			add EDI, 4

 00000545  E2 F1			LOOP _SumLoop

					
 00000547  8B 45 10			mov EAX, [EBP + 16]		; OFFSET sum_all_nums
 0000054A  8B 5D FC			mov EBX, num
 0000054D  89 18			mov [EAX], EBX


 0000054F  61				POPAD
 00000550  C9		   *	    leave  
 00000551  C2 000C			ret 12

 00000554			CalculateSum ENDP


					;PUSH    OFFSET rounded_avg
					;PUSH    OFFSET sum_all_nums
					;PUSH    OFFSET IntegerArray_len

 00000554			CalculateAverage PROC
					LOCAL num:SDWORD, quotient:SDWORD, remainder:SDWORD, divisor:DWORD, dividend: SDWORD ;,doubledRemainder:SDWORD, 
 00000554  55		   *	    push   ebp
 00000555  8B EC	   *	    mov    ebp, esp
 00000557  83 C4 EC	   *	    add    esp, 0FFFFFFECh
 0000055A  60				PUSHAD

 0000055B  C7 45 FC			mov num, 0
	   00000000
 00000562  8B 4D 08			mov ECX, [EBP + 8]		; OFFSET IntegerArray_len
 00000565  8B 09			mov ECX, [ECX]
 00000567  89 4D F0			mov divisor, ECX
 0000056A  8B 45 0C			mov EAX, [EBP + 12]		; OFFSET sum_all_nums
 0000056D  8B 00			mov EAX, [EAX]
 0000056F  89 45 EC			mov dividend, EAX
 00000572  99				CDQ
 00000573  F7 F9			IDIV ECX

 00000575  89 45 F8			mov quotient, EAX
 00000578  89 55 F4			mov remainder, EDX
				;
				; ***********COMMENTED OUT AS PROJECT INSTRUCTIONS CHANGED FROM ROUNDING TO TRUNCATION - REFERENCE ED DISCUSSION 1661642****************
				;
				;	mov EAX, remainder
				;	mov EBX, 2
				;	mul EBX
				;	mov doubledRemainder, EAX
				;
				;
				;	cmp dividend, 0
				;	jl	_testNegativeRounding
				;	jmp _testPositiveRounding
				;
				;_testNegativeRounding:
				;	cmp EAX, dividend
				;	jle _roundNegativeDown
				;	jmp _saveValue
				;
				;_testPositiveRounding:
				;	cmp EAX, dividend
				;	jge _roundPositiveUp
				;	jmp _saveValue
				;
				;_roundPositiveUp:	
				;	inc quotient
				;	jmp _saveValue
				;
				;_roundNegativeDown:
				;	dec quotient

 0000057B			_saveValue:

 0000057B  8B 45 10			mov EAX, [EBP + 16]		; OFFSET rounded_avg
 0000057E  8B 5D F8			mov EBX, quotient
 00000581  89 18			mov [EAX], ebx	





 00000583  61				POPAD
 00000584  C9		   *	    leave  
 00000585  C2 000C			ret 12

 00000588			CalculateAverage ENDP




 00000588			WriteVal PROC

					LOCAL num:SDWORD, arrayLengthNum:SDWORD, integerArrayReference:SDWORD
 00000588  55		   *	    push   ebp
 00000589  8B EC	   *	    mov    ebp, esp
 0000058B  83 C4 F4	   *	    add    esp, 0FFFFFFF4h
 0000058E  60				PUSHAD

 0000058F  8B 4D 0C			mov ECX, [EBP + 12]		; OFFSET integer array length from stack for LOOP counter
 00000592  8B 09			mov ECX, [ECX]
 00000594  89 4D F8			mov arrayLengthNum, ECX
 00000597  8B 75 08			mov ESI, [EBP + 8]		; OFFSET integer array from stack
 0000059A  89 75 F4			mov integerArrayReference, ESI
					;mov EDI, [EBP + 16]	; OFFSET string array from stack


 0000059D			_convertLoop:

 0000059D  8B 45 18			mov EAX, [EBP + 24]		; OFFSET temp_string2 RETURN VARIABLE from stack	
 000005A0  50				PUSH EAX				; push temp_string for ConvertNumtoASCII proc

 000005A1  8B 45 14			mov EAX, [EBP + 20]		; OFFSET temp_string RETURN VARIABLE from stack	
 000005A4  50				PUSH EAX				; push temp_string for ConvertNumtoASCII proc

 000005A5  8B 1E			mov EBX, [ESI]			; save value in EBX
 000005A7  53				PUSH EBX				; push int from integer array by value for ConvertNumtoASCII proc

 000005A8  E8 FFFFFE2B			CALL ConvertNumtoASCII  ; parameter order: return string, int by val

 000005AD  8B 45 18			mov EAX, [EBP + 24]		; access return value from stack that ConvertNumtoASCII used with temp string
					
 000005B0  89 45 FC			mov num, EAX
					mDisplayString num
 000005B3  52		     1		PUSH  EDX				;Save EDX register
 000005B4  8B 55 FC	     1		MOV   EDX, num
 000005B7  E8 00000000 E     1		CALL  WriteString
 000005BC  5A		     1		POP   EDX				;Restore EDX

 000005BD  83 F9 01			cmp ECX, 1
 000005C0  74 0C			jz _noComma

 000005C2			_writeComma:	
 000005C2  8B 45 1C			mov EAX, [EBP + 28]		;comma string
					mDisplayString EAX
 000005C5  52		     1		PUSH  EDX				;Save EDX register
 000005C6  8B D0	     1		MOV   EDX, EAX
 000005C8  E8 00000000 E     1		CALL  WriteString
 000005CD  5A		     1		POP   EDX				;Restore EDX

 000005CE			_noComma:

 000005CE  83 C6 04			add ESI, 4				; increment int array

 000005D1  E2 CA			LOOP _convertLoop
					
					
					
 000005D3  61				POPAD
 000005D4  C9		   *	    leave  
 000005D5  C2 0018			ret 24



 000005D8			WriteVal ENDP



				; =======================================================================================================================================================
				; Name:	setTextColorWhite
				; Procedure to change console text to white.
				; Preconditions: none
				; Postconditions: none
				; Receives: none
				; Returns:  none
				; =======================================================================================================================================================
 000005D8			setTextColorWhite PROC
 000005D8  B8 0000000F			mov		eax, white 
 000005DD  E8 00000000 E		call	SetTextColor
 000005E2  C3				ret
 000005E3			setTextColorWhite ENDP

				; =======================================================================================================================================================
				; Name:	setTextColorGreen
				; Procedure to change console text to green.
				; Preconditions: none
				; Postconditions: none
				; Receives: none
				; Returns:  none
				; =======================================================================================================================================================
 000005E3			setTextColorGreen PROC	
 000005E3  B8 00000002			mov		eax, green 
 000005E8  E8 00000000 E		call	SetTextColor
 000005ED  C3				ret
 000005EE			setTextColorGreen ENDP






				END main
Microsoft (R) Macro Assembler Version 14.29.30133.0	    08/04/22 22:33:42
<Project 6 - String Primitives and Macros      (Proj6_iwanek  Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000577 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000005EE Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CalculateAverage . . . . . . . .	P Near	 00000554 _TEXT	Length= 00000034 Public STDCALL
  num  . . . . . . . . . . . . .	DWord	 bp - 00000004
  quotient . . . . . . . . . . .	DWord	 bp - 00000008
  remainder  . . . . . . . . . .	DWord	 bp - 0000000C
  divisor  . . . . . . . . . . .	DWord	 bp - 00000010
  dividend . . . . . . . . . . .	DWord	 bp - 00000014
  _saveValue . . . . . . . . . .	L Near	 0000057B _TEXT	
CalculateSum . . . . . . . . . .	P Near	 00000522 _TEXT	Length= 00000032 Public STDCALL
  num  . . . . . . . . . . . . .	DWord	 bp - 00000004
  _SumLoop . . . . . . . . . . .	L Near	 00000538 _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ConvertASCIItoNum  . . . . . . .	P Near	 0000033F _TEXT	Length= 00000099 Public STDCALL
  numText  . . . . . . . . . . .	Byte	 bp - 00000001
  _zero  . . . . . . . . . . . .	L Near	 0000038B _TEXT	
  _one . . . . . . . . . . . . .	L Near	 00000392 _TEXT	
  _two . . . . . . . . . . . . .	L Near	 00000399 _TEXT	
  _three . . . . . . . . . . . .	L Near	 000003A0 _TEXT	
  _four  . . . . . . . . . . . .	L Near	 000003A7 _TEXT	
  _five  . . . . . . . . . . . .	L Near	 000003AE _TEXT	
  _six . . . . . . . . . . . . .	L Near	 000003B5 _TEXT	
  _seven . . . . . . . . . . . .	L Near	 000003BC _TEXT	
  _eight . . . . . . . . . . . .	L Near	 000003C3 _TEXT	
  _nine  . . . . . . . . . . . .	L Near	 000003CA _TEXT	
  _return  . . . . . . . . . . .	L Near	 000003D1 _TEXT	
ConvertNumtoASCII  . . . . . . .	P Near	 000003D8 _TEXT	Length= 0000014A Public STDCALL
  num  . . . . . . . . . . . . .	DWord	 bp - 00000004
  quotient . . . . . . . . . . .	DWord	 bp - 00000008
  remainder  . . . . . . . . . .	DWord	 bp - 0000000C
  newStringLen . . . . . . . . .	DWord	 bp - 00000010
  negativeFlag . . . . . . . . .	DWord	 bp - 00000014
  _ClearString_one . . . . . . .	L Near	 000003EE _TEXT	
  _ClearString_two . . . . . . .	L Near	 00000402 _TEXT	
  _numIsNegativeInvert . . . . .	L Near	 0000042E _TEXT	
  _MainConversionLoop  . . . . .	L Near	 0000043A _TEXT	
  _Quotient  . . . . . . . . . .	L Near	 0000045C _TEXT	
  _remainderExists . . . . . . .	L Near	 00000466 _TEXT	
  _startNumConversion  . . . . .	L Near	 0000046E _TEXT	
  _zero_num  . . . . . . . . . .	L Near	 000004AA _TEXT	
  _one_num . . . . . . . . . . .	L Near	 000004AE _TEXT	
  _two_num . . . . . . . . . . .	L Near	 000004B2 _TEXT	
  _three_num . . . . . . . . . .	L Near	 000004B6 _TEXT	
  _four_num  . . . . . . . . . .	L Near	 000004BA _TEXT	
  _five_num  . . . . . . . . . .	L Near	 000004BE _TEXT	
  _six_num . . . . . . . . . . .	L Near	 000004C2 _TEXT	
  _seven_num . . . . . . . . . .	L Near	 000004C6 _TEXT	
  _eight_num . . . . . . . . . .	L Near	 000004CA _TEXT	
  _nine_num  . . . . . . . . . .	L Near	 000004CE _TEXT	
  _NumisJustZero . . . . . . . .	L Near	 000004D2 _TEXT	
  add_num_to_string  . . . . . .	L Near	 000004DE _TEXT	
  _AddTERMINATOR . . . . . . . .	L Near	 000004F1 _TEXT	
  _FinishConvertingNumtoString .	L Near	 000004F8 _TEXT	
  _addNegativeSignBeforeReversal .	L Near	 0000050D _TEXT	
  _revLoop . . . . . . . . . . .	L Near	 00000517 _TEXT	
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000183 _TEXT	Length= 00000187 Public STDCALL
  StringMaxLen . . . . . . . . .	DWord	 bp - 00000004
  StringRef  . . . . . . . . . .	DWord	 bp - 00000008
  NumsEntered  . . . . . . . . .	DWord	 bp - 0000000C
  sign . . . . . . . . . . . . .	DWord	 bp - 00000010
  numTemp  . . . . . . . . . . .	DWord	 bp - 00000014
  returnValueAscii . . . . . . .	DWord	 bp - 00000018
  arrayelements  . . . . . . . .	DWord	 bp - 0000001C
  _PromptUserInput . . . . . . .	L Near	 0000019D _TEXT	
  _convertString . . . . . . . .	L Near	 000001ED _TEXT	
  _checkifSign . . . . . . . . .	L Near	 00000200 _TEXT	
  _Convert . . . . . . . . . . .	L Near	 0000020A _TEXT	
  _NextLoop  . . . . . . . . . .	L Near	 0000023B _TEXT	
  _NotNumError . . . . . . . . .	L Near	 0000023F _TEXT	
  _noInputError  . . . . . . . .	L Near	 00000258 _TEXT	
  _TestifFirstDigitPlus  . . . .	L Near	 00000271 _TEXT	
  _TestifFirstDigitMinus . . . .	L Near	 0000027F _TEXT	
  _signNotFirstError . . . . . .	L Near	 0000028D _TEXT	
  _FinishedConvertingtoNum . . .	L Near	 000002A6 _TEXT	
  _convertNumtoNegative  . . . .	L Near	 000002AE _TEXT	
  _testIfNumtooLarge . . . . . .	L Near	 000002B6 _TEXT	
  _numTooLargeError  . . . . . .	L Near	 000002C9 _TEXT	
  _storeNumtoArray . . . . . . .	L Near	 000002E2 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 00000588 _TEXT	Length= 00000050 Public STDCALL
  num  . . . . . . . . . . . . .	DWord	 bp - 00000004
  arrayLengthNum . . . . . . . .	DWord	 bp - 00000008
  integerArrayReference  . . . .	DWord	 bp - 0000000C
  _convertLoop . . . . . . . . .	L Near	 0000059D _TEXT	
  _writeComma  . . . . . . . . .	L Near	 000005C2 _TEXT	
  _noComma . . . . . . . . . . .	L Near	 000005CE _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
getStringLen . . . . . . . . . .	P Near	 0000030A _TEXT	Length= 00000035 Public STDCALL
  StringLen  . . . . . . . . . .	DWord	 bp - 00000004
  _countLoop . . . . . . . . . .	L Near	 00000320 _TEXT	
  _nocount . . . . . . . . . . .	L Near	 00000330 _TEXT	
  _end . . . . . . . . . . . . .	L Near	 00000332 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000183 Public STDCALL
  _InputNumberLoop . . . . . . .	L Near	 0000001D _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
setTextColorGreen  . . . . . . .	P Near	 000005E3 _TEXT	Length= 0000000B Public STDCALL
setTextColorWhite  . . . . . . .	P Near	 000005D8 _TEXT	Length= 0000000B Public STDCALL
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
Error_char_num . . . . . . . . .	Byte	 000003CE _DATA	
Error_no_input . . . . . . . . .	Byte	 000003A5 _DATA	
Error_sign_use . . . . . . . . .	Byte	 0000040E _DATA	
Error_too_large  . . . . . . . .	Byte	 00000460 _DATA	
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
IntegerArray_len2  . . . . . . .	DWord	 00000379 _DATA	
IntegerArray_len . . . . . . . .	DWord	 00000375 _DATA	
IntegerArray . . . . . . . . . .	DWord	 0000034D _DATA	
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
StringArray  . . . . . . . . . .	DWord	 0000037D _DATA	
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
comma_string . . . . . . . . . .	Byte	 0000054D _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
display_1  . . . . . . . . . . .	Byte	 000004CB _DATA	
display_2  . . . . . . . . . . .	Byte	 000004EF _DATA	
display_3  . . . . . . . . . . .	Byte	 00000513 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 00000550 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
num_prompt . . . . . . . . . . .	Byte	 00000317 _DATA	
program_info_1 . . . . . . . . .	Byte	 00000000 _DATA	
program_info_2 . . . . . . . . .	Byte	 00000053 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
rounded_avg  . . . . . . . . . .	DWord	 00000545 _DATA	
sum_all_nums . . . . . . . . . .	DWord	 00000549 _DATA	
temp_num2  . . . . . . . . . . .	DWord	 000002CF _DATA	
temp_num . . . . . . . . . . . .	DWord	 000002CB _DATA	
temp_string2 . . . . . . . . . .	Byte	 000002F3 _DATA	
temp_string  . . . . . . . . . .	Byte	 000002D3 _DATA	
userString_len . . . . . . . . .	DWord	 000002C7 _DATA	
userString_max_len . . . . . . .	DWord	 00000313 _DATA	
userString . . . . . . . . . . .	Byte	 00000295 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
