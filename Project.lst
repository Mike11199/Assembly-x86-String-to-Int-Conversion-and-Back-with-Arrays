Microsoft (R) Macro Assembler Version 14.29.30133.0	    08/04/22 17:50:40
<Project 6 - String Primitives and Macros      (Proj6_iwanek  Page 1 - 1


				TITLE Project 6 - String Primitives and Macros      (Proj6_iwanekm.asm)

				;--------------------------------------------------------------------------------------------------------------------------------------------------
				; Author:					Michael Iwanek
				; Last Modified:			08/01/2022
				; OSU email address:		iwanekm@oregonstate.edu
				; Course number/section:	CS271 Section 400
				; Project Number:			06
				; Due Date:					08/07/2022
				;--------------------------------------------------------------------------------------------------------------------------------------------------
				; Description: 
				;--------------------------------------------------------------------------------------------------------------------------------------------------
				;			-This program 

				;--------------------------------------------------------------------------------------------------------------------------------------------------


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				mGetString	MACRO	buffer, buffer_size
					PUSH  EDX				;Save EDX register
					PUSH  ECX
					MOV   EDX,  buffer
					MOV   ECX,  [buffer_size]
					CALL  ReadString
					POP   EDX				;Restore EDX
					POP   ECX				;Restore ECX
				ENDM

				mDisplayString	MACRO	buffer
					PUSH  EDX				;Save EDX register
					MOV   EDX, buffer
					CALL  WriteString
					POP   EDX				;Restore EDX
				ENDM

				; (insert constant definitions here)

 00000000			.data
 00000000 48 65 6C 6C 6F	program_info_1		BYTE		"Hello!  Welcome to my program:  String Primitives and Macros by Michael Iwanek",13,10,13,10,0
	   21 20 20 57 65
	   6C 63 6F 6D 65
	   20 74 6F 20 6D
	   79 20 70 72 6F
	   67 72 61 6D 3A
	   20 20 53 74 72
	   69 6E 67 20 50
	   72 69 6D 69 74
	   69 76 65 73 20
	   61 6E 64 20 4D
	   61 63 72 6F 73
	   20 62 79 20 4D
	   69 63 68 61 65
	   6C 20 49 77 61
	   6E 65 6B 0D 0A
	   0D 0A 00
 00000053 50 6C 65 61 73	program_info_2		BYTE		"Please enter in 10 signed decimal integers.  This program will then display each number entered, their average value, and sum.",13,10
	   65 20 65 6E 74
	   65 72 20 69 6E
	   20 31 30 20 73
	   69 67 6E 65 64
	   20 64 65 63 69
	   6D 61 6C 20 69
	   6E 74 65 67 65
	   72 73 2E 20 20
	   54 68 69 73 20
	   70 72 6F 67 72
	   61 6D 20 77 69
	   6C 6C 20 74 68
	   65 6E 20 64 69
	   73 70 6C 61 79
	   20 65 61 63 68
	   20 6E 75 6D 62
	   65 72 20 65 6E
	   74 65 72 65 64
	   2C 20 74 68 65
	   69 72 20 61 76
	   65 72 61 67 65
	   20 76 61 6C 75
	   65 2C 20 61 6E
	   64 20 73 75 6D
	   2E 0D 0A
 000000D3  45 61 63 68 20						BYTE		"Each number must be able to fit within a 32 bit register, or be between the values of -2,147,483,647 and 2,147,483,647 inclusive (or +/- 2^31).",13,10,13,10,0
	   6E 75 6D 62 65
	   72 20 6D 75 73
	   74 20 62 65 20
	   61 62 6C 65 20
	   74 6F 20 66 69
	   74 20 77 69 74
	   68 69 6E 20 61
	   20 33 32 20 62
	   69 74 20 72 65
	   67 69 73 74 65
	   72 2C 20 6F 72
	   20 62 65 20 62
	   65 74 77 65 65
	   6E 20 74 68 65
	   20 76 61 6C 75
	   65 73 20 6F 66
	   20 2D 32 2C 31
	   34 37 2C 34 38
	   33 2C 36 34 37
	   20 61 6E 64 20
	   32 2C 31 34 37
	   2C 34 38 33 2C
	   36 34 37 20 69
	   6E 63 6C 75 73
	   69 76 65 20 28
	   6F 72 20 2B 2F
	   2D 20 32 5E 33
	   31 29 2E 0D 0A
	   0D 0A 00
 00000167  00000032 [		userString			BYTE		50 DUP(?)			;10 digit string, +1 for + or neg sign; +1 for null terminator
	    00
	   ]
 00000199 00000000		userString_len		DWORD		?
 0000019D 00000000		temp_num			SDWORD		?
 000001A1  00000020 [		temp_string			BYTE		32 DUP(?)
	    00
	   ]
 000001C1  00000020 [		temp_string2		BYTE		32 DUP(?)
	    00
	   ]
 000001E1 00000032		userString_max_len	DWORD		LENGTHOF userString
 000001E5 50 6C 65 61 73	num_prompt			BYTE		"Please enter a signed number between -2^31 and 2^31: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 20 62
	   65 74 77 65 65
	   6E 20 2D 32 5E
	   33 31 20 61 6E
	   64 20 32 5E 33
	   31 3A 20 00
 0000021B  0000000A [		IntegerArray		SDWORD		10 DUP(?)
	    00000000
	   ]
 00000243 00000000		IntegerArray_len	DWORD		0 ;num elements
 00000247 00000028		IntegerArray_size	DWORD		SIZEOF IntegerArray	   ;num bytes
 0000024B  0000000A [		StringArray			SDWORD		10 DUP(?)
	    00000000
	   ]
 00000273 45 72 72 6F 72	Error_no_input		BYTE		"Error!  You didn't enter in any numbers.",0 
	   21 20 20 59 6F
	   75 20 64 69 64
	   6E 27 74 20 65
	   6E 74 65 72 20
	   69 6E 20 61 6E
	   79 20 6E 75 6D
	   62 65 72 73 2E
	   00
 0000029C 45 72 72 6F 72	Error_char_num		BYTE		"Error!  You can only enter numbers, and the plus or minus sign.",0 
	   21 20 20 59 6F
	   75 20 63 61 6E
	   20 6F 6E 6C 79
	   20 65 6E 74 65
	   72 20 6E 75 6D
	   62 65 72 73 2C
	   20 61 6E 64 20
	   74 68 65 20 70
	   6C 75 73 20 6F
	   72 20 6D 69 6E
	   75 73 20 73 69
	   67 6E 2E 00
 000002DC 45 72 72 6F 72	Error_sign_use		BYTE		"Error!  You can only enter the plus or minus sign at the beginning of the number.",0 
	   21 20 20 59 6F
	   75 20 63 61 6E
	   20 6F 6E 6C 79
	   20 65 6E 74 65
	   72 20 74 68 65
	   20 70 6C 75 73
	   20 6F 72 20 6D
	   69 6E 75 73 20
	   73 69 67 6E 20
	   61 74 20 74 68
	   65 20 62 65 67
	   69 6E 6E 69 6E
	   67 20 6F 66 20
	   74 68 65 20 6E
	   75 6D 62 65 72
	   2E 00
 0000032E 45 72 72 6F 72	Error_too_large		BYTE		"Error!  Your number must be between the ranges of-2,147,483,647 and 2,147,483,647 inclusive (or +/- 2^31).",0 
	   21 20 20 59 6F
	   75 72 20 6E 75
	   6D 62 65 72 20
	   6D 75 73 74 20
	   62 65 20 62 65
	   74 77 65 65 6E
	   20 74 68 65 20
	   72 61 6E 67 65
	   73 20 6F 66 2D
	   32 2C 31 34 37
	   2C 34 38 33 2C
	   36 34 37 20 61
	   6E 64 20 32 2C
	   31 34 37 2C 34
	   38 33 2C 36 34
	   37 20 69 6E 63
	   6C 75 73 69 76
	   65 20 28 6F 72
	   20 2B 2F 2D 20
	   32 5E 33 31 29
	   2E 00
 00000399 59 6F 75 20 65	display_1			BYTE		"You entered the following numbers: ",0 
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 20
	   00
 000003BD 54 68 65 20 73	display_2			BYTE		"The sum of all numbers entered is: ",0 
	   75 6D 20 6F 66
	   20 61 6C 6C 20
	   6E 75 6D 62 65
	   72 73 20 65 6E
	   74 65 72 65 64
	   20 69 73 3A 20
	   00
 000003E1 54 68 65 20 72	display_3			BYTE		"The rounded average of all numbers entered is: ",0 
	   6F 75 6E 64 65
	   64 20 61 76 65
	   72 61 67 65 20
	   6F 66 20 61 6C
	   6C 20 6E 75 6D
	   62 65 72 73 20
	   65 6E 74 65 72
	   65 64 20 69 73
	   3A 20 00
 00000411 00000000		rounded_avg			SDWORD		?
 00000415 00000000		sum_all_nums		SDWORD		?
 00000419 2C 20 00		comma_string		BYTE		", ",0
 0000041C 54 68 61 6E 6B	goodbye				BYTE		"Thanks for using my program!  Goodbye.",0
	   73 20 66 6F 72
	   20 75 73 69 6E
	   67 20 6D 79 20
	   70 72 6F 67 72
	   61 6D 21 20 20
	   47 6F 6F 64 62
	   79 65 2E 00

 00000000			.code
 00000000			main PROC

				; (insert executable instructions here)
					
					mDisplayString OFFSET program_info_1
 00000000  52		     1		PUSH  EDX				;Save EDX register
 00000001  BA 00000000 R     1		MOV   EDX, OFFSET program_info_1
 00000006  E8 00000000 E     1		CALL  WriteString
 0000000B  5A		     1		POP   EDX				;Restore EDX
					mDisplayString OFFSET program_info_2	
 0000000C  52		     1		PUSH  EDX				;Save EDX register
 0000000D  BA 00000053 R     1		MOV   EDX, OFFSET program_info_2
 00000012  E8 00000000 E     1		CALL  WriteString
 00000017  5A		     1		POP   EDX				;Restore EDX
					
 00000018  B9 0000000A			mov ECX, 10

 0000001D			_InputNumberLoop:

 0000001D  68 0000032E R		PUSH	OFFSET Error_too_large
 00000022  68 00000243 R		PUSH    OFFSET IntegerArray_len
 00000027  68 0000021B R		PUSH    OFFSET IntegerArray
 0000002C  68 0000019D R		PUSH    OFFSET temp_num
 00000031  68 00000199 R		PUSH    OFFSET userString_len
 00000036  68 00000273 R		PUSH	OFFSET Error_no_input
 0000003B  68 0000029C R		PUSH	OFFSET Error_char_num
 00000040  68 000002DC R		PUSH	OFFSET Error_sign_use
 00000045  FF 35 000001E1 R		PUSH    userString_max_len
 0000004B  68 00000167 R		PUSH	OFFSET userString
 00000050  68 000001E5 R		PUSH	OFFSET num_prompt
 00000055  E8 00000106			CALL	ReadVal

 0000005A  E2 C1		LOOP _InputNumberLoop

					
 0000005C  68 00000415 R		PUSH    OFFSET sum_all_nums
 00000061  68 00000243 R		PUSH    OFFSET IntegerArray_len
 00000066  68 0000021B R		PUSH    OFFSET IntegerArray
 0000006B  E8 00000448			CALL CalculateSum	

 00000070  68 00000411 R		PUSH    OFFSET rounded_avg
 00000075  68 00000415 R		PUSH    OFFSET sum_all_nums
 0000007A  68 00000243 R		PUSH    OFFSET IntegerArray_len
 0000007F  E8 00000466			CALL CalculateAverage	

 00000084  E8 00000000 E		CALL	CrLf
					mDisplayString OFFSET display_1
 00000089  52		     1		PUSH  EDX				;Save EDX register
 0000008A  BA 00000399 R     1		MOV   EDX, OFFSET display_1
 0000008F  E8 00000000 E     1		CALL  WriteString
 00000094  5A		     1		POP   EDX				;Restore EDX
 00000095  E8 00000000 E		CALL	CrLf
 0000009A  E8 0000054A			CALL	setTextColorGreen	
 0000009F  68 00000419 R		PUSH    OFFSET comma_string
 000000A4  68 000001C1 R		PUSH    OFFSET temp_string2
 000000A9  68 000001A1 R		PUSH    OFFSET temp_string
 000000AE  68 0000024B R		PUSH    OFFSET StringArray
 000000B3  68 00000243 R		PUSH    OFFSET IntegerArray_len
 000000B8  68 0000021B R		PUSH    OFFSET IntegerArray
 000000BD  E8 000004D6			CALL WriteVal
 000000C2  E8 00000517			CALL	setTextColorWhite		

 000000C7  E8 00000000 E		CALL	CrLf
 000000CC  E8 00000000 E		CALL	CrLf
					mDisplayString OFFSET display_2	
 000000D1  52		     1		PUSH  EDX				;Save EDX register
 000000D2  BA 000003BD R     1		MOV   EDX, OFFSET display_2
 000000D7  E8 00000000 E     1		CALL  WriteString
 000000DC  5A		     1		POP   EDX				;Restore EDX
 000000DD  E8 00000507			CALL	setTextColorGreen	
 000000E2  E8 00000000 E		CALL	CrLf
 000000E7  68 00000415 R		PUSH    OFFSET sum_all_nums
 000000EC  68 000001A1 R		PUSH    OFFSET temp_string
 000000F1  68 000001C1 R		PUSH    OFFSET temp_string2
 000000F6  E8 00000472			CALL DisplaySum
 000000FB  E8 000004DE			CALL	setTextColorWhite	

 00000100  E8 00000000 E		CALL	CrLf
 00000105  E8 00000000 E		CALL	CrLf
					mDisplayString OFFSET display_3	
 0000010A  52		     1		PUSH  EDX				;Save EDX register
 0000010B  BA 000003E1 R     1		MOV   EDX, OFFSET display_3
 00000110  E8 00000000 E     1		CALL  WriteString
 00000115  5A		     1		POP   EDX				;Restore EDX
 00000116  E8 000004CE			CALL	setTextColorGreen	
 0000011B  E8 00000000 E		CALL	CrLf
 00000120  68 00000411 R		PUSH    OFFSET rounded_avg
 00000125  68 000001A1 R		PUSH    OFFSET temp_string
 0000012A  68 000001C1 R		PUSH    OFFSET temp_string2
 0000012F  E8 0000040E			CALL DisplayAverage	
 00000134  E8 000004A5			CALL	setTextColorWhite	
 00000139  E8 00000000 E		CALL	CrLf
 0000013E  E8 00000000 E		CALL	CrLf
					mDisplayString OFFSET goodbye	
 00000143  52		     1		PUSH  EDX				;Save EDX register
 00000144  BA 0000041C R     1		MOV   EDX, OFFSET goodbye
 00000149  E8 00000000 E     1		CALL  WriteString
 0000014E  5A		     1		POP   EDX				;Restore EDX
 0000014F  E8 00000000 E		CALL	CrLf
 00000154  E8 00000000 E		CALL	CrLf




					Invoke ExitProcess,0	; exit to operating system
 00000159  6A 00	   *	    push   +000000000h
 0000015B  E8 00000000 E   *	    call   ExitProcess
 00000160			main ENDP


 00000160			ReadVal PROC

					;***************************************************************************************************************************
					;	1) Invoke the mGetString macro to get user input in the form of a string of digits	
					;***************************************************************************************************************************

					LOCAL StringMaxLen:DWORD, StringRef:DWORD, NumsEntered:DWORD, sign:DWORD, numTemp:DWORD, returnValueAscii:DWORD, arrayelements:DWORD
 00000160  55		   *	    push   ebp
 00000161  8B EC	   *	    mov    ebp, esp
 00000163  83 C4 E4	   *	    add    esp, 0FFFFFFE4h
 00000166  60				PUSHAD

 00000167  8B 45 0C			mov eax, [EBP + 12]
 0000016A  89 45 F8			mov StringRef, eax
 0000016D  8B 45 10			mov eax, [EBP + 16]	
 00000170  89 45 FC			mov StringMaxLen, eax

 00000173			_PromptUserInput:

					mDisplayString [EBP + 8]				    ;prompt num	
 00000173  52		     1		PUSH  EDX				;Save EDX register
 00000174  8B 55 08	     1		MOV   EDX, [EBP + 8]
 00000177  E8 00000000 E     1		CALL  WriteString
 0000017C  5A		     1		POP   EDX				;Restore EDX
				    mGetString StringRef, StringMaxLen			;pass (ref, size) to macro to get user string
 0000017D  52		     1		PUSH  EDX				;Save EDX register
 0000017E  51		     1		PUSH  ECX
 0000017F  8B 55 F8	     1		MOV   EDX,  StringRef
 00000182  8B 4D FC	     1		MOV   ECX,  [StringMaxLen]
 00000185  E8 00000000 E     1		CALL  ReadString
 0000018A  5A		     1		POP   EDX				;Restore EDX
 0000018B  59		     1		POP   ECX				;Restore ECX

					;======GET HOW MANY NUMBERS THE USER ENTERED=====================
 0000018C  FF 75 20			push [EBP + 32]				;push empty output variable by ref
 0000018F  FF 75 F8			push StringRef				;local variable
 00000192  FF 75 FC			push StringMaxLen			;local variable
 00000195  E8 00000147			CALL getStringLen			;get string len
					
 0000019A  8B 45 20			mov eax, [EBP + 32]	
 0000019D  8B 10			mov edx, [eax]
 0000019F  89 55 F4			mov NumsEntered, edx		;local variable to hold nums entered




					
					;***************************************************************************************************************************
					;	2) Convert (USING STRING PRIMITIVES) the string of ASCII digits to its numeric value representation (SDWORD).
					;   validating each char is a valid # (not symbol)                                                                
					;***************************************************************************************************************************

					
					;mov EDX, StringRef				;LOCAL VARIABLE - test delete
					;CALL WriteString				;test delete
					

 000001A2  8B 4D F4			mov ECX, NumsEntered			;test if no nums entered using local variable
 000001A5  83 F9 00			cmp ECX, 0
 000001A8  0F 84 00000081		jz _noInputError
 000001AE  83 F9 0A			cmp ECX, 10
 000001B1  0F 8F 000000E9		jg _numTooLargError
 000001B7  8B 75 F8			mov ESI, StringRef				;if nums were entered, then start loop
 000001BA  8B 4D FC			mov ECX, StringMaxLen			;test if no nums entered using local variable
 000001BD  C7 45 EC			mov numTemp, 0
	   00000000


				;==================LOOP TO CONVERT STRING STARTS HERE=====================================================
 000001C4			_convertString:	
 000001C4  AC				LODSB					;takes ESI and copies to AL, then increment ESI to next element
 000001C5  3C 00			cmp AL, 0
 000001C7  0F 84 000000B0		jz _FinishedConvertingtoNum
 000001CD  3C 30			cmp AL, 48				;nums are from 48 to 57; + is 43 and - is 45
 000001CF  7C 06			jl	_checkifSign	
 000001D1  3C 39			cmp AL, 57
 000001D3  7F 41			jg	_NotNumError
 000001D5  EB 0A			jmp _Convert	


 000001D7			_checkifSign:
 000001D7  3C 2B			cmp AL, 43			; + sign
 000001D9  74 6D			jz	_TestifFirstDigitPlus
 000001DB  3C 2D			cmp AL, 45			; - sign
 000001DD  74 77			jz	_TestifFirstDigitMinus
 000001DF  EB 35			jmp _NotNumError

 000001E1			_Convert:
 000001E1  FF 75 24			PUSH [EBP + 36]			 ;temp return variable from ConvertASCIItoNum
 000001E4  50				PUSH EAX				; this pushes AL and garbage values
 000001E5  E8 0000012C			CALL ConvertASCIItoNum	
					
 000001EA  8B 45 EC			mov EAX, numTemp			; tempNum to hold digits

 000001ED  3D 0CCCCCCC			cmp EAX, 214748364
 000001F2  0F 8F 000000A8		jg  _numTooLargError


 000001F8  BB 0000000A			mov ebx, 10
 000001FD  F7 E3			mul ebx						; multiply by 10 then loop
 000001FF  50				push eax					; save multiplied numTemp

 00000200  8B 5D 24			mov ebx, [EBP + 36]		
 00000203  8B 03			mov eax, [ebx]				; return variable from ConvertASCIItoNum
 00000205  89 45 E8			mov returnValueAscii, eax	; save return variable from ConvertASCIItoNum

 00000208  58				pop eax						; restore multipled value to eax
 00000209  01 45 E8			add returnValueAscii, eax	; add to return variable
 0000020C  8B 45 E8			mov	eax, returnValueAscii	; move num so far to eax
 0000020F  89 45 EC			mov numTemp, EAX			; save to numTemp for next loop

 00000212			_NextLoop:
					
 00000212  E2 B0			loop _ConvertString
 00000214  EB 67			jmp _FinishedConvertingtoNum
				;==================LOOP TO CONVERT STRING ENDS HERE=====================================================



				;Errors and testing if + or - if first char
 00000216_NotNumError:
					
					mDisplayString [EBP + 24]				;not num string
 00000216  52		     1		PUSH  EDX				;Save EDX register
 00000217  8B 55 18	     1		MOV   EDX, [EBP + 24]
 0000021A  E8 00000000 E     1		CALL  WriteString
 0000021F  5A		     1		POP   EDX				;Restore EDX
 00000220  E8 00000000 E		call CrLf
 00000225  E8 00000000 E		call CrLF
 0000022A  E9 FFFFFF44			jmp _PromptUserInput


 0000022F			_noInputError:
					mDisplayString [EBP + 28]				;no input string
 0000022F  52		     1		PUSH  EDX				;Save EDX register
 00000230  8B 55 1C	     1		MOV   EDX, [EBP + 28]
 00000233  E8 00000000 E     1		CALL  WriteString
 00000238  5A		     1		POP   EDX				;Restore EDX
 00000239  E8 00000000 E		call CrLf
 0000023E  E8 00000000 E		call CrLF
 00000243  E9 FFFFFF2B			jmp _PromptUserInput

 00000248			_TestifFirstDigitPlus:
 00000248  39 4D FC			cmp StringMaxLen, ECX
 0000024B  75 17			jnz _signNotFirstError
 0000024D  C7 45 F0			mov sign, 1	
	   00000001
 00000254  EB BC			jmp _NextLoop


 00000256			_TestifFirstDigitMinus:
 00000256  39 4D FC			cmp StringMaxLen, ECX
 00000259  75 09			jnz _signNotFirstError
 0000025B  C7 45 F0			mov sign, 2							; local variable set as negative
	   00000002
 00000262  EB AE			jmp _NextLoop

 00000264			_signNotFirstError:
					mDisplayString [EBP + 20]				;prompt num	
 00000264  52		     1		PUSH  EDX				;Save EDX register
 00000265  8B 55 14	     1		MOV   EDX, [EBP + 20]
 00000268  E8 00000000 E     1		CALL  WriteString
 0000026D  5A		     1		POP   EDX				;Restore EDX
 0000026E  E8 00000000 E		call CrLf
 00000273  E8 00000000 E		call CrLF
 00000278  E9 FFFFFEF6			jmp _PromptUserInput




					;***************************************************************************************************************************
					;	3) Store this one value in a memory variable (output paratmeter, by reference).                                                              
					;***************************************************************************************************************************

 0000027D			_FinishedConvertingtoNum:
					
 0000027D  83 7D F0 02			cmp sign, 2
 00000281  74 02			jz _convertNumtoNegative
 00000283  EB 08			jmp _testIfNumtooLarge
					

 00000285			_convertNumtoNegative:
 00000285  8B 45 E8			mov eax, returnValueAscii  
 00000288  F7 D8			neg eax
 0000028A  89 45 E8			mov returnValueAscii, eax 


 0000028D			_testIfNumtooLarge:
 0000028D  8B 45 E8			mov EAX, returnValueAscii	
 00000290  3D 7FFFFFFF			cmp EAX, 2147483647
 00000295  7F 09			jg	_numTooLargError
 00000297  3D 80000001			cmp EAX, -2147483647
 0000029C  7C 02			jl	_numTooLargError
 0000029E  EB 19			jmp _storeNumtoArray

 000002A0			_numTooLargError:
					mDisplayString [EBP + 48]	
 000002A0  52		     1		PUSH  EDX				;Save EDX register
 000002A1  8B 55 30	     1		MOV   EDX, [EBP + 48]
 000002A4  E8 00000000 E     1		CALL  WriteString
 000002A9  5A		     1		POP   EDX				;Restore EDX
 000002AA  E8 00000000 E		call CrLf
 000002AF  E8 00000000 E		call CrLF
 000002B4  E9 FFFFFEBA			jmp _PromptUserInput	
					


 000002B9			_storeNumtoArray:

 000002B9  8B 75 28			mov     ESI, [EBP + 40]				    ; offset of int array		
 000002BC  8B 45 2C			MOV		EAX, [EBP + 44]					; offset IntegerArray length variable to track how many elements are in array
 000002BF  8B 00			mov		EAX, [EAX]
 000002C1  89 45 E4			mov		arrayelements, EAX				; local variable
 000002C4  BB 00000004			mov		EBX, 4
 000002C9  F7 E3			mul		EBX	
 000002CB  8B 4D E8			mov		ECX, returnValueAscii
 000002CE  89 0C 06			mov		[ESI + EAX], ECX		; store num in int array + offset to put in the last postion of the array

 000002D1  8B 7D 2C			mov		EDI, [EBP + 44]
 000002D4  FF 45 E4			inc		arrayelements
 000002D7  8B 45 E4			mov		eax, arrayelements
 000002DA  89 07			MOV	    [EDI], eax				;store count of array elements


 000002DC  61				POPAD
 000002DD  C9		   *	    leave  
 000002DE  C2 002C			RET 44					; dereference passed parameters


 000002E1			ReadVal ENDP


 000002E1			getStringLen PROC
					
					LOCAL StringLen:DWORD
 000002E1  55		   *	    push   ebp
 000002E2  8B EC	   *	    mov    ebp, esp
 000002E4  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 000002E7  60				PUSHAD

 000002E8  B9 0000001E			mov ECX, 30				;max length for counter
 000002ED  8B 75 0C			mov ESI, [EBP + 12]		;output ref

 000002F0  C7 45 FC			mov StringLen, 0
	   00000000
					
 000002F7			_countLoop:
 000002F7  AC				LODSB	
 000002F8  3C 00			cmp AL, 0
 000002FA  7E 0D			jle _end
 000002FC  3C 2B			cmp AL, 43			; + sign
 000002FE  74 07			jz _nocount
 00000300  3C 2D			cmp AL, 45			; - sign
 00000302  74 03			jz _nocount
 00000304  FF 45 FC			inc StringLen

 00000307			_nocount:
 00000307  E2 EE			loop _countLoop
					
 00000309			_end:
					
 00000309  8B 45 FC			mov EAX, StringLen		;LOCAL VARIABLE
 0000030C  8B 55 10			mov EDX, [EBP + 16] 	;move count to output variable
 0000030F  89 02			mov [EDX], EAX 			;move count to output variable
					
 00000311  61				POPAD
 00000312  C9		   *	    leave  
 00000313  C2 000C			ret 12

 00000316			getStringLen ENDP



 00000316			ConvertASCIItoNum PROC
					
					LOCAL numText:BYTE 
 00000316  55		   *	    push   ebp
 00000317  8B EC	   *	    mov    ebp, esp
 00000319  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 0000031C  60				PUSHAD

 0000031D  8B 45 08			mov EAX, [EBP + 8]		;whole EAX register
 00000320  8B 5D 0C			mov EBX, [EBP + 12]		;output variable

 00000323  88 45 FF			mov numText, AL		;technically comparing AL here


 00000326  80 7D FF 30			cmp numText, 48
 0000032A  74 36			jz _zero
 0000032C  80 7D FF 31			cmp numText, 49
 00000330  74 37			jz _one
 00000332  80 7D FF 32			cmp numText, 50
 00000336  74 38			jz _two
 00000338  80 7D FF 33			cmp numText, 51
 0000033C  74 39			jz _three
 0000033E  80 7D FF 34			cmp numText, 52
 00000342  74 3A			jz _four
 00000344  80 7D FF 35			cmp numText, 53
 00000348  74 3B			jz _five
 0000034A  80 7D FF 36			cmp numText, 54
 0000034E  74 3C			jz _six
 00000350  80 7D FF 37			cmp numText, 55
 00000354  74 3D			jz _seven
 00000356  80 7D FF 38			cmp numText, 56
 0000035A  74 3E			jz _eight
 0000035C  80 7D FF 39			cmp numText, 57
 00000360  74 3F			jz _nine


 00000362			_zero:
 00000362  B8 00000000			mov EAX, 0
 00000367  EB 3F			jmp _return

 00000369			_one:
 00000369  B8 00000001			mov EAX, 1
 0000036E  EB 38			jmp _return

 00000370			_two:
 00000370  B8 00000002			mov EAX, 2
 00000375  EB 31			jmp _return

 00000377			_three:
 00000377  B8 00000003			mov EAX, 3
 0000037C  EB 2A			jmp _return

 0000037E			_four:
 0000037E  B8 00000004			mov EAX, 4
 00000383  EB 23			jmp _return

 00000385			_five:
 00000385  B8 00000005			mov EAX, 5
 0000038A  EB 1C			jmp _return

 0000038C			_six:
 0000038C  B8 00000006			mov EAX, 6
 00000391  EB 15			jmp _return

 00000393			_seven:
 00000393  B8 00000007			mov EAX, 7
 00000398  EB 0E			jmp _return

 0000039A			_eight:
 0000039A  B8 00000008			mov EAX, 8
 0000039F  EB 07			jmp _return

 000003A1			_nine:
 000003A1  B8 00000009			mov EAX, 9
 000003A6  EB 00			jmp _return



 000003A8			_return:
 000003A8  89 03			mov [EBX],EAX	;move result to output variable
					
 000003AA  61				POPAD
 000003AB  C9		   *	    leave  
 000003AC  C2 0008			ret 8

 000003AF			ConvertASCIItoNum ENDP


 000003AF			ConvertNumtoASCII PROC
					
					 ; parameter order:  integer value, temp string 1, tempstring2

					LOCAL num:DWORD, quotient:DWORD, remainder:DWORD, newStringLen:DWORD
 000003AF  55		   *	    push   ebp
 000003B0  8B EC	   *	    mov    ebp, esp
 000003B2  83 C4 F0	   *	    add    esp, 0FFFFFFF0h
 000003B5  60				PUSHAD

 000003B6  B9 00000020			mov ecx, 32
 000003BB  8B 7D 0C			mov EDI, [EBP + 12]		; temp string1 offset from stack

 000003BE			_ClearString_one:
 000003BE  B8 00000000			mov EAX, 0
 000003C3  89 07			mov [EDI], EAX
 000003C5  83 C7 01			add EDI, 1
 000003C8  E2 F4			loop _ClearString_one


					
 000003CA  B9 00000020		mov ecx, 32
 000003CF  8B 7D 10		mov EDI, [EBP + 16]		; temp string 2 offset from stack

 000003D2			_ClearString_two:
 000003D2  B8 00000000			mov EAX, 0
 000003D7  89 07			mov [EDI], EAX
 000003D9  83 C7 01			add EDI, 1
 000003DC  E2 F4			loop _ClearString_two





 000003DE  8B 7D 0C			mov EDI, [EBP + 12]		; temp string offset from stack
 000003E1  8B 45 08			mov EAX, [EBP + 8]		; integer from stack

 000003E4  89 45 FC			mov	num, EAX
 000003E7  C7 45 F0			mov newStringLen, 0
	   00000000


 000003EE			_MainConversionLoop:
					;need to repeatedly divide by 10, multiply by zeros until no remainder left, then reverse string array created.

 000003EE  8B 45 FC			mov EAX, num
 000003F1  99				CDQ 
 000003F2  BB 0000000A			mov ebx, 10
 000003F7  F7 FB			IDIV ebx
 000003F9  89 45 F8			mov quotient, EAX
 000003FC  89 55 F4			mov remainder, EDX

 000003FF  83 7D F4 00			cmp remainder, 0
 00000403  7F 15			jg _remainderExists
 00000405  83 7D F8 00			cmp quotient, 0
 00000409  7F 05			jg _Quotient						; if no quotient and remainder
 0000040B  E9 00000089			jmp _AddTERMINATOR


 00000410			_Quotient:
 00000410  B8 00000000			mov EAX, 0
 00000415  89 45 FC			mov num, EAX
 00000418  EB 08			jmp _startNumConversion

 0000041A			_remainderExists:
 0000041A  8B 45 F4			mov EAX, remainder
 0000041D  89 45 FC			mov num, EAX
 00000420  EB 00			jmp _startNumConversion


 00000422			_startNumConversion:
 00000422  83 7D FC 00			cmp num, 0
 00000426  74 36			jz _zero_num
 00000428  83 7D FC 01			cmp num, 1
 0000042C  74 34			jz _one_num
 0000042E  83 7D FC 02			cmp num, 2
 00000432  74 32			jz _two_num
 00000434  83 7D FC 03			cmp num, 3
 00000438  74 30			jz _three_num
 0000043A  83 7D FC 04			cmp num, 4
 0000043E  74 2E			jz _four_num
 00000440  83 7D FC 05			cmp num, 5
 00000444  74 2C			jz _five_num
 00000446  83 7D FC 06			cmp num, 6
 0000044A  74 2A			jz _six_num
 0000044C  83 7D FC 07			cmp num, 7
 00000450  74 28			jz _seven_num
 00000452  83 7D FC 08			cmp num, 8
 00000456  74 26			jz _eight_num
 00000458  83 7D FC 09			cmp num, 9
 0000045C  74 24			jz _nine_num


 0000045E			_zero_num:
 0000045E  B0 30			mov AL, 48 
 00000460  EB 24			jmp add_num_to_string

 00000462			_one_num:
 00000462  B0 31			mov AL, 49 
 00000464  EB 20			jmp add_num_to_string

 00000466			_two_num:
 00000466  B0 32			mov AL, 50 
 00000468  EB 1C			jmp add_num_to_string

 0000046A			_three_num:
 0000046A  B0 33			mov AL, 51 
 0000046C  EB 18			jmp add_num_to_string

 0000046E			_four_num:
 0000046E  B0 34			mov AL, 52
 00000470  EB 14			jmp add_num_to_string

 00000472			_five_num:
 00000472  B0 35			mov AL, 53 
 00000474  EB 10			jmp add_num_to_string

 00000476			_six_num:
 00000476  B0 36			mov AL, 54 
 00000478  EB 0C			jmp add_num_to_string

 0000047A			_seven_num:
 0000047A  B0 37			mov AL, 55 
 0000047C  EB 08			jmp add_num_to_string

 0000047E			_eight_num:
 0000047E  B0 38			mov AL, 56
 00000480  EB 04			jmp add_num_to_string

 00000482			_nine_num:
 00000482  B0 39			mov AL, 57 
 00000484  EB 00			jmp add_num_to_string



 00000486			add_num_to_string:
 00000486  88 07			mov [EDI], AL	;move result to output variable
 00000488  83 C7 01			add EDI, 1		;increment
 0000048B  8B 45 F8			mov EAX, quotient
 0000048E  89 45 FC			mov num, EAX
 00000491  FF 45 F0			inc newStringLen
 00000494  E9 FFFFFF55			jmp _MainConversionLoop


 00000499			_AddTERMINATOR:
 00000499  B0 00			mov	AL, 0
 0000049B  88 07			mov [EDI], AL	;move result to output variable
 0000049D  FF 45 F0			inc newStringLen


 000004A0			_FinishConvertingNumtoString:

					;NEED TO REVERSE STRING AFTERWARDS
 000004A0  8B 4D F0			mov ECX, newStringLen
 000004A3  8B 75 0C			mov ESI, [EBP + 12]		; temp string offset from stack
 000004A6  03 F1			add ESI, ECX			; so source strings starts from end
 000004A8  4E				dec ESI
 000004A9  4E				dec ESI
 000004AA  8B 7D 10			mov EDI, [EBP + 16]		; temp string offset2 from stack
					
 000004AD			_revLoop: ;reference StringManipulator.asm from canvas
 000004AD  FD				STD
 000004AE  AC				LODSB
 000004AF  FC				CLD
 000004B0  AA				STOSB
 000004B1  E2 FA			LOOP _revLoop



 000004B3  61				POPAD
 000004B4  C9		   *	    leave  
 000004B5  C2 000C			ret 12

 000004B8			ConvertNumtoASCII ENDP






					;PUSH    OFFSET sum_all_nums
					;PUSH    OFFSET IntegerArray_len
					;PUSH    OFFSET IntegerArray

 000004B8			CalculateSum PROC
					LOCAL num:SDWORD 
 000004B8  55		   *	    push   ebp
 000004B9  8B EC	   *	    mov    ebp, esp
 000004BB  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 000004BE  60				PUSHAD

 000004BF  C7 45 FC			mov num, 0
	   00000000

 000004C6  8B 4D 0C			mov ECX, [EBP + 12]		; OFFSET IntegerArray_len
 000004C9  8B 09			mov ECX, [ECX]
 000004CB  8B 7D 08			mov EDI, [EBP + 8]		; OFFSET IntegerArray

 000004CE			_SumLoop:	
 000004CE  8B 07			mov EAX, [EDI]
 000004D0  8B 5D FC			mov EBX, num
 000004D3  03 C3			add EAX, EBX
 000004D5  89 45 FC			mov num, EAX
 000004D8  83 C7 04			add EDI, 4

 000004DB  E2 F1			LOOP _SumLoop

					
 000004DD  8B 45 10			mov EAX, [EBP + 16]		; OFFSET sum_all_nums
 000004E0  8B 5D FC			mov EBX, num
 000004E3  89 18			mov [EAX], EBX


 000004E5  61				POPAD
 000004E6  C9		   *	    leave  
 000004E7  C2 000C			ret 12

 000004EA			CalculateSum ENDP


					;PUSH    OFFSET rounded_avg
					;PUSH    OFFSET sum_all_nums
					;PUSH    OFFSET IntegerArray_len

 000004EA			CalculateAverage PROC
					LOCAL num:SDWORD, quotient:SDWORD, remainder:SDWORD, doubledRemainder:SDWORD
 000004EA  55		   *	    push   ebp
 000004EB  8B EC	   *	    mov    ebp, esp
 000004ED  83 C4 F0	   *	    add    esp, 0FFFFFFF0h
 000004F0  60				PUSHAD

 000004F1  C7 45 FC			mov num, 0
	   00000000
 000004F8  8B 4D 08			mov ECX, [EBP + 8]		; OFFSET IntegerArray_len
 000004FB  8B 09			mov ECX, [ECX]
 000004FD  8B 45 0C			mov EAX, [EBP + 12]		; OFFSET sum_all_nums
 00000500  8B 00			mov EAX, [EAX]
 00000502  99				CDQ
 00000503  F7 F9			IDIV ECX

 00000505  89 45 F8			mov quotient, EAX
 00000508  89 55 F4			mov remainder, EDX
					
 0000050B  8B 45 F4			mov EAX, remainder
 0000050E  BB 00000002			mov EBX, 2
 00000513  F7 E3			mul EBX
 00000515  89 45 F0			mov doubledRemainder, EAX

					;test delete start
					;mov EAX, quotient
					;CALL WriteInt
					;mov EAX, remainder
					;CALL WriteInt
					;mov EAX, doubledRemainder
					;CALL WriteInt
					;test delete end

 00000518  83 F8 00			cmp EAX, 0
 0000051B  7C 02			jl	_testNegativeRounding
 0000051D  EB 07			jmp _testPositiveRounding

 0000051F			_testNegativeRounding:
 0000051F  3B 45 F8			cmp EAX, quotient
 00000522  7E 0E			jle _roundNegativeDown
 00000524  EB 0F			jmp _saveValue

 00000526			_testPositiveRounding:
 00000526  3B 45 F8			cmp EAX, quotient
 00000529  7D 02			jge _roundPositiveUp
 0000052B  EB 08			jmp _saveValue

 0000052D			_roundPositiveUp:	
 0000052D  FF 45 F8			inc quotient
 00000530  EB 03			jmp _saveValue

 00000532			_roundNegativeDown:
 00000532  FF 4D F8			dec quotient

 00000535			_saveValue:

 00000535  8B 45 10			mov EAX, [EBP + 16]		; OFFSET rounded_avg
 00000538  8B 5D F8			mov EBX, quotient
 0000053B  89 18			mov [EAX], ebx	



					;test delete start
					;mov EAX, [EBP + 16]		; OFFSET rounded_avg
					;mov EAX, [EAX]
					;CALL WriteInt
					;test delete end


 0000053D  61				POPAD
 0000053E  C9		   *	    leave  
 0000053F  C2 000C			ret 12

 00000542			CalculateAverage ENDP




					;PUSH    OFFSET rounded_avg
					;PUSH    OFFSET temp_string
					;PUSH    OFFSET temp_string2


 00000542			DisplayAverage PROC
					LOCAL num:SDWORD, numString:DWORD
 00000542  55		   *	    push   ebp
 00000543  8B EC	   *	    mov    ebp, esp
 00000545  83 C4 F8	   *	    add    esp, 0FFFFFFF8h
 00000548  60				PUSHAD
					
 00000549  8B 45 08			mov EAX, [EBP + 8]		; OFFSET temp_string 2
 0000054C  50				PUSH EAX

 0000054D  8B 45 0C			mov EAX, [EBP + 12]		; OFFSET temp_string 
 00000550  50				PUSH EAX

 00000551  8B 45 10			mov EAX, [EBP + 16]		; OFFSET rounded_avg
 00000554  8B 00			mov EAX, [EAX]
 00000556  50				PUSH EAX


					; parameter order:  integer value, temp string 1, tempstring2
 00000557  E8 FFFFFE53			CALL ConvertNumtoASCII

 0000055C  8B 45 08			mov EAX, [EBP + 8]
					mDisplayString EAX
 0000055F  52		     1		PUSH  EDX				;Save EDX register
 00000560  8B D0	     1		MOV   EDX, EAX
 00000562  E8 00000000 E     1		CALL  WriteString
 00000567  5A		     1		POP   EDX				;Restore EDX

 00000568  61				POPAD
 00000569  C9		   *	    leave  
 0000056A  C2 000C			ret 12

 0000056D			DisplayAverage ENDP
Proj6_iwanekm.asm(785) : warning A6004:procedure argument or local not referenced : num
Proj6_iwanekm.asm(785) : warning A6004:procedure argument or local not referenced : numString


 0000056D			DisplaySum PROC
					LOCAL num:SDWORD, numString:DWORD
 0000056D  55		   *	    push   ebp
 0000056E  8B EC	   *	    mov    ebp, esp
 00000570  83 C4 F8	   *	    add    esp, 0FFFFFFF8h
 00000573  60				PUSHAD
					
 00000574  8B 45 08			mov EAX, [EBP + 8]		; OFFSET temp_string 2
 00000577  50				PUSH EAX

 00000578  8B 45 0C			mov EAX, [EBP + 12]		; OFFSET temp_string 
 0000057B  50				PUSH EAX

 0000057C  8B 45 10			mov EAX, [EBP + 16]		; OFFSET rounded_avg
 0000057F  8B 00			mov EAX, [EAX]
 00000581  50				PUSH EAX


					; parameter order:  integer value, temp string 1, tempstring2
 00000582  E8 FFFFFE28			CALL ConvertNumtoASCII

 00000587  8B 45 08			mov EAX, [EBP + 8]
					mDisplayString EAX
 0000058A  52		     1		PUSH  EDX				;Save EDX register
 0000058B  8B D0	     1		MOV   EDX, EAX
 0000058D  E8 00000000 E     1		CALL  WriteString
 00000592  5A		     1		POP   EDX				;Restore EDX

 00000593  61				POPAD
 00000594  C9		   *	    leave  
 00000595  C2 000C			ret 12

 00000598			DisplaySum ENDP
Proj6_iwanekm.asm(812) : warning A6004:procedure argument or local not referenced : num
Proj6_iwanekm.asm(812) : warning A6004:procedure argument or local not referenced : numString


					;PUSH    OFFSET temp_string2
					;PUSH    OFFSET temp_string
					;PUSH    OFFSET StringArray
					;PUSH    OFFSET IntegerArray_len
					;PUSH    OFFSET IntegerArray


 00000598			WriteVal PROC

					LOCAL num:SDWORD, numStringOffset:DWORD
 00000598  55		   *	    push   ebp
 00000599  8B EC	   *	    mov    ebp, esp
 0000059B  83 C4 F8	   *	    add    esp, 0FFFFFFF8h
 0000059E  60				PUSHAD

 0000059F  8B 4D 0C			mov ECX, [EBP + 12]		; OFFSET integer array length from stack for LOOP counter
 000005A2  8B 09			mov ECX, [ECX]
 000005A4  8B 75 08			mov ESI, [EBP + 8]		; OFFSET integer array from stack
					;mov EDI, [EBP + 16]		; OFFSET string array from stack

 000005A7			_convertLoop:

 000005A7  8B 45 18			mov EAX, [EBP + 24]		; OFFSET temp_string2 RETURN VARIABLE from stack	
 000005AA  50				PUSH EAX				; push temp_string for ConvertNumtoASCII proc

 000005AB  8B 45 14			mov EAX, [EBP + 20]		; OFFSET temp_string RETURN VARIABLE from stack	
 000005AE  50				PUSH EAX				; push temp_string for ConvertNumtoASCII proc

 000005AF  8B 1E			mov EBX, [ESI]			; save value in EBX
 000005B1  53				PUSH EBX				; push int from integer array by value for ConvertNumtoASCII proc

 000005B2  E8 FFFFFDF8			CALL ConvertNumtoASCII  ; parameter order: return string, int by val

 000005B7  8B 45 18			mov EAX, [EBP + 24]		; access return value from stack that ConvertNumtoASCII used with temp string
					
					mDisplayString EAX
 000005BA  52		     1		PUSH  EDX				;Save EDX register
 000005BB  8B D0	     1		MOV   EDX, EAX
 000005BD  E8 00000000 E     1		CALL  WriteString
 000005C2  5A		     1		POP   EDX				;Restore EDX

 000005C3  83 F9 01			cmp ECX, 1
 000005C6  74 0C			jz _noComma

 000005C8			_writeComma:	
 000005C8  8B 45 1C			mov EAX, [EBP + 28]		;comma string
					mDisplayString EAX
 000005CB  52		     1		PUSH  EDX				;Save EDX register
 000005CC  8B D0	     1		MOV   EDX, EAX
 000005CE  E8 00000000 E     1		CALL  WriteString
 000005D3  5A		     1		POP   EDX				;Restore EDX

 000005D4			_noComma:

 000005D4  83 C6 04			add ESI, 4				; increment int array

 000005D7  E2 CE			LOOP _convertLoop
					
					
					
 000005D9  61				POPAD
 000005DA  C9		   *	    leave  
 000005DB  C2 0018			ret 24



 000005DE			WriteVal ENDP
Proj6_iwanekm.asm(869) : warning A6004:procedure argument or local not referenced : num
Proj6_iwanekm.asm(869) : warning A6004:procedure argument or local not referenced : numStringOffset



				; =======================================================================================================================================================
				; Name:	setTextColorWhite
				; Procedure to change console text to white.
				; Preconditions: none
				; Postconditions: none
				; Receives: none
				; Returns:  none
				; =======================================================================================================================================================
 000005DE			setTextColorWhite PROC
 000005DE  B8 0000000F			mov		eax, white 
 000005E3  E8 00000000 E		call	SetTextColor
 000005E8  C3				ret
 000005E9			setTextColorWhite ENDP

				; =======================================================================================================================================================
				; Name:	setTextColorGreen
				; Procedure to change console text to green.
				; Preconditions: none
				; Postconditions: none
				; Receives: none
				; Returns:  none
				; =======================================================================================================================================================
 000005E9			setTextColorGreen PROC	
 000005E9  B8 00000002			mov		eax, green 
 000005EE  E8 00000000 E		call	SetTextColor
 000005F3  C3				ret
 000005F4			setTextColorGreen ENDP






				END main
Microsoft (R) Macro Assembler Version 14.29.30133.0	    08/04/22 17:50:40
<Project 6 - String Primitives and Macros      (Proj6_iwanek  Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000443 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000005F4 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CalculateAverage . . . . . . . .	P Near	 000004EA _TEXT	Length= 00000058 Public STDCALL
  num  . . . . . . . . . . . . .	DWord	 bp - 00000004
  quotient . . . . . . . . . . .	DWord	 bp - 00000008
  remainder  . . . . . . . . . .	DWord	 bp - 0000000C
  doubledRemainder . . . . . . .	DWord	 bp - 00000010
  _testNegativeRounding  . . . .	L Near	 0000051F _TEXT	
  _testPositiveRounding  . . . .	L Near	 00000526 _TEXT	
  _roundPositiveUp . . . . . . .	L Near	 0000052D _TEXT	
  _roundNegativeDown . . . . . .	L Near	 00000532 _TEXT	
  _saveValue . . . . . . . . . .	L Near	 00000535 _TEXT	
CalculateSum . . . . . . . . . .	P Near	 000004B8 _TEXT	Length= 00000032 Public STDCALL
  num  . . . . . . . . . . . . .	DWord	 bp - 00000004
  _SumLoop . . . . . . . . . . .	L Near	 000004CE _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ConvertASCIItoNum  . . . . . . .	P Near	 00000316 _TEXT	Length= 00000099 Public STDCALL
  numText  . . . . . . . . . . .	Byte	 bp - 00000001
  _zero  . . . . . . . . . . . .	L Near	 00000362 _TEXT	
  _one . . . . . . . . . . . . .	L Near	 00000369 _TEXT	
  _two . . . . . . . . . . . . .	L Near	 00000370 _TEXT	
  _three . . . . . . . . . . . .	L Near	 00000377 _TEXT	
  _four  . . . . . . . . . . . .	L Near	 0000037E _TEXT	
  _five  . . . . . . . . . . . .	L Near	 00000385 _TEXT	
  _six . . . . . . . . . . . . .	L Near	 0000038C _TEXT	
  _seven . . . . . . . . . . . .	L Near	 00000393 _TEXT	
  _eight . . . . . . . . . . . .	L Near	 0000039A _TEXT	
  _nine  . . . . . . . . . . . .	L Near	 000003A1 _TEXT	
  _return  . . . . . . . . . . .	L Near	 000003A8 _TEXT	
ConvertNumtoASCII  . . . . . . .	P Near	 000003AF _TEXT	Length= 00000109 Public STDCALL
  num  . . . . . . . . . . . . .	DWord	 bp - 00000004
  quotient . . . . . . . . . . .	DWord	 bp - 00000008
  remainder  . . . . . . . . . .	DWord	 bp - 0000000C
  newStringLen . . . . . . . . .	DWord	 bp - 00000010
  _ClearString_one . . . . . . .	L Near	 000003BE _TEXT	
  _ClearString_two . . . . . . .	L Near	 000003D2 _TEXT	
  _MainConversionLoop  . . . . .	L Near	 000003EE _TEXT	
  _Quotient  . . . . . . . . . .	L Near	 00000410 _TEXT	
  _remainderExists . . . . . . .	L Near	 0000041A _TEXT	
  _startNumConversion  . . . . .	L Near	 00000422 _TEXT	
  _zero_num  . . . . . . . . . .	L Near	 0000045E _TEXT	
  _one_num . . . . . . . . . . .	L Near	 00000462 _TEXT	
  _two_num . . . . . . . . . . .	L Near	 00000466 _TEXT	
  _three_num . . . . . . . . . .	L Near	 0000046A _TEXT	
  _four_num  . . . . . . . . . .	L Near	 0000046E _TEXT	
  _five_num  . . . . . . . . . .	L Near	 00000472 _TEXT	
  _six_num . . . . . . . . . . .	L Near	 00000476 _TEXT	
  _seven_num . . . . . . . . . .	L Near	 0000047A _TEXT	
  _eight_num . . . . . . . . . .	L Near	 0000047E _TEXT	
  _nine_num  . . . . . . . . . .	L Near	 00000482 _TEXT	
  add_num_to_string  . . . . . .	L Near	 00000486 _TEXT	
  _AddTERMINATOR . . . . . . . .	L Near	 00000499 _TEXT	
  _FinishConvertingNumtoString .	L Near	 000004A0 _TEXT	
  _revLoop . . . . . . . . . . .	L Near	 000004AD _TEXT	
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DisplayAverage . . . . . . . . .	P Near	 00000542 _TEXT	Length= 0000002B Public STDCALL
  num  . . . . . . . . . . . . .	DWord	 bp - 00000004
  numString  . . . . . . . . . .	DWord	 bp - 00000008
DisplaySum . . . . . . . . . . .	P Near	 0000056D _TEXT	Length= 0000002B Public STDCALL
  num  . . . . . . . . . . . . .	DWord	 bp - 00000004
  numString  . . . . . . . . . .	DWord	 bp - 00000008
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000160 _TEXT	Length= 00000181 Public STDCALL
  StringMaxLen . . . . . . . . .	DWord	 bp - 00000004
  StringRef  . . . . . . . . . .	DWord	 bp - 00000008
  NumsEntered  . . . . . . . . .	DWord	 bp - 0000000C
  sign . . . . . . . . . . . . .	DWord	 bp - 00000010
  numTemp  . . . . . . . . . . .	DWord	 bp - 00000014
  returnValueAscii . . . . . . .	DWord	 bp - 00000018
  arrayelements  . . . . . . . .	DWord	 bp - 0000001C
  _PromptUserInput . . . . . . .	L Near	 00000173 _TEXT	
  _convertString . . . . . . . .	L Near	 000001C4 _TEXT	
  _checkifSign . . . . . . . . .	L Near	 000001D7 _TEXT	
  _Convert . . . . . . . . . . .	L Near	 000001E1 _TEXT	
  _NextLoop  . . . . . . . . . .	L Near	 00000212 _TEXT	
  _NotNumError . . . . . . . . .	L Near	 00000216 _TEXT	
  _noInputError  . . . . . . . .	L Near	 0000022F _TEXT	
  _TestifFirstDigitPlus  . . . .	L Near	 00000248 _TEXT	
  _TestifFirstDigitMinus . . . .	L Near	 00000256 _TEXT	
  _signNotFirstError . . . . . .	L Near	 00000264 _TEXT	
  _FinishedConvertingtoNum . . .	L Near	 0000027D _TEXT	
  _convertNumtoNegative  . . . .	L Near	 00000285 _TEXT	
  _testIfNumtooLarge . . . . . .	L Near	 0000028D _TEXT	
  _numTooLargError . . . . . . .	L Near	 000002A0 _TEXT	
  _storeNumtoArray . . . . . . .	L Near	 000002B9 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 00000598 _TEXT	Length= 00000046 Public STDCALL
  num  . . . . . . . . . . . . .	DWord	 bp - 00000004
  numStringOffset  . . . . . . .	DWord	 bp - 00000008
  _convertLoop . . . . . . . . .	L Near	 000005A7 _TEXT	
  _writeComma  . . . . . . . . .	L Near	 000005C8 _TEXT	
  _noComma . . . . . . . . . . .	L Near	 000005D4 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
getStringLen . . . . . . . . . .	P Near	 000002E1 _TEXT	Length= 00000035 Public STDCALL
  StringLen  . . . . . . . . . .	DWord	 bp - 00000004
  _countLoop . . . . . . . . . .	L Near	 000002F7 _TEXT	
  _nocount . . . . . . . . . . .	L Near	 00000307 _TEXT	
  _end . . . . . . . . . . . . .	L Near	 00000309 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000160 Public STDCALL
  _InputNumberLoop . . . . . . .	L Near	 0000001D _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
setTextColorGreen  . . . . . . .	P Near	 000005E9 _TEXT	Length= 0000000B Public STDCALL
setTextColorWhite  . . . . . . .	P Near	 000005DE _TEXT	Length= 0000000B Public STDCALL
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
Error_char_num . . . . . . . . .	Byte	 0000029C _DATA	
Error_no_input . . . . . . . . .	Byte	 00000273 _DATA	
Error_sign_use . . . . . . . . .	Byte	 000002DC _DATA	
Error_too_large  . . . . . . . .	Byte	 0000032E _DATA	
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
IntegerArray_len . . . . . . . .	DWord	 00000243 _DATA	
IntegerArray_size  . . . . . . .	DWord	 00000247 _DATA	
IntegerArray . . . . . . . . . .	DWord	 0000021B _DATA	
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
StringArray  . . . . . . . . . .	DWord	 0000024B _DATA	
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
comma_string . . . . . . . . . .	Byte	 00000419 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
display_1  . . . . . . . . . . .	Byte	 00000399 _DATA	
display_2  . . . . . . . . . . .	Byte	 000003BD _DATA	
display_3  . . . . . . . . . . .	Byte	 000003E1 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 0000041C _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
num_prompt . . . . . . . . . . .	Byte	 000001E5 _DATA	
program_info_1 . . . . . . . . .	Byte	 00000000 _DATA	
program_info_2 . . . . . . . . .	Byte	 00000053 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
rounded_avg  . . . . . . . . . .	DWord	 00000411 _DATA	
sum_all_nums . . . . . . . . . .	DWord	 00000415 _DATA	
temp_num . . . . . . . . . . . .	DWord	 0000019D _DATA	
temp_string2 . . . . . . . . . .	Byte	 000001C1 _DATA	
temp_string  . . . . . . . . . .	Byte	 000001A1 _DATA	
userString_len . . . . . . . . .	DWord	 00000199 _DATA	
userString_max_len . . . . . . .	DWord	 000001E1 _DATA	
userString . . . . . . . . . . .	Byte	 00000167 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   6 Warnings
	   0 Errors
