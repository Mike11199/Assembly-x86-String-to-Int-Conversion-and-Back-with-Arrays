Microsoft (R) Macro Assembler Version 14.29.30133.0	    08/04/22 23:08:03
<Project 6 - String Primitives and Macros      (Proj6_iwanek  Page 1 - 1


				TITLE Project 6 - String Primitives and Macros      (Proj6_iwanekm.asm)

				;--------------------------------------------------------------------------------------------------------------------------------------------------
				; Author:					Michael Iwanek
				; Last Modified:			08/04/2022
				; OSU email address:		iwanekm@oregonstate.edu
				; Course number/section:	CS271 Section 400
				; Project Number:			06
				; Due Date:					08/07/2022
				;--------------------------------------------------------------------------------------------------------------------------------------------------
				; Description: 
				;--------------------------------------------------------------------------------------------------------------------------------------------------
				;			-This program allows user to enter in a series of numbers as strings.  It then conver

				;--------------------------------------------------------------------------------------------------------------------------------------------------


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 


				; =======================================================================================================================================================
				; Name:				mGetString
				;
				; Description:		-This macro makes use of the ReadString Irvine library procedure to read a number entered by a user in the console as a string. 
				;					 It then updates the string by reference passed to it on the stack.  It also updates the number of characters entered by the user into an
				;					 output variable passed to it by reference on the stack.
				;
				; Preconditions:	-none
				;
				; Postconditions:	-none
				;
				; Receives:			-The temp string output variable by reference, max size of string, and output by reference for the number of characters the user enters. 
				;					 This output of characters this output of characters entered is used to test if the user entered nothing into the console or too large
				;					 of a number for a 32 bit signed register.
				;
				; Returns:			-Returns by reference a string, and the number of characters entered by the user by reference, so that global variable are updated.
				;
				; =======================================================================================================================================================
				mGetString	MACRO	buffer, buffer_size, output_nums_entered, message
					PUSH	EDX							; Save EDX register
					PUSH	ECX
					PUSH	EAX
					mDisplayString message				; Diplay prompt for num
					MOV		EDX,  buffer				; Buffer is where output string by ref is saved to
					MOV		ECX,  [buffer_size]
					CALL	ReadString
					mov		ecx, output_nums_entered
					mov		[ecx], EAX
					POP		EAX
					POP		ECX							; Restore EDX
					POP		EDX							; Restore ECX
				ENDM

				; =======================================================================================================================================================
				; Name:				mDisplayString
				;
				; Description:		-This macro makes use of the WriteString Irvine library procedure to write a string to the conosle.  Used by the mGetString macro.
				;
				; Preconditions:	-none
				;
				; Postconditions:	-none
				;
				; Receives:			-Addresses of the string variable to be written needs to be passed as a parameter.
				;
				; Returns:			-nothing
				;
				; =======================================================================================================================================================
				mDisplayString	MACRO	buffer
					PUSH  EDX				;Save EDX register
					MOV   EDX, buffer
					CALL  WriteString
					POP   EDX				;Restore EDX
				ENDM

				; (insert constant definitions here)

 00000000			.data
 00000000 48 65 6C 6C 6F	program_info_1		BYTE		"Hello!  Welcome to my program:  String Primitives and Macros by Michael Iwanek",13,10,13,10,0
	   21 20 20 57 65
	   6C 63 6F 6D 65
	   20 74 6F 20 6D
	   79 20 70 72 6F
	   67 72 61 6D 3A
	   20 20 53 74 72
	   69 6E 67 20 50
	   72 69 6D 69 74
	   69 76 65 73 20
	   61 6E 64 20 4D
	   61 63 72 6F 73
	   20 62 79 20 4D
	   69 63 68 61 65
	   6C 20 49 77 61
	   6E 65 6B 0D 0A
	   0D 0A 00

 00000053 50 6C 65 61 73	program_info_2		BYTE		"Please enter in 10 signed decimal integers.  This program will then display each number entered, their average value, and sum.",13,10,13,10
	   65 20 65 6E 74
	   65 72 20 69 6E
	   20 31 30 20 73
	   69 67 6E 65 64
	   20 64 65 63 69
	   6D 61 6C 20 69
	   6E 74 65 67 65
	   72 73 2E 20 20
	   54 68 69 73 20
	   70 72 6F 67 72
	   61 6D 20 77 69
	   6C 6C 20 74 68
	   65 6E 20 64 69
	   73 70 6C 61 79
	   20 65 61 63 68
	   20 6E 75 6D 62
	   65 72 20 65 6E
	   74 65 72 65 64
	   2C 20 74 68 65
	   69 72 20 61 76
	   65 72 61 67 65
	   20 76 61 6C 75
	   65 2C 20 61 6E
	   64 20 73 75 6D
	   2E 0D 0A 0D 0A
 000000D5  49 74 20 77 69						BYTE		"It will do this without using any Irvine procedures to read/write numbers, but will instead convert inputted strings to numbers using an algorithm.",13,10,13,10
	   6C 6C 20 64 6F
	   20 74 68 69 73
	   20 77 69 74 68
	   6F 75 74 20 75
	   73 69 6E 67 20
	   61 6E 79 20 49
	   72 76 69 6E 65
	   20 70 72 6F 63
	   65 64 75 72 65
	   73 20 74 6F 20
	   72 65 61 64 2F
	   77 72 69 74 65
	   20 6E 75 6D 62
	   65 72 73 2C 20
	   62 75 74 20 77
	   69 6C 6C 20 69
	   6E 73 74 65 61
	   64 20 63 6F 6E
	   76 65 72 74 20
	   69 6E 70 75 74
	   74 65 64 20 73
	   74 72 69 6E 67
	   73 20 74 6F 20
	   6E 75 6D 62 65
	   72 73 20 75 73
	   69 6E 67 20 61
	   6E 20 61 6C 67
	   6F 72 69 74 68
	   6D 2E 0D 0A 0D
	   0A
 0000016C  41 66 74 65 72						BYTE		"After storing these numbers to an array, it will use another algorithm to convert these numbers back to strings to be displayed to the console.  ",13,10,13,10
	   20 73 74 6F 72
	   69 6E 67 20 74
	   68 65 73 65 20
	   6E 75 6D 62 65
	   72 73 20 74 6F
	   20 61 6E 20 61
	   72 72 61 79 2C
	   20 69 74 20 77
	   69 6C 6C 20 75
	   73 65 20 61 6E
	   6F 74 68 65 72
	   20 61 6C 67 6F
	   72 69 74 68 6D
	   20 74 6F 20 63
	   6F 6E 76 65 72
	   74 20 74 68 65
	   73 65 20 6E 75
	   6D 62 65 72 73
	   20 62 61 63 6B
	   20 74 6F 20 73
	   74 72 69 6E 67
	   73 20 74 6F 20
	   62 65 20 64 69
	   73 70 6C 61 79
	   65 64 20 74 6F
	   20 74 68 65 20
	   63 6F 6E 73 6F
	   6C 65 2E 20 20
	   0D 0A 0D 0A
 00000201  45 61 63 68 20						BYTE		"Each number must be able to fit within a 32 bit register, or be between the values of -2,147,483,647 and 2,147,483,647 inclusive (or +/- 2^31).",13,10,13,10,0
	   6E 75 6D 62 65
	   72 20 6D 75 73
	   74 20 62 65 20
	   61 62 6C 65 20
	   74 6F 20 66 69
	   74 20 77 69 74
	   68 69 6E 20 61
	   20 33 32 20 62
	   69 74 20 72 65
	   67 69 73 74 65
	   72 2C 20 6F 72
	   20 62 65 20 62
	   65 74 77 65 65
	   6E 20 74 68 65
	   20 76 61 6C 75
	   65 73 20 6F 66
	   20 2D 32 2C 31
	   34 37 2C 34 38
	   33 2C 36 34 37
	   20 61 6E 64 20
	   32 2C 31 34 37
	   2C 34 38 33 2C
	   36 34 37 20 69
	   6E 63 6C 75 73
	   69 76 65 20 28
	   6F 72 20 2B 2F
	   2D 20 32 5E 33
	   31 29 2E 0D 0A
	   0D 0A 00

 00000295 00000000		userString_len		DWORD		?
 00000299 00000000		temp_num			SDWORD		?
 0000029D 00000000		temp_num2			SDWORD		?
 000002A1 00000000		rounded_avg			SDWORD		?
 000002A5 00000000		sum_all_nums		SDWORD		?

 000002A9 00000000		IntegerArray_len	DWORD		0				;num elements
 000002AD 00000001		IntegerArray_len2	DWORD		1				;num elements
 000002B1  00000032 [		userString			BYTE		50 DUP(?)		;10 digit string, +1 for + or neg sign; +1 for null terminator
	    00
	   ]
 000002E3  00000020 [		temp_string			BYTE		32 DUP(?)
	    00
	   ]
 00000303  00000020 [		temp_string2		BYTE		32 DUP(?)
	    00
	   ]
 00000323  0000000A [		IntegerArray		SDWORD		10 DUP(?)
	    00000000
	   ]
 0000034B  0000000A [		StringArray			SDWORD		10 DUP(?)
	    00000000
	   ]
 00000373 00000032		userString_max_len	DWORD		LENGTHOF userString

 00000377 50 6C 65 61 73	num_prompt			BYTE		"Please enter a signed number between -2^31 and 2^31: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 20 62
	   65 74 77 65 65
	   6E 20 2D 32 5E
	   33 31 20 61 6E
	   64 20 32 5E 33
	   31 3A 20 00
 000003AD 45 72 72 6F 72	Error_no_input		BYTE		"Error!  You didn't enter in any numbers.",0 
	   21 20 20 59 6F
	   75 20 64 69 64
	   6E 27 74 20 65
	   6E 74 65 72 20
	   69 6E 20 61 6E
	   79 20 6E 75 6D
	   62 65 72 73 2E
	   00
 000003D6 45 72 72 6F 72	Error_char_num		BYTE		"Error!  You can only enter numbers, and the plus or minus sign.",0 
	   21 20 20 59 6F
	   75 20 63 61 6E
	   20 6F 6E 6C 79
	   20 65 6E 74 65
	   72 20 6E 75 6D
	   62 65 72 73 2C
	   20 61 6E 64 20
	   74 68 65 20 70
	   6C 75 73 20 6F
	   72 20 6D 69 6E
	   75 73 20 73 69
	   67 6E 2E 00
 00000416 45 72 72 6F 72	Error_sign_use		BYTE		"Error!  You can only enter the plus or minus sign at the beginning of the number.",0 
	   21 20 20 59 6F
	   75 20 63 61 6E
	   20 6F 6E 6C 79
	   20 65 6E 74 65
	   72 20 74 68 65
	   20 70 6C 75 73
	   20 6F 72 20 6D
	   69 6E 75 73 20
	   73 69 67 6E 20
	   61 74 20 74 68
	   65 20 62 65 67
	   69 6E 6E 69 6E
	   67 20 6F 66 20
	   74 68 65 20 6E
	   75 6D 62 65 72
	   2E 00
 00000468 45 72 72 6F 72	Error_too_large		BYTE		"Error!  Your number must be between the ranges of-2,147,483,647 and 2,147,483,647 inclusive (or +/- 2^31).",0 
	   21 20 20 59 6F
	   75 72 20 6E 75
	   6D 62 65 72 20
	   6D 75 73 74 20
	   62 65 20 62 65
	   74 77 65 65 6E
	   20 74 68 65 20
	   72 61 6E 67 65
	   73 20 6F 66 2D
	   32 2C 31 34 37
	   2C 34 38 33 2C
	   36 34 37 20 61
	   6E 64 20 32 2C
	   31 34 37 2C 34
	   38 33 2C 36 34
	   37 20 69 6E 63
	   6C 75 73 69 76
	   65 20 28 6F 72
	   20 2B 2F 2D 20
	   32 5E 33 31 29
	   2E 00
 000004D3 59 6F 75 20 65	display_1			BYTE		"You entered the following numbers: ",0 
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 20
	   00
 000004F7 54 68 65 20 73	display_2			BYTE		"The sum of all numbers entered is: ",0 
	   75 6D 20 6F 66
	   20 61 6C 6C 20
	   6E 75 6D 62 65
	   72 73 20 65 6E
	   74 65 72 65 64
	   20 69 73 3A 20
	   00
 0000051B 54 68 65 20 74	display_3			BYTE		"The truncated average of all numbers entered is: ",0 
	   72 75 6E 63 61
	   74 65 64 20 61
	   76 65 72 61 67
	   65 20 6F 66 20
	   61 6C 6C 20 6E
	   75 6D 62 65 72
	   73 20 65 6E 74
	   65 72 65 64 20
	   69 73 3A 20 00
 0000054D 54 68 61 6E 6B	goodbye				BYTE		"Thanks for using my program!  Goodbye.",0
	   73 20 66 6F 72
	   20 75 73 69 6E
	   67 20 6D 79 20
	   70 72 6F 67 72
	   61 6D 21 20 20
	   47 6F 6F 64 62
	   79 65 2E 00
 00000574 2C 20 00		comma_string		BYTE		", ",0

 00000000			.code
 00000000			main PROC

					;THIS PROGRAM DOES NOT USE GLOBAL VARIABLES BUT PASSES VARIABLE TO PROCEDURES ON THE STACK
					;VARIABLE USED IN THE PROCEDURES ARE NOT GLOBAL; THEY ARE LOCAL VARIABLES USED FOR PROGRAM READABILITY

					;display program prompts and info to the user using the mDisplayString macro
					mDisplayString OFFSET program_info_1
 00000000  52		     1		PUSH  EDX				;Save EDX register
 00000001  BA 00000000 R     1		MOV   EDX, OFFSET program_info_1
 00000006  E8 00000000 E     1		CALL  WriteString
 0000000B  5A		     1		POP   EDX				;Restore EDX
					mDisplayString OFFSET program_info_2	
 0000000C  52		     1		PUSH  EDX				;Save EDX register
 0000000D  BA 00000053 R     1		MOV   EDX, OFFSET program_info_2
 00000012  E8 00000000 E     1		CALL  WriteString
 00000017  5A		     1		POP   EDX				;Restore EDX
					
 00000018  B9 0000000A			mov ECX, 10

					;loop to get 10 numbers from the user as strings, converted to an array of numbers from ASCII manually
 0000001D			_InputNumberLoop:

 0000001D  68 0000029D R		PUSH    OFFSET temp_num2
 00000022  68 00000468 R		PUSH	OFFSET Error_too_large
 00000027  68 000002A9 R		PUSH    OFFSET IntegerArray_len
 0000002C  68 00000323 R		PUSH    OFFSET IntegerArray
 00000031  68 00000299 R		PUSH    OFFSET temp_num
 00000036  68 00000295 R		PUSH    OFFSET userString_len
 0000003B  68 000003AD R		PUSH	OFFSET Error_no_input
 00000040  68 000003D6 R		PUSH	OFFSET Error_char_num
 00000045  68 00000416 R		PUSH	OFFSET Error_sign_use
 0000004A  FF 35 00000373 R		PUSH    userString_max_len
 00000050  68 000002B1 R		PUSH	OFFSET userString
 00000055  68 00000377 R		PUSH	OFFSET num_prompt
 0000005A  E8 00000124			CALL	ReadVal

 0000005F  E2 BC		LOOP _InputNumberLoop

					
					;calc sum
 00000061  68 000002A5 R		PUSH    OFFSET sum_all_nums
 00000066  68 000002A9 R		PUSH    OFFSET IntegerArray_len
 0000006B  68 00000323 R		PUSH    OFFSET IntegerArray
 00000070  E8 000004BF			CALL	CalculateSum	

					;calc average
 00000075  68 000002A1 R		PUSH    OFFSET rounded_avg
 0000007A  68 000002A5 R		PUSH    OFFSET sum_all_nums
 0000007F  68 000002A9 R		PUSH    OFFSET IntegerArray_len
 00000084  E8 000004DD			CALL	CalculateAverage	

					;display numbers entered by user
 00000089  E8 00000000 E		CALL	CrLf
					mDisplayString OFFSET display_1
 0000008E  52		     1		PUSH  EDX				;Save EDX register
 0000008F  BA 000004D3 R     1		MOV   EDX, OFFSET display_1
 00000094  E8 00000000 E     1		CALL  WriteString
 00000099  5A		     1		POP   EDX				;Restore EDX
 0000009A  E8 00000000 E		CALL	CrLf
 0000009F  E8 00000551			CALL	setTextColorGreen	
 000000A4  68 00000574 R		PUSH    OFFSET comma_string
 000000A9  68 00000303 R		PUSH    OFFSET temp_string2
 000000AE  68 000002E3 R		PUSH    OFFSET temp_string
 000000B3  68 0000034B R		PUSH    OFFSET StringArray
 000000B8  68 000002A9 R		PUSH    OFFSET IntegerArray_len
 000000BD  68 00000323 R		PUSH    OFFSET IntegerArray
 000000C2  E8 000004D3			CALL	WriteVal
 000000C7  E8 0000051E			CALL	setTextColorWhite		

					;display text prompt before sum is displayed
 000000CC  E8 00000000 E		CALL	CrLf
 000000D1  E8 00000000 E		CALL	CrLf
					mDisplayString OFFSET display_2	
 000000D6  52		     1		PUSH  EDX				;Save EDX register
 000000D7  BA 000004F7 R     1		MOV   EDX, OFFSET display_2
 000000DC  E8 00000000 E     1		CALL  WriteString
 000000E1  5A		     1		POP   EDX				;Restore EDX
 000000E2  E8 0000050E			CALL	setTextColorGreen	
 000000E7  E8 00000000 E		CALL	CrLf
					
					;display sum of numbers entered by user
 000000EC  68 00000574 R		PUSH    OFFSET comma_string
 000000F1  68 00000303 R		PUSH    OFFSET temp_string2
 000000F6  68 000002E3 R		PUSH    OFFSET temp_string
 000000FB  68 0000034B R		PUSH    OFFSET StringArray
 00000100  68 000002AD R		PUSH    OFFSET IntegerArray_len2
 00000105  68 000002A5 R		PUSH    OFFSET sum_all_nums
 0000010A  E8 0000048B			CALL	WriteVal
 0000010F  E8 000004D6			CALL	setTextColorWhite	

					;display text prompt before truncated average is displayed
 00000114  E8 00000000 E		CALL	CrLf
 00000119  E8 00000000 E		CALL	CrLf
					mDisplayString OFFSET display_3	
 0000011E  52		     1		PUSH  EDX				;Save EDX register
 0000011F  BA 0000051B R     1		MOV   EDX, OFFSET display_3
 00000124  E8 00000000 E     1		CALL  WriteString
 00000129  5A		     1		POP   EDX				;Restore EDX
 0000012A  E8 000004C6			CALL	setTextColorGreen	
 0000012F  E8 00000000 E		CALL	CrLf

					;display truncated average of numbers entered by user
 00000134  68 00000574 R		PUSH    OFFSET comma_string
 00000139  68 00000303 R		PUSH    OFFSET temp_string2
 0000013E  68 000002E3 R		PUSH    OFFSET temp_string
 00000143  68 0000034B R		PUSH    OFFSET StringArray
 00000148  68 000002AD R		PUSH    OFFSET IntegerArray_len2
 0000014D  68 000002A1 R		PUSH    OFFSET rounded_avg
 00000152  E8 00000443			CALL	WriteVal	
					

					;display the farewell message
 00000157  E8 0000048E			CALL	setTextColorWhite	
 0000015C  E8 00000000 E		CALL	CrLf
 00000161  E8 00000000 E		CALL	CrLf
					mDisplayString OFFSET goodbye	
 00000166  52		     1		PUSH  EDX				;Save EDX register
 00000167  BA 0000054D R     1		MOV   EDX, OFFSET goodbye
 0000016C  E8 00000000 E     1		CALL  WriteString
 00000171  5A		     1		POP   EDX				;Restore EDX
 00000172  E8 00000000 E		CALL	CrLf
 00000177  E8 00000000 E		CALL	CrLf




					Invoke ExitProcess,0	; exit to operating system
 0000017C  6A 00	   *	    push   +000000000h
 0000017E  E8 00000000 E   *	    call   ExitProcess
 00000183			main ENDP


				; =======================================================================================================================================================
				; Name:				ReadVal
				;
				; Description:		-This procedure invokes the mGetString macro to 
				;
				; Preconditions:	-none
				;
				; Postconditions:	-none
				;
				; Receives:			-The temp string output variable by reference, max size of string, and output by reference for the number of characters the user enters. 
				;					 This output of characters this output of characters entered is used to test if the user entered nothing into the console or too large
				;					 of a number for a 32 bit signed register.
				;
				; Returns:			-Returns by reference a string, and the number of characters entered by the user by reference, so that global variable are updated.
				;
				; =======================================================================================================================================================
 00000183			ReadVal PROC

					;***************************************************************************************************************************
					;	1) Invoke the mGetString macro to get user input in the form of a string of digits	
					;***************************************************************************************************************************

					LOCAL StringMaxLen:DWORD, StringRef:DWORD, NumsEntered:DWORD, sign:DWORD, numTemp:DWORD, returnValueAscii:DWORD, arrayelements:DWORD, messagePrompt:DWORD
 00000183  55		   *	    push   ebp
 00000184  8B EC	   *	    mov    ebp, esp
 00000186  83 C4 E0	   *	    add    esp, 0FFFFFFE0h
 00000189  60				PUSHAD

 0000018A  C7 45 F0			mov sign, 1
	   00000001
 00000191  8B 45 0C			mov eax, [EBP + 12]
 00000194  89 45 F8			mov StringRef, eax
 00000197  8B 45 10			mov eax, [EBP + 16]	
 0000019A  89 45 FC			mov StringMaxLen, eax		


 0000019D			_PromptUserInput:

 0000019D  8B 55 34			mov edx, [EBP + 52]	
 000001A0  89 55 F4			mov NumsEntered, edx										;output variable to hold nums entered

					;mDisplayString [EBP + 8]									;prompt num	
 000001A3  8B 55 08			mov edx,[EBP + 8]
 000001A6  89 55 E0			mov messagePrompt, edx

				    mGetString StringRef, StringMaxLen, NumsEntered, messagePrompt 		;pass string output by ref, size by value, and nums entered by ref to macro
 000001A9  52		     1		PUSH	EDX							; Save EDX register
 000001AA  51		     1		PUSH	ECX
 000001AB  50		     1		PUSH	EAX
 000001AC  52		     2		PUSH  EDX				;Save EDX register
 000001AD  8B 55 E0	     2		MOV   EDX, messagePrompt
 000001B0  E8 00000000 E     2		CALL  WriteString
 000001B5  5A		     2		POP   EDX				;Restore EDX
 000001B6  8B 55 F8	     1		MOV		EDX,  StringRef				; Buffer is where output string by ref is saved to
 000001B9  8B 4D FC	     1		MOV		ECX,  [StringMaxLen]
 000001BC  E8 00000000 E     1		CALL	ReadString
 000001C1  8B 4D F4	     1		mov		ecx, NumsEntered
 000001C4  89 01	     1		mov		[ecx], EAX
 000001C6  58		     1		POP		EAX
 000001C7  59		     1		POP		ECX							; Restore EDX
 000001C8  5A		     1		POP		EDX							; Restore ECX

 000001C9  8B 55 34			mov edx, [EBP + 52]	
 000001CC  8B 12			mov edx, [edx]
 000001CE  89 55 F4			mov NumsEntered, edx										;output variable from macro to local variable





					
					;***************************************************************************************************************************
					;	2) Convert (USING STRING PRIMITIVES) the string of ASCII digits to its numeric value representation (SDWORD).
					;   validating each char is a valid # (not symbol)                                                                
					;***************************************************************************************************************************

					
					;mov EDX, StringRef				;LOCAL VARIABLE - test delete
					;CALL WriteString				;test delete
					

 000001D1  8B 4D F4			mov ECX, NumsEntered			;test if no nums entered using local variable
 000001D4  83 F9 00			cmp ECX, 0
 000001D7  0F 84 00000081		jz _noInputError
 000001DD  83 F9 0B			cmp ECX, 11
 000001E0  0F 8F 000000F5		jg _numTooLargeError
 000001E6  8B 75 F8			mov ESI, StringRef				;if nums were entered, then start loop
 000001E9  8B 4D FC			mov ECX, StringMaxLen			;test if no nums entered using local variable
 000001EC  C7 45 EC			mov numTemp, 0
	   00000000


				;==================LOOP TO CONVERT STRING STARTS HERE=====================================================
 000001F3			_convertString:	
 000001F3  AC				LODSB						;takes ESI and copies to AL, then increment ESI to next element
 000001F4  3C 00			cmp AL, 0
 000001F6  0F 84 000000BC		jz _FinishedConvertingtoNum
 000001FC  3C 30			cmp AL, 48					;nums are from 48 to 57; + is 43 and - is 45
 000001FE  7C 06			jl	_checkifSign	
 00000200  3C 39			cmp AL, 57
 00000202  7F 41			jg	_NotNumError
 00000204  EB 0A			jmp _Convert	


 00000206			_checkifSign:
 00000206  3C 2B			cmp AL, 43					; + sign
 00000208  74 6D			jz	_TestifFirstDigitPlus
 0000020A  3C 2D			cmp AL, 45					; - sign
 0000020C  74 7D			jz	_TestifFirstDigitMinus
 0000020E  EB 35			jmp _NotNumError

 00000210			_Convert:
 00000210  FF 75 24			PUSH [EBP + 36]			    ; temp return variable from ConvertASCIItoNum
 00000213  50				PUSH EAX					; this pushes AL and garbage values
 00000214  E8 00000138			CALL ConvertASCIItoNum	
					
 00000219  8B 45 EC			mov EAX, numTemp			; tempNum to hold digits

 0000021C  3D 0CCCCCCC			cmp EAX, 214748364
 00000221  0F 8F 000000B4		jg  _numTooLargeError


 00000227  BB 0000000A			mov ebx, 10
 0000022C  F7 E3			mul ebx						; multiply by 10 then loop
 0000022E  50				push eax					; save multiplied numTemp

 0000022F  8B 5D 24			mov ebx, [EBP + 36]		
 00000232  8B 03			mov eax, [ebx]				; return variable from ConvertASCIItoNum
 00000234  89 45 E8			mov returnValueAscii, eax	; save return variable from ConvertASCIItoNum

 00000237  58				pop eax						; restore multipled value to eax
 00000238  01 45 E8			add returnValueAscii, eax	; add to return variable
 0000023B  8B 45 E8			mov	eax, returnValueAscii	; move num so far to eax
 0000023E  89 45 EC			mov numTemp, EAX			; save to numTemp for next loop

 00000241			_NextLoop:
					
 00000241  E2 B0			loop _ConvertString
 00000243  EB 73			jmp _FinishedConvertingtoNum
				;==================LOOP TO CONVERT STRING ENDS HERE=====================================================



				;Errors and testing if + or - if first char
 00000245			_NotNumError:
					
					mDisplayString [EBP + 24]				; not num string
 00000245  52		     1		PUSH  EDX				;Save EDX register
 00000246  8B 55 18	     1		MOV   EDX, [EBP + 24]
 00000249  E8 00000000 E     1		CALL  WriteString
 0000024E  5A		     1		POP   EDX				;Restore EDX
 0000024F  E8 00000000 E		call CrLf
 00000254  E8 00000000 E		call CrLF
 00000259  E9 FFFFFF3F			jmp _PromptUserInput


 0000025E			_noInputError:
					mDisplayString [EBP + 28]				; no input string
 0000025E  52		     1		PUSH  EDX				;Save EDX register
 0000025F  8B 55 1C	     1		MOV   EDX, [EBP + 28]
 00000262  E8 00000000 E     1		CALL  WriteString
 00000267  5A		     1		POP   EDX				;Restore EDX
 00000268  E8 00000000 E		call CrLf
 0000026D  E8 00000000 E		call CrLF
 00000272  E9 FFFFFF26			jmp _PromptUserInput

 00000277			_TestifFirstDigitPlus:
 00000277  83 7D F4 01			cmp NumsEntered, 1
 0000027B  74 E1			jz _noInputError
 0000027D  39 4D FC			cmp StringMaxLen, ECX
 00000280  75 1D			jnz _signNotFirstError
 00000282  C7 45 F0			mov sign, 1	
	   00000001
 00000289  EB B6			jmp _NextLoop


 0000028B			_TestifFirstDigitMinus:
 0000028B  83 7D F4 01			cmp NumsEntered, 1
 0000028F  74 CD			jz _noInputError
 00000291  39 4D FC			cmp StringMaxLen, ECX
 00000294  75 09			jnz _signNotFirstError
 00000296  C7 45 F0			mov sign, 2							    ; local variable set as negative
	   00000002
 0000029D  EB A2			jmp _NextLoop

 0000029F			_signNotFirstError:
					mDisplayString [EBP + 20]				; prompt num	
 0000029F  52		     1		PUSH  EDX				;Save EDX register
 000002A0  8B 55 14	     1		MOV   EDX, [EBP + 20]
 000002A3  E8 00000000 E     1		CALL  WriteString
 000002A8  5A		     1		POP   EDX				;Restore EDX
 000002A9  E8 00000000 E		call CrLf
 000002AE  E8 00000000 E		call CrLF
 000002B3  E9 FFFFFEE5			jmp _PromptUserInput




					;***************************************************************************************************************************
					;	3) Store this one value in a memory variable (output paratmeter, by reference).                                                              
					;***************************************************************************************************************************

 000002B8			_FinishedConvertingtoNum:
					
 000002B8  83 7D F0 02			cmp sign, 2
 000002BC  74 02			jz _convertNumtoNegative
 000002BE  EB 08			jmp _testIfNumtooLarge
					

 000002C0			_convertNumtoNegative:
 000002C0  8B 45 E8			mov eax, returnValueAscii  
 000002C3  F7 D8			neg eax
 000002C5  89 45 E8			mov returnValueAscii, eax 


 000002C8			_testIfNumtooLarge:
 000002C8  8B 45 E8			mov EAX, returnValueAscii	
 000002CB  3D 7FFFFFFF			cmp EAX, 2147483647
 000002D0  7F 09			jg	_numTooLargeError
 000002D2  3D 80000001			cmp EAX, -2147483647
 000002D7  7C 02			jl	_numTooLargeError
 000002D9  EB 19			jmp _storeNumtoArray

 000002DB			_numTooLargeError:
					mDisplayString [EBP + 48]	
 000002DB  52		     1		PUSH  EDX				;Save EDX register
 000002DC  8B 55 30	     1		MOV   EDX, [EBP + 48]
 000002DF  E8 00000000 E     1		CALL  WriteString
 000002E4  5A		     1		POP   EDX				;Restore EDX
 000002E5  E8 00000000 E		call CrLf
 000002EA  E8 00000000 E		call CrLF
 000002EF  E9 FFFFFEA9			jmp _PromptUserInput	
					


 000002F4			_storeNumtoArray:

 000002F4  8B 75 28			mov     ESI, [EBP + 40]				    ; offset of int array		
 000002F7  8B 45 2C			MOV		EAX, [EBP + 44]					; offset IntegerArray length variable to track how many elements are in array
 000002FA  8B 00			mov		EAX, [EAX]
 000002FC  89 45 E4			mov		arrayelements, EAX				; local variable
 000002FF  BB 00000004			mov		EBX, 4
 00000304  F7 E3			mul		EBX	
 00000306  8B 4D E8			mov		ECX, returnValueAscii
 00000309  89 0C 06			mov		[ESI + EAX], ECX				; store num in int array + offset to put in the last postion of the array

 0000030C  8B 7D 2C			mov		EDI, [EBP + 44]
 0000030F  FF 45 E4			inc		arrayelements
 00000312  8B 45 E4			mov		eax, arrayelements
 00000315  89 07			MOV	    [EDI], eax						;store count of array elements


 00000317  61				POPAD
 00000318  C9		   *	    leave  
 00000319  C2 002C			RET 44									; dereference passed parameters


 0000031C			ReadVal ENDP


 0000031C			getStringLen PROC
					
					LOCAL StringLen:DWORD
 0000031C  55		   *	    push   ebp
 0000031D  8B EC	   *	    mov    ebp, esp
 0000031F  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 00000322  60				PUSHAD

 00000323  B9 0000001E			mov ECX, 30				;max length for counter
 00000328  8B 75 0C			mov ESI, [EBP + 12]		;output ref

 0000032B  C7 45 FC			mov StringLen, 0
	   00000000
					
 00000332			_countLoop:
 00000332  AC				LODSB	
 00000333  3C 00			cmp AL, 0
 00000335  7E 0D			jle _end
 00000337  3C 2B			cmp AL, 43			; + sign
 00000339  74 07			jz _nocount
 0000033B  3C 2D			cmp AL, 45			; - sign
 0000033D  74 03			jz _nocount
 0000033F  FF 45 FC			inc StringLen

 00000342			_nocount:
 00000342  E2 EE			loop _countLoop
					
 00000344			_end:
					
 00000344  8B 45 FC			mov EAX, StringLen		;LOCAL VARIABLE
 00000347  8B 55 10			mov EDX, [EBP + 16] 	;move count to output variable
 0000034A  89 02			mov [EDX], EAX 			;move count to output variable
					
 0000034C  61				POPAD
 0000034D  C9		   *	    leave  
 0000034E  C2 000C			ret 12

 00000351			getStringLen ENDP



 00000351			ConvertASCIItoNum PROC
					
					LOCAL numText:BYTE 
 00000351  55		   *	    push   ebp
 00000352  8B EC	   *	    mov    ebp, esp
 00000354  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 00000357  60				PUSHAD

 00000358  8B 45 08			mov EAX, [EBP + 8]		;whole EAX register
 0000035B  8B 5D 0C			mov EBX, [EBP + 12]		;output variable

 0000035E  88 45 FF			mov numText, AL		;technically comparing AL here


 00000361  80 7D FF 30			cmp numText, 48
 00000365  74 36			jz _zero
 00000367  80 7D FF 31			cmp numText, 49
 0000036B  74 37			jz _one
 0000036D  80 7D FF 32			cmp numText, 50
 00000371  74 38			jz _two
 00000373  80 7D FF 33			cmp numText, 51
 00000377  74 39			jz _three
 00000379  80 7D FF 34			cmp numText, 52
 0000037D  74 3A			jz _four
 0000037F  80 7D FF 35			cmp numText, 53
 00000383  74 3B			jz _five
 00000385  80 7D FF 36			cmp numText, 54
 00000389  74 3C			jz _six
 0000038B  80 7D FF 37			cmp numText, 55
 0000038F  74 3D			jz _seven
 00000391  80 7D FF 38			cmp numText, 56
 00000395  74 3E			jz _eight
 00000397  80 7D FF 39			cmp numText, 57
 0000039B  74 3F			jz _nine


 0000039D			_zero:
 0000039D  B8 00000000			mov EAX, 0
 000003A2  EB 3F			jmp _return

 000003A4			_one:
 000003A4  B8 00000001			mov EAX, 1
 000003A9  EB 38			jmp _return

 000003AB			_two:
 000003AB  B8 00000002			mov EAX, 2
 000003B0  EB 31			jmp _return

 000003B2			_three:
 000003B2  B8 00000003			mov EAX, 3
 000003B7  EB 2A			jmp _return

 000003B9			_four:
 000003B9  B8 00000004			mov EAX, 4
 000003BE  EB 23			jmp _return

 000003C0			_five:
 000003C0  B8 00000005			mov EAX, 5
 000003C5  EB 1C			jmp _return

 000003C7			_six:
 000003C7  B8 00000006			mov EAX, 6
 000003CC  EB 15			jmp _return

 000003CE			_seven:
 000003CE  B8 00000007			mov EAX, 7
 000003D3  EB 0E			jmp _return

 000003D5			_eight:
 000003D5  B8 00000008			mov EAX, 8
 000003DA  EB 07			jmp _return

 000003DC			_nine:
 000003DC  B8 00000009			mov EAX, 9
 000003E1  EB 00			jmp _return



 000003E3			_return:
 000003E3  89 03			mov [EBX],EAX	;move result to output variable
					
 000003E5  61				POPAD
 000003E6  C9		   *	    leave  
 000003E7  C2 0008			ret 8

 000003EA			ConvertASCIItoNum ENDP


 000003EA			ConvertNumtoASCII PROC
					
					 ; parameter order:  integer value, temp string 1, tempstring2

	LOCAL num:DWORD, quotient:DWORD, remainder:DWORD, newStringLen:DWORD, negativeFlag:DWORD
 000003EA  55		   *	    push   ebp
 000003EB  8B EC	   *	    mov    ebp, esp
 000003ED  83 C4 EC	   *	    add    esp, 0FFFFFFECh
 000003F0  60				PUSHAD

 000003F1  C7 45 EC			mov negativeFlag, 1
	   00000001

 000003F8  B9 00000020			mov ecx, 32
 000003FD  8B 7D 0C			mov EDI, [EBP + 12]		; temp string1 offset from stack

 00000400			_ClearString_one:
 00000400  B8 00000000			mov EAX, 0
 00000405  89 07			mov [EDI], EAX
 00000407  83 C7 01			add EDI, 1
 0000040A  E2 F4			loop _ClearString_one


					
 0000040C  B9 00000020		mov ecx, 32
 00000411  8B 7D 10		mov EDI, [EBP + 16]		; temp string 2 offset from stack

 00000414			_ClearString_two:
 00000414  B8 00000000			mov EAX, 0
 00000419  89 07			mov [EDI], EAX
 0000041B  83 C7 01			add EDI, 1
 0000041E  E2 F4			loop _ClearString_two





 00000420  8B 7D 0C			mov EDI, [EBP + 12]		; temp string offset from stack
 00000423  8B 45 08			mov EAX, [EBP + 8]		; integer from stack

 00000426  89 45 FC			mov	num, EAX
 00000429  C7 45 F0			mov newStringLen, 0
	   00000000

					;test if number is negative, if so we need to reverse it and add a negative sign in front
 00000430  83 F8 00			cmp EAX, 0
 00000433  7C 0B			jl	_numIsNegativeInvert
 00000435  83 F8 00			cmp EAX, 0
 00000438  0F 84 000000A6		jz _NumisJustZero
 0000043E  EB 0C			jmp _MainConversionLoop


					;test if number is just zero

 00000440			_numIsNegativeInvert:
 00000440  F7 D8			neg eax
 00000442  89 45 FC			mov num, eax
 00000445  C7 45 EC			mov negativeFlag, 2
	   00000002



 0000044C			_MainConversionLoop:
					;need to repeatedly divide by 10, multiply by zeros until no remainder left, then reverse string array created.

 0000044C  8B 45 FC			mov EAX, num
 0000044F  99				CDQ 
 00000450  BB 0000000A			mov ebx, 10
 00000455  F7 FB			IDIV ebx
 00000457  89 45 F8			mov quotient, EAX
 0000045A  89 55 F4			mov remainder, EDX

 0000045D  83 7D F4 00			cmp remainder, 0
 00000461  7F 15			jg _remainderExists
 00000463  83 7D F8 00			cmp quotient, 0
 00000467  7F 05			jg _Quotient						; if no quotient and remainder
 00000469  E9 00000095			jmp _AddTERMINATOR


 0000046E			_Quotient:
 0000046E  B8 00000000			mov EAX, 0
 00000473  89 45 FC			mov num, EAX
 00000476  EB 08			jmp _startNumConversion

 00000478			_remainderExists:
 00000478  8B 45 F4			mov EAX, remainder
 0000047B  89 45 FC			mov num, EAX
 0000047E  EB 00			jmp _startNumConversion


 00000480			_startNumConversion:
 00000480  83 7D FC 00			cmp num, 0
 00000484  74 36			jz _zero_num
 00000486  83 7D FC 01			cmp num, 1
 0000048A  74 34			jz _one_num
 0000048C  83 7D FC 02			cmp num, 2
 00000490  74 32			jz _two_num
 00000492  83 7D FC 03			cmp num, 3
 00000496  74 30			jz _three_num
 00000498  83 7D FC 04			cmp num, 4
 0000049C  74 2E			jz _four_num
 0000049E  83 7D FC 05			cmp num, 5
 000004A2  74 2C			jz _five_num
 000004A4  83 7D FC 06			cmp num, 6
 000004A8  74 2A			jz _six_num
 000004AA  83 7D FC 07			cmp num, 7
 000004AE  74 28			jz _seven_num
 000004B0  83 7D FC 08			cmp num, 8
 000004B4  74 26			jz _eight_num
 000004B6  83 7D FC 09			cmp num, 9
 000004BA  74 24			jz _nine_num


 000004BC			_zero_num:
 000004BC  B0 30			mov AL, 48 
 000004BE  EB 30			jmp add_num_to_string

 000004C0			_one_num:
 000004C0  B0 31			mov AL, 49 
 000004C2  EB 2C			jmp add_num_to_string

 000004C4			_two_num:
 000004C4  B0 32			mov AL, 50 
 000004C6  EB 28			jmp add_num_to_string

 000004C8			_three_num:
 000004C8  B0 33			mov AL, 51 
 000004CA  EB 24			jmp add_num_to_string

 000004CC			_four_num:
 000004CC  B0 34			mov AL, 52
 000004CE  EB 20			jmp add_num_to_string

 000004D0			_five_num:
 000004D0  B0 35			mov AL, 53 
 000004D2  EB 1C			jmp add_num_to_string

 000004D4			_six_num:
 000004D4  B0 36			mov AL, 54 
 000004D6  EB 18			jmp add_num_to_string

 000004D8			_seven_num:
 000004D8  B0 37			mov AL, 55 
 000004DA  EB 14			jmp add_num_to_string

 000004DC			_eight_num:
 000004DC  B0 38			mov AL, 56
 000004DE  EB 10			jmp add_num_to_string

 000004E0			_nine_num:
 000004E0  B0 39			mov AL, 57 
 000004E2  EB 0C			jmp add_num_to_string

 000004E4			_NumisJustZero:
 000004E4  B0 30			mov AL, 48
 000004E6  88 07			mov [EDI], AL	;move result to output variable
 000004E8  83 C7 01			add EDI, 1		;increment
 000004EB  FF 45 F0			inc newStringLen
 000004EE  EB 13			jmp _AddTERMINATOR

 000004F0			add_num_to_string:
 000004F0  88 07			mov [EDI], AL	;move result to output variable
 000004F2  83 C7 01			add EDI, 1		;increment
 000004F5  8B 45 F8			mov EAX, quotient
 000004F8  89 45 FC			mov num, EAX
 000004FB  FF 45 F0			inc newStringLen
 000004FE  E9 FFFFFF49			jmp _MainConversionLoop


 00000503			_AddTERMINATOR:
 00000503  B0 00			mov	AL, 0
 00000505  88 07			mov [EDI], AL	;move result to output variable
 00000507  FF 45 F0			inc newStringLen


 0000050A			_FinishConvertingNumtoString:

					;NEED TO REVERSE STRING AFTERWARDS
 0000050A  8B 4D F0			mov ECX, newStringLen
 0000050D  8B 75 0C			mov ESI, [EBP + 12]		; temp string offset from stack
 00000510  03 F1			add ESI, ECX			; so source strings starts from end
 00000512  4E				dec ESI
 00000513  4E				dec ESI
 00000514  8B 7D 10			mov EDI, [EBP + 16]		; temp string offset2 from stack
					
 00000517  83 7D EC 02			cmp negativeFlag, 2
 0000051B  74 02			jz _addNegativeSignBeforeReversal
 0000051D  EB 0A			jmp _revLoop

 0000051F			_addNegativeSignBeforeReversal:
 0000051F  B8 0000002D			mov EAX, 45
 00000524  89 07			mov [EDI], EAX		; temp string offset2 from stack
 00000526  83 C7 01			add edi, 1

 00000529			_revLoop: ;reference StringManipulator.asm from canvas
 00000529  FD				STD
 0000052A  AC				LODSB
 0000052B  FC				CLD
 0000052C  AA				STOSB
 0000052D  E2 FA			LOOP _revLoop



 0000052F  61				POPAD
 00000530  C9		   *	    leave  
 00000531  C2 000C			ret 12

 00000534			ConvertNumtoASCII ENDP






					;PUSH    OFFSET sum_all_nums
					;PUSH    OFFSET IntegerArray_len
					;PUSH    OFFSET IntegerArray

 00000534			CalculateSum PROC
					LOCAL num:SDWORD 
 00000534  55		   *	    push   ebp
 00000535  8B EC	   *	    mov    ebp, esp
 00000537  83 C4 FC	   *	    add    esp, 0FFFFFFFCh
 0000053A  60				PUSHAD

 0000053B  C7 45 FC			mov num, 0
	   00000000

 00000542  8B 4D 0C			mov ECX, [EBP + 12]		; OFFSET IntegerArray_len
 00000545  8B 09			mov ECX, [ECX]
 00000547  8B 7D 08			mov EDI, [EBP + 8]		; OFFSET IntegerArray

 0000054A			_SumLoop:	
 0000054A  8B 07			mov EAX, [EDI]
 0000054C  8B 5D FC			mov EBX, num
 0000054F  03 C3			add EAX, EBX
 00000551  89 45 FC			mov num, EAX
 00000554  83 C7 04			add EDI, 4

 00000557  E2 F1			LOOP _SumLoop

					
 00000559  8B 45 10			mov EAX, [EBP + 16]		; OFFSET sum_all_nums
 0000055C  8B 5D FC			mov EBX, num
 0000055F  89 18			mov [EAX], EBX


 00000561  61				POPAD
 00000562  C9		   *	    leave  
 00000563  C2 000C			ret 12

 00000566			CalculateSum ENDP


					;PUSH    OFFSET rounded_avg
					;PUSH    OFFSET sum_all_nums
					;PUSH    OFFSET IntegerArray_len

 00000566			CalculateAverage PROC
					LOCAL num:SDWORD, quotient:SDWORD, remainder:SDWORD, divisor:DWORD, dividend: SDWORD ;,doubledRemainder:SDWORD, 
 00000566  55		   *	    push   ebp
 00000567  8B EC	   *	    mov    ebp, esp
 00000569  83 C4 EC	   *	    add    esp, 0FFFFFFECh
 0000056C  60				PUSHAD

 0000056D  C7 45 FC			mov num, 0
	   00000000
 00000574  8B 4D 08			mov ECX, [EBP + 8]		; OFFSET IntegerArray_len
 00000577  8B 09			mov ECX, [ECX]
 00000579  89 4D F0			mov divisor, ECX
 0000057C  8B 45 0C			mov EAX, [EBP + 12]		; OFFSET sum_all_nums
 0000057F  8B 00			mov EAX, [EAX]
 00000581  89 45 EC			mov dividend, EAX
 00000584  99				CDQ
 00000585  F7 F9			IDIV ECX

 00000587  89 45 F8			mov quotient, EAX
 0000058A  89 55 F4			mov remainder, EDX
				;
				; ***********COMMENTED OUT AS PROJECT INSTRUCTIONS CHANGED FROM ROUNDING TO TRUNCATION - REFERENCE ED DISCUSSION 1661642****************
				;
				;	mov EAX, remainder
				;	mov EBX, 2
				;	mul EBX
				;	mov doubledRemainder, EAX
				;
				;
				;	cmp dividend, 0
				;	jl	_testNegativeRounding
				;	jmp _testPositiveRounding
				;
				;_testNegativeRounding:
				;	cmp EAX, dividend
				;	jle _roundNegativeDown
				;	jmp _saveValue
				;
				;_testPositiveRounding:
				;	cmp EAX, dividend
				;	jge _roundPositiveUp
				;	jmp _saveValue
				;
				;_roundPositiveUp:	
				;	inc quotient
				;	jmp _saveValue
				;
				;_roundNegativeDown:
				;	dec quotient

 0000058D			_saveValue:

 0000058D  8B 45 10			mov EAX, [EBP + 16]		; OFFSET rounded_avg
 00000590  8B 5D F8			mov EBX, quotient
 00000593  89 18			mov [EAX], ebx	





 00000595  61				POPAD
 00000596  C9		   *	    leave  
 00000597  C2 000C			ret 12

 0000059A			CalculateAverage ENDP




 0000059A			WriteVal PROC

					LOCAL num:SDWORD, arrayLengthNum:SDWORD, integerArrayReference:SDWORD
 0000059A  55		   *	    push   ebp
 0000059B  8B EC	   *	    mov    ebp, esp
 0000059D  83 C4 F4	   *	    add    esp, 0FFFFFFF4h
 000005A0  60				PUSHAD

 000005A1  8B 4D 0C			mov ECX, [EBP + 12]		; OFFSET integer array length from stack for LOOP counter
 000005A4  8B 09			mov ECX, [ECX]
 000005A6  89 4D F8			mov arrayLengthNum, ECX
 000005A9  8B 75 08			mov ESI, [EBP + 8]		; OFFSET integer array from stack
 000005AC  89 75 F4			mov integerArrayReference, ESI
					;mov EDI, [EBP + 16]	; OFFSET string array from stack


 000005AF			_convertLoop:

 000005AF  8B 45 18			mov EAX, [EBP + 24]		; OFFSET temp_string2 RETURN VARIABLE from stack	
 000005B2  50				PUSH EAX				; push temp_string for ConvertNumtoASCII proc

 000005B3  8B 45 14			mov EAX, [EBP + 20]		; OFFSET temp_string RETURN VARIABLE from stack	
 000005B6  50				PUSH EAX				; push temp_string for ConvertNumtoASCII proc

 000005B7  8B 1E			mov EBX, [ESI]			; save value in EBX
 000005B9  53				PUSH EBX				; push int from integer array by value for ConvertNumtoASCII proc

 000005BA  E8 FFFFFE2B			CALL ConvertNumtoASCII  ; parameter order: return string, int by val

 000005BF  8B 45 18			mov EAX, [EBP + 24]		; access return value from stack that ConvertNumtoASCII used with temp string
					
 000005C2  89 45 FC			mov num, EAX
					mDisplayString num
 000005C5  52		     1		PUSH  EDX				;Save EDX register
 000005C6  8B 55 FC	     1		MOV   EDX, num
 000005C9  E8 00000000 E     1		CALL  WriteString
 000005CE  5A		     1		POP   EDX				;Restore EDX

 000005CF  83 F9 01			cmp ECX, 1
 000005D2  74 0C			jz _noComma

 000005D4			_writeComma:	
 000005D4  8B 45 1C			mov EAX, [EBP + 28]		;comma string
					mDisplayString EAX
 000005D7  52		     1		PUSH  EDX				;Save EDX register
 000005D8  8B D0	     1		MOV   EDX, EAX
 000005DA  E8 00000000 E     1		CALL  WriteString
 000005DF  5A		     1		POP   EDX				;Restore EDX

 000005E0			_noComma:

 000005E0  83 C6 04			add ESI, 4				; increment int array

 000005E3  E2 CA			LOOP _convertLoop
					
					
					
 000005E5  61				POPAD
 000005E6  C9		   *	    leave  
 000005E7  C2 0018			ret 24



 000005EA			WriteVal ENDP



				; =======================================================================================================================================================
				; Name:	setTextColorWhite
				; Procedure to change console text to white.
				; Preconditions: none
				; Postconditions: none
				; Receives: none
				; Returns:  none
				; =======================================================================================================================================================
 000005EA			setTextColorWhite PROC
 000005EA  B8 0000000F			mov		eax, white 
 000005EF  E8 00000000 E		call	SetTextColor
 000005F4  C3				ret
 000005F5			setTextColorWhite ENDP

				; =======================================================================================================================================================
				; Name:	setTextColorGreen
				; Procedure to change console text to green.
				; Preconditions: none
				; Postconditions: none
				; Receives: none
				; Returns:  none
				; =======================================================================================================================================================
 000005F5			setTextColorGreen PROC	
 000005F5  B8 00000002			mov		eax, green 
 000005FA  E8 00000000 E		call	SetTextColor
 000005FF  C3				ret
 00000600			setTextColorGreen ENDP






				END main
Microsoft (R) Macro Assembler Version 14.29.30133.0	    08/04/22 23:08:03
<Project 6 - String Primitives and Macros      (Proj6_iwanek  Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000577 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000600 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CalculateAverage . . . . . . . .	P Near	 00000566 _TEXT	Length= 00000034 Public STDCALL
  num  . . . . . . . . . . . . .	DWord	 bp - 00000004
  quotient . . . . . . . . . . .	DWord	 bp - 00000008
  remainder  . . . . . . . . . .	DWord	 bp - 0000000C
  divisor  . . . . . . . . . . .	DWord	 bp - 00000010
  dividend . . . . . . . . . . .	DWord	 bp - 00000014
  _saveValue . . . . . . . . . .	L Near	 0000058D _TEXT	
CalculateSum . . . . . . . . . .	P Near	 00000534 _TEXT	Length= 00000032 Public STDCALL
  num  . . . . . . . . . . . . .	DWord	 bp - 00000004
  _SumLoop . . . . . . . . . . .	L Near	 0000054A _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ConvertASCIItoNum  . . . . . . .	P Near	 00000351 _TEXT	Length= 00000099 Public STDCALL
  numText  . . . . . . . . . . .	Byte	 bp - 00000001
  _zero  . . . . . . . . . . . .	L Near	 0000039D _TEXT	
  _one . . . . . . . . . . . . .	L Near	 000003A4 _TEXT	
  _two . . . . . . . . . . . . .	L Near	 000003AB _TEXT	
  _three . . . . . . . . . . . .	L Near	 000003B2 _TEXT	
  _four  . . . . . . . . . . . .	L Near	 000003B9 _TEXT	
  _five  . . . . . . . . . . . .	L Near	 000003C0 _TEXT	
  _six . . . . . . . . . . . . .	L Near	 000003C7 _TEXT	
  _seven . . . . . . . . . . . .	L Near	 000003CE _TEXT	
  _eight . . . . . . . . . . . .	L Near	 000003D5 _TEXT	
  _nine  . . . . . . . . . . . .	L Near	 000003DC _TEXT	
  _return  . . . . . . . . . . .	L Near	 000003E3 _TEXT	
ConvertNumtoASCII  . . . . . . .	P Near	 000003EA _TEXT	Length= 0000014A Public STDCALL
  num  . . . . . . . . . . . . .	DWord	 bp - 00000004
  quotient . . . . . . . . . . .	DWord	 bp - 00000008
  remainder  . . . . . . . . . .	DWord	 bp - 0000000C
  newStringLen . . . . . . . . .	DWord	 bp - 00000010
  negativeFlag . . . . . . . . .	DWord	 bp - 00000014
  _ClearString_one . . . . . . .	L Near	 00000400 _TEXT	
  _ClearString_two . . . . . . .	L Near	 00000414 _TEXT	
  _numIsNegativeInvert . . . . .	L Near	 00000440 _TEXT	
  _MainConversionLoop  . . . . .	L Near	 0000044C _TEXT	
  _Quotient  . . . . . . . . . .	L Near	 0000046E _TEXT	
  _remainderExists . . . . . . .	L Near	 00000478 _TEXT	
  _startNumConversion  . . . . .	L Near	 00000480 _TEXT	
  _zero_num  . . . . . . . . . .	L Near	 000004BC _TEXT	
  _one_num . . . . . . . . . . .	L Near	 000004C0 _TEXT	
  _two_num . . . . . . . . . . .	L Near	 000004C4 _TEXT	
  _three_num . . . . . . . . . .	L Near	 000004C8 _TEXT	
  _four_num  . . . . . . . . . .	L Near	 000004CC _TEXT	
  _five_num  . . . . . . . . . .	L Near	 000004D0 _TEXT	
  _six_num . . . . . . . . . . .	L Near	 000004D4 _TEXT	
  _seven_num . . . . . . . . . .	L Near	 000004D8 _TEXT	
  _eight_num . . . . . . . . . .	L Near	 000004DC _TEXT	
  _nine_num  . . . . . . . . . .	L Near	 000004E0 _TEXT	
  _NumisJustZero . . . . . . . .	L Near	 000004E4 _TEXT	
  add_num_to_string  . . . . . .	L Near	 000004F0 _TEXT	
  _AddTERMINATOR . . . . . . . .	L Near	 00000503 _TEXT	
  _FinishConvertingNumtoString .	L Near	 0000050A _TEXT	
  _addNegativeSignBeforeReversal .	L Near	 0000051F _TEXT	
  _revLoop . . . . . . . . . . .	L Near	 00000529 _TEXT	
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000183 _TEXT	Length= 00000199 Public STDCALL
  StringMaxLen . . . . . . . . .	DWord	 bp - 00000004
  StringRef  . . . . . . . . . .	DWord	 bp - 00000008
  NumsEntered  . . . . . . . . .	DWord	 bp - 0000000C
  sign . . . . . . . . . . . . .	DWord	 bp - 00000010
  numTemp  . . . . . . . . . . .	DWord	 bp - 00000014
  returnValueAscii . . . . . . .	DWord	 bp - 00000018
  arrayelements  . . . . . . . .	DWord	 bp - 0000001C
  messagePrompt  . . . . . . . .	DWord	 bp - 00000020
  _PromptUserInput . . . . . . .	L Near	 0000019D _TEXT	
  _convertString . . . . . . . .	L Near	 000001F3 _TEXT	
  _checkifSign . . . . . . . . .	L Near	 00000206 _TEXT	
  _Convert . . . . . . . . . . .	L Near	 00000210 _TEXT	
  _NextLoop  . . . . . . . . . .	L Near	 00000241 _TEXT	
  _NotNumError . . . . . . . . .	L Near	 00000245 _TEXT	
  _noInputError  . . . . . . . .	L Near	 0000025E _TEXT	
  _TestifFirstDigitPlus  . . . .	L Near	 00000277 _TEXT	
  _TestifFirstDigitMinus . . . .	L Near	 0000028B _TEXT	
  _signNotFirstError . . . . . .	L Near	 0000029F _TEXT	
  _FinishedConvertingtoNum . . .	L Near	 000002B8 _TEXT	
  _convertNumtoNegative  . . . .	L Near	 000002C0 _TEXT	
  _testIfNumtooLarge . . . . . .	L Near	 000002C8 _TEXT	
  _numTooLargeError  . . . . . .	L Near	 000002DB _TEXT	
  _storeNumtoArray . . . . . . .	L Near	 000002F4 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 0000059A _TEXT	Length= 00000050 Public STDCALL
  num  . . . . . . . . . . . . .	DWord	 bp - 00000004
  arrayLengthNum . . . . . . . .	DWord	 bp - 00000008
  integerArrayReference  . . . .	DWord	 bp - 0000000C
  _convertLoop . . . . . . . . .	L Near	 000005AF _TEXT	
  _writeComma  . . . . . . . . .	L Near	 000005D4 _TEXT	
  _noComma . . . . . . . . . . .	L Near	 000005E0 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
getStringLen . . . . . . . . . .	P Near	 0000031C _TEXT	Length= 00000035 Public STDCALL
  StringLen  . . . . . . . . . .	DWord	 bp - 00000004
  _countLoop . . . . . . . . . .	L Near	 00000332 _TEXT	
  _nocount . . . . . . . . . . .	L Near	 00000342 _TEXT	
  _end . . . . . . . . . . . . .	L Near	 00000344 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000183 Public STDCALL
  _InputNumberLoop . . . . . . .	L Near	 0000001D _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
setTextColorGreen  . . . . . . .	P Near	 000005F5 _TEXT	Length= 0000000B Public STDCALL
setTextColorWhite  . . . . . . .	P Near	 000005EA _TEXT	Length= 0000000B Public STDCALL
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
Error_char_num . . . . . . . . .	Byte	 000003D6 _DATA	
Error_no_input . . . . . . . . .	Byte	 000003AD _DATA	
Error_sign_use . . . . . . . . .	Byte	 00000416 _DATA	
Error_too_large  . . . . . . . .	Byte	 00000468 _DATA	
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
IntegerArray_len2  . . . . . . .	DWord	 000002AD _DATA	
IntegerArray_len . . . . . . . .	DWord	 000002A9 _DATA	
IntegerArray . . . . . . . . . .	DWord	 00000323 _DATA	
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
StringArray  . . . . . . . . . .	DWord	 0000034B _DATA	
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
comma_string . . . . . . . . . .	Byte	 00000574 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
display_1  . . . . . . . . . . .	Byte	 000004D3 _DATA	
display_2  . . . . . . . . . . .	Byte	 000004F7 _DATA	
display_3  . . . . . . . . . . .	Byte	 0000051B _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 0000054D _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
num_prompt . . . . . . . . . . .	Byte	 00000377 _DATA	
program_info_1 . . . . . . . . .	Byte	 00000000 _DATA	
program_info_2 . . . . . . . . .	Byte	 00000053 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
rounded_avg  . . . . . . . . . .	DWord	 000002A1 _DATA	
sum_all_nums . . . . . . . . . .	DWord	 000002A5 _DATA	
temp_num2  . . . . . . . . . . .	DWord	 0000029D _DATA	
temp_num . . . . . . . . . . . .	DWord	 00000299 _DATA	
temp_string2 . . . . . . . . . .	Byte	 00000303 _DATA	
temp_string  . . . . . . . . . .	Byte	 000002E3 _DATA	
userString_len . . . . . . . . .	DWord	 00000295 _DATA	
userString_max_len . . . . . . .	DWord	 00000373 _DATA	
userString . . . . . . . . . . .	Byte	 000002B1 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
